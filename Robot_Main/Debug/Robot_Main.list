
Robot_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc8  0800c1e8  0800c1e8  0001c1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1b0  0800d1b0  00020258  2**0
                  CONTENTS
  4 .ARM          00000000  0800d1b0  0800d1b0  00020258  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d1b0  0800d1b0  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1b0  0800d1b0  0001d1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1b4  0800d1b4  0001d1b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800d1b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e38  20000258  0800d410  00020258  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001090  0800d410  00021090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020281  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f08  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e4  00000000  00000000  000361cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001558  00000000  00000000  000396b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010af  00000000  00000000  0003ac08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae2c  00000000  00000000  0003bcb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a2a5  00000000  00000000  00056ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096a7b  00000000  00000000  00070d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e68  00000000  00000000  00107804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0010e66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000258 	.word	0x20000258
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c1cc 	.word	0x0800c1cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000025c 	.word	0x2000025c
 800014c:	0800c1cc 	.word	0x0800c1cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__gesf2>:
 8000b28:	f04f 3cff 	mov.w	ip, #4294967295
 8000b2c:	e006      	b.n	8000b3c <__cmpsf2+0x4>
 8000b2e:	bf00      	nop

08000b30 <__lesf2>:
 8000b30:	f04f 0c01 	mov.w	ip, #1
 8000b34:	e002      	b.n	8000b3c <__cmpsf2+0x4>
 8000b36:	bf00      	nop

08000b38 <__cmpsf2>:
 8000b38:	f04f 0c01 	mov.w	ip, #1
 8000b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d011      	beq.n	8000b78 <__cmpsf2+0x40>
 8000b54:	b001      	add	sp, #4
 8000b56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b5a:	bf18      	it	ne
 8000b5c:	ea90 0f01 	teqne	r0, r1
 8000b60:	bf58      	it	pl
 8000b62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b66:	bf88      	it	hi
 8000b68:	17c8      	asrhi	r0, r1, #31
 8000b6a:	bf38      	it	cc
 8000b6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b70:	bf18      	it	ne
 8000b72:	f040 0001 	orrne.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b7c:	d102      	bne.n	8000b84 <__cmpsf2+0x4c>
 8000b7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b82:	d105      	bne.n	8000b90 <__cmpsf2+0x58>
 8000b84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b88:	d1e4      	bne.n	8000b54 <__cmpsf2+0x1c>
 8000b8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b8e:	d0e1      	beq.n	8000b54 <__cmpsf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cfrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	4661      	mov	r1, ip
 8000b9e:	e7ff      	b.n	8000ba0 <__aeabi_cfcmpeq>

08000ba0 <__aeabi_cfcmpeq>:
 8000ba0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ba2:	f7ff ffc9 	bl	8000b38 <__cmpsf2>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	bf48      	it	mi
 8000baa:	f110 0f00 	cmnmi.w	r0, #0
 8000bae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bb0 <__aeabi_fcmpeq>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff fff4 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bb8:	bf0c      	ite	eq
 8000bba:	2001      	moveq	r0, #1
 8000bbc:	2000      	movne	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fcmplt>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffea 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000bcc:	bf34      	ite	cc
 8000bce:	2001      	movcc	r0, #1
 8000bd0:	2000      	movcs	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fcmple>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffe0 	bl	8000ba0 <__aeabi_cfcmpeq>
 8000be0:	bf94      	ite	ls
 8000be2:	2001      	movls	r0, #1
 8000be4:	2000      	movhi	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_fcmpge>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffd2 	bl	8000b98 <__aeabi_cfrcmple>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fcmpgt>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffc8 	bl	8000b98 <__aeabi_cfrcmple>
 8000c08:	bf34      	ite	cc
 8000c0a:	2001      	movcc	r0, #1
 8000c0c:	2000      	movcs	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_f2iz>:
 8000c14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c18:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c1c:	d30f      	bcc.n	8000c3e <__aeabi_f2iz+0x2a>
 8000c1e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c26:	d90d      	bls.n	8000c44 <__aeabi_f2iz+0x30>
 8000c28:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c30:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c34:	fa23 f002 	lsr.w	r0, r3, r2
 8000c38:	bf18      	it	ne
 8000c3a:	4240      	negne	r0, r0
 8000c3c:	4770      	bx	lr
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	4770      	bx	lr
 8000c44:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c48:	d101      	bne.n	8000c4e <__aeabi_f2iz+0x3a>
 8000c4a:	0242      	lsls	r2, r0, #9
 8000c4c:	d105      	bne.n	8000c5a <__aeabi_f2iz+0x46>
 8000c4e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c52:	bf08      	it	eq
 8000c54:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f04f 0000 	mov.w	r0, #0
 8000c5e:	4770      	bx	lr

08000c60 <writeReg>:

extern I2C_HandleTypeDef hi2c1;

#define CCS_I2C &hi2c1

void writeReg(uint8_t reg, uint8_t *pBuf, size_t size){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af04      	add	r7, sp, #16
 8000c66:	4603      	mov	r3, r0
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(CCS_I2C, (CCS811_I2C_ADDRESS1<<1),reg, 1, pBuf, size, 800); //Ghi lien tiep size bytes.
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c7a:	9102      	str	r1, [sp, #8]
 8000c7c:	9301      	str	r3, [sp, #4]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2301      	movs	r3, #1
 8000c84:	21b4      	movs	r1, #180	; 0xb4
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <writeReg+0x34>)
 8000c88:	f004 f822 	bl	8004cd0 <HAL_I2C_Mem_Write>

}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000b1c 	.word	0x20000b1c

08000c98 <CCS811_softReset>:



void CCS811_softReset(void){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

	uint8_t value[4] = {0x11, 0xE5, 0x72, 0x8A}; // gia tri trang 15 datasheet.
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <CCS811_softReset+0x20>)
 8000ca0:	607b      	str	r3, [r7, #4]
	writeReg(CCS811_REG_SW_RESET, value, 4);
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	20ff      	movs	r0, #255	; 0xff
 8000caa:	f7ff ffd9 	bl	8000c60 <writeReg>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	8a72e511 	.word	0x8a72e511

08000cbc <readReg>:

uint8_t readReg(uint8_t reg, uint8_t *pBuf, size_t size){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af04      	add	r7, sp, #16
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Read(CCS_I2C,(CCS811_I2C_ADDRESS1<<1), reg, 1, pBuf, size, 800);
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000cd6:	9102      	str	r1, [sp, #8]
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2301      	movs	r3, #1
 8000ce0:	21b4      	movs	r1, #180	; 0xb4
 8000ce2:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <readReg+0x38>)
 8000ce4:	f004 f8ee 	bl	8004ec4 <HAL_I2C_Mem_Read>
	return size;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	b2db      	uxtb	r3, r3
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000b1c 	.word	0x20000b1c

08000cf8 <setMeasurementMode>:

void setMeasurementMode(eCycle_t mode, uint8_t thresh, uint8_t interrupt){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	460b      	mov	r3, r1
 8000d04:	71bb      	strb	r3, [r7, #6]
 8000d06:	4613      	mov	r3, r2
 8000d08:	717b      	strb	r3, [r7, #5]

	uint8_t measurement[1] = {0};
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	733b      	strb	r3, [r7, #12]

	measurement[0] = (thresh << 2) | (interrupt << 3) | (mode << 4);
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	b25a      	sxtb	r2, r3
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	733b      	strb	r3, [r7, #12]

	writeReg(CCS811_REG_MEAS_MODE, measurement, 1);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2201      	movs	r2, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff ff93 	bl	8000c60 <writeReg>

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <setInTempHum>:

void setInTempHum(float temperature, float humidity){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	int _temp, _rh;

	if(temperature>0)
 8000d4e:	f04f 0100 	mov.w	r1, #0
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ff54 	bl	8000c00 <__aeabi_fcmpgt>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d014      	beq.n	8000d88 <setInTempHum+0x44>
		_temp = (int)temperature + 0.5;  // this will round off the floating point to the nearest integer value
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ff58 	bl	8000c14 <__aeabi_f2iz>
 8000d64:	4603      	mov	r3, r0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fb4c 	bl	8000404 <__aeabi_i2d>
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <setInTempHum+0xdc>)
 8000d72:	f7ff f9fb 	bl	800016c <__adddf3>
 8000d76:	4602      	mov	r2, r0
 8000d78:	460b      	mov	r3, r1
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f7ff fe5b 	bl	8000a38 <__aeabi_d2iz>
 8000d82:	4603      	mov	r3, r0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e01b      	b.n	8000dc0 <setInTempHum+0x7c>
	else if(temperature<0) // account for negative temperatures
 8000d88:	f04f 0100 	mov.w	r1, #0
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff19 	bl	8000bc4 <__aeabi_fcmplt>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d013      	beq.n	8000dc0 <setInTempHum+0x7c>
		_temp = (int)temperature - 0.5;
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff3b 	bl	8000c14 <__aeabi_f2iz>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fb2f 	bl	8000404 <__aeabi_i2d>
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <setInTempHum+0xdc>)
 8000dac:	f7ff f9dc 	bl	8000168 <__aeabi_dsub>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4610      	mov	r0, r2
 8000db6:	4619      	mov	r1, r3
 8000db8:	f7ff fe3e 	bl	8000a38 <__aeabi_d2iz>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	617b      	str	r3, [r7, #20]
	_temp = _temp + 25;  // temperature high byte is stored as T+25°C in the sensor's memory so the value of byte is positive
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3319      	adds	r3, #25
 8000dc4:	617b      	str	r3, [r7, #20]
	_rh = (int)humidity + 0.5;  // this will round off the floating point to the nearest integer value
 8000dc6:	6838      	ldr	r0, [r7, #0]
 8000dc8:	f7ff ff24 	bl	8000c14 <__aeabi_f2iz>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fb18 	bl	8000404 <__aeabi_i2d>
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <setInTempHum+0xdc>)
 8000dda:	f7ff f9c7 	bl	800016c <__adddf3>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff fe27 	bl	8000a38 <__aeabi_d2iz>
 8000dea:	4603      	mov	r3, r0
 8000dec:	613b      	str	r3, [r7, #16]

	uint8_t envData[4];

	envData[0] = _rh << 1;  // shift the binary number to left by 1. This is stored as a 7-bit value
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	733b      	strb	r3, [r7, #12]
	envData[1] = 0;  // most significant fractional bit. Using 0 here - gives us accuracy of +/-1%. Current firmware (2016) only supports fractional increments of 0.5
 8000df8:	2300      	movs	r3, #0
 8000dfa:	737b      	strb	r3, [r7, #13]
	envData[2] = _temp << 1;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	73bb      	strb	r3, [r7, #14]
	envData[3] = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]

	writeReg(CCS811_REG_ENV_DATA, envData, 4);
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2204      	movs	r2, #4
 8000e10:	4619      	mov	r1, r3
 8000e12:	2005      	movs	r0, #5
 8000e14:	f7ff ff24 	bl	8000c60 <writeReg>

}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	3fe00000 	.word	0x3fe00000

08000e24 <CCS811_Init>:
uint8_t CCS811_Init(void){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af02      	add	r7, sp, #8
	uint8_t id[1];
	CCS811_softReset();
 8000e2a:	f7ff ff35 	bl	8000c98 <CCS811_softReset>
	 HAL_Delay(100);
 8000e2e:	2064      	movs	r0, #100	; 0x64
 8000e30:	f002 fb6a 	bl	8003508 <HAL_Delay>
	if(readReg(CCS811_REG_HW_ID, id,1)==0){
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2201      	movs	r2, #1
 8000e38:	4619      	mov	r1, r3
 8000e3a:	2020      	movs	r0, #32
 8000e3c:	f7ff ff3e 	bl	8000cbc <readReg>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <CCS811_Init+0x26>
		return 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e021      	b.n	8000e8e <CCS811_Init+0x6a>
	}
	if(id[0] ==0x81){
 8000e4a:	793b      	ldrb	r3, [r7, #4]
 8000e4c:	2b81      	cmp	r3, #129	; 0x81
 8000e4e:	d11d      	bne.n	8000e8c <CCS811_Init+0x68>
		HAL_Delay(20);
 8000e50:	2014      	movs	r0, #20
 8000e52:	f002 fb59 	bl	8003508 <HAL_Delay>
		//writeReg(CCS811_BOOTLOADER_APP_START, NULL, 0);
		//uint8_t buf[1]={0};
		//writeReg(CCS811_BOOTLOADER_APP_START,buf, 1);
		uint8_t    lodata[1];
			       lodata[0]=CCS811_BOOTLOADER_APP_START;
 8000e56:	23f4      	movs	r3, #244	; 0xf4
 8000e58:	703b      	strb	r3, [r7, #0]
		HAL_I2C_Master_Transmit(CCS_I2C, (CCS811_I2C_ADDRESS1<<1), lodata, 1, 100);
 8000e5a:	463a      	mov	r2, r7
 8000e5c:	2364      	movs	r3, #100	; 0x64
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2301      	movs	r3, #1
 8000e62:	21b4      	movs	r1, #180	; 0xb4
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <CCS811_Init+0x74>)
 8000e66:	f003 fe35 	bl	8004ad4 <HAL_I2C_Master_Transmit>
		HAL_Delay(20);
 8000e6a:	2014      	movs	r0, #20
 8000e6c:	f002 fb4c 	bl	8003508 <HAL_Delay>
		setMeasurementMode(eCycle_250ms,0,0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2004      	movs	r0, #4
 8000e76:	f7ff ff3f 	bl	8000cf8 <setMeasurementMode>
		HAL_Delay(10);
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f002 fb44 	bl	8003508 <HAL_Delay>
		setInTempHum(25, 50);
 8000e80:	4906      	ldr	r1, [pc, #24]	; (8000e9c <CCS811_Init+0x78>)
 8000e82:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <CCS811_Init+0x7c>)
 8000e84:	f7ff ff5e 	bl	8000d44 <setInTempHum>
		return 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <CCS811_Init+0x6a>
	}
	else return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000b1c 	.word	0x20000b1c
 8000e9c:	42480000 	.word	0x42480000
 8000ea0:	41c80000 	.word	0x41c80000

08000ea4 <CCS811_checkDataReady>:

uint8_t CCS811_checkDataReady()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
    uint8_t status[1] = {0};
 8000eaa:	2300      	movs	r3, #0
 8000eac:	713b      	strb	r3, [r7, #4]

    readReg(CCS811_REG_STATUS, status, 1);
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff ff01 	bl	8000cbc <readReg>

    //DBG(status[0],HEX);
    if(!((status[0] >> 3) & 0x01))
 8000eba:	793b      	ldrb	r3, [r7, #4]
 8000ebc:	08db      	lsrs	r3, r3, #3
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <CCS811_checkDataReady+0x28>
        return 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e000      	b.n	8000ece <CCS811_checkDataReady+0x2a>
    else
        return 1;
 8000ecc:	2301      	movs	r3, #1
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <CCS811_getCO2PPM>:

uint16_t CCS811_getCO2PPM(){
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
    uint8_t buffer[8];
    uint16_t eCO2;
    readReg(CCS811_REG_ALG_RESULT_DATA, buffer, 8);
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2208      	movs	r2, #8
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f7ff feea 	bl	8000cbc <readReg>

    eCO2 = (((uint16_t)buffer[0] << 8) | (uint16_t)buffer[1]);
 8000ee8:	793b      	ldrb	r3, [r7, #4]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	797b      	ldrb	r3, [r7, #5]
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	81fb      	strh	r3, [r7, #14]

    return eCO2;
 8000ef8:	89fb      	ldrh	r3, [r7, #14]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <CCS811_getTVOCPPB>:

uint16_t CCS811_getTVOCPPB(){
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
    uint8_t buffer[8];
    uint16_t eTVOC;
    readReg(CCS811_REG_ALG_RESULT_DATA, buffer, 8);
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff fed4 	bl	8000cbc <readReg>
    eTVOC = (((uint16_t)buffer[2] << 8) | (uint16_t)buffer[3]);
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	81fb      	strh	r3, [r7, #14]
    return eTVOC;
 8000f24:	89fb      	ldrh	r3, [r7, #14]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <CCS811_writeBaseLine>:

void CCS811_writeBaseLine(uint16_t baseLine){
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	80fb      	strh	r3, [r7, #6]
    uint8_t buffer[2];

    buffer[0] = baseLine>>8;
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	733b      	strb	r3, [r7, #12]
    buffer[1] = baseLine;
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	737b      	strb	r3, [r7, #13]
    writeReg(CCS811_REG_BASELINE, buffer, 2);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2011      	movs	r0, #17
 8000f52:	f7ff fe85 	bl	8000c60 <writeReg>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <decodeGGA>:
int inx = 0;
int hr=0,min=0,day=0,mon=0,yr=0;
int daychange = 0;
// Gia ma GGA
int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000f60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f64:	b08c      	sub	sp, #48	; 0x30
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000f6c:	4b5b      	ldr	r3, [pc, #364]	; (80010dc <decodeGGA+0x17c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000f76:	e004      	b.n	8000f82 <decodeGGA+0x22>
 8000f78:	4b58      	ldr	r3, [pc, #352]	; (80010dc <decodeGGA+0x17c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4a57      	ldr	r2, [pc, #348]	; (80010dc <decodeGGA+0x17c>)
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b56      	ldr	r3, [pc, #344]	; (80010dc <decodeGGA+0x17c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b2c      	cmp	r3, #44	; 0x2c
 8000f90:	d1f2      	bne.n	8000f78 <decodeGGA+0x18>
	inx++;
 8000f92:	4b52      	ldr	r3, [pc, #328]	; (80010dc <decodeGGA+0x17c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a50      	ldr	r2, [pc, #320]	; (80010dc <decodeGGA+0x17c>)
 8000f9a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000f9c:	e004      	b.n	8000fa8 <decodeGGA+0x48>
 8000f9e:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <decodeGGA+0x17c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a4d      	ldr	r2, [pc, #308]	; (80010dc <decodeGGA+0x17c>)
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <decodeGGA+0x17c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b2c      	cmp	r3, #44	; 0x2c
 8000fb6:	d1f2      	bne.n	8000f9e <decodeGGA+0x3e>
	inx++;
 8000fb8:	4b48      	ldr	r3, [pc, #288]	; (80010dc <decodeGGA+0x17c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a47      	ldr	r2, [pc, #284]	; (80010dc <decodeGGA+0x17c>)
 8000fc0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000fc2:	e004      	b.n	8000fce <decodeGGA+0x6e>
 8000fc4:	4b45      	ldr	r3, [pc, #276]	; (80010dc <decodeGGA+0x17c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	4a44      	ldr	r2, [pc, #272]	; (80010dc <decodeGGA+0x17c>)
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <decodeGGA+0x17c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b2c      	cmp	r3, #44	; 0x2c
 8000fdc:	d1f2      	bne.n	8000fc4 <decodeGGA+0x64>
	inx++;
 8000fde:	4b3f      	ldr	r3, [pc, #252]	; (80010dc <decodeGGA+0x17c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a3d      	ldr	r2, [pc, #244]	; (80010dc <decodeGGA+0x17c>)
 8000fe6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000fe8:	e004      	b.n	8000ff4 <decodeGGA+0x94>
 8000fea:	4b3c      	ldr	r3, [pc, #240]	; (80010dc <decodeGGA+0x17c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4a3a      	ldr	r2, [pc, #232]	; (80010dc <decodeGGA+0x17c>)
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b39      	ldr	r3, [pc, #228]	; (80010dc <decodeGGA+0x17c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b2c      	cmp	r3, #44	; 0x2c
 8001002:	d1f2      	bne.n	8000fea <decodeGGA+0x8a>
	inx++;
 8001004:	4b35      	ldr	r3, [pc, #212]	; (80010dc <decodeGGA+0x17c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a34      	ldr	r2, [pc, #208]	; (80010dc <decodeGGA+0x17c>)
 800100c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 800100e:	e004      	b.n	800101a <decodeGGA+0xba>
 8001010:	4b32      	ldr	r3, [pc, #200]	; (80010dc <decodeGGA+0x17c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	4a31      	ldr	r2, [pc, #196]	; (80010dc <decodeGGA+0x17c>)
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b30      	ldr	r3, [pc, #192]	; (80010dc <decodeGGA+0x17c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b2c      	cmp	r3, #44	; 0x2c
 8001028:	d1f2      	bne.n	8001010 <decodeGGA+0xb0>
	inx++;
 800102a:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <decodeGGA+0x17c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a2a      	ldr	r2, [pc, #168]	; (80010dc <decodeGGA+0x17c>)
 8001032:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8001034:	e004      	b.n	8001040 <decodeGGA+0xe0>
 8001036:	4b29      	ldr	r3, [pc, #164]	; (80010dc <decodeGGA+0x17c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a27      	ldr	r2, [pc, #156]	; (80010dc <decodeGGA+0x17c>)
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <decodeGGA+0x17c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b2c      	cmp	r3, #44	; 0x2c
 800104e:	d1f2      	bne.n	8001036 <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <decodeGGA+0x17c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	4a21      	ldr	r2, [pc, #132]	; (80010dc <decodeGGA+0x17c>)
 8001058:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <decodeGGA+0x17c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b31      	cmp	r3, #49	; 0x31
 8001068:	d00f      	beq.n	800108a <decodeGGA+0x12a>
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <decodeGGA+0x17c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b32      	cmp	r3, #50	; 0x32
 8001078:	d007      	beq.n	800108a <decodeGGA+0x12a>
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <decodeGGA+0x17c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b36      	cmp	r3, #54	; 0x36
 8001088:	d106      	bne.n	8001098 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <decodeGGA+0x17c>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8001096:	e009      	b.n	80010ac <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 800109e:	2301      	movs	r3, #1
 80010a0:	e2f2      	b.n	8001688 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <decodeGGA+0x17c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <decodeGGA+0x17c>)
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <decodeGGA+0x17c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b2c      	cmp	r3, #44	; 0x2c
 80010ba:	d1f2      	bne.n	80010a2 <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <decodeGGA+0x17c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <decodeGGA+0x17c>)
 80010c4:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	220c      	movs	r2, #12
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 f887 	bl	80091e2 <memset>
	i=0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80010d8:	e016      	b.n	8001108 <decodeGGA+0x1a8>
 80010da:	bf00      	nop
 80010dc:	20000274 	.word	0x20000274
	{
		buffer[i] = GGAbuffer[inx];
 80010e0:	4ba7      	ldr	r3, [pc, #668]	; (8001380 <decodeGGA+0x420>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	7819      	ldrb	r1, [r3, #0]
 80010ec:	f107 020c 	add.w	r2, r7, #12
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	4413      	add	r3, r2
 80010f4:	460a      	mov	r2, r1
 80010f6:	701a      	strb	r2, [r3, #0]
		i++;
 80010f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fa:	3301      	adds	r3, #1
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80010fe:	4ba0      	ldr	r3, [pc, #640]	; (8001380 <decodeGGA+0x420>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	4a9e      	ldr	r2, [pc, #632]	; (8001380 <decodeGGA+0x420>)
 8001106:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001108:	4b9d      	ldr	r3, [pc, #628]	; (8001380 <decodeGGA+0x420>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b2c      	cmp	r3, #44	; 0x2c
 8001116:	d1e3      	bne.n	80010e0 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4618      	mov	r0, r3
 800111e:	f007 fa51 	bl	80085c4 <atoi>
 8001122:	4603      	mov	r3, r0
 8001124:	4a97      	ldr	r2, [pc, #604]	; (8001384 <decodeGGA+0x424>)
 8001126:	fb82 1203 	smull	r1, r2, r2, r3
 800112a:	1312      	asrs	r2, r2, #12
 800112c:	17db      	asrs	r3, r3, #31
 800112e:	1ad2      	subs	r2, r2, r3
 8001130:	4b95      	ldr	r3, [pc, #596]	; (8001388 <decodeGGA+0x428>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4995      	ldr	r1, [pc, #596]	; (800138c <decodeGGA+0x42c>)
 8001136:	fb81 0103 	smull	r0, r1, r1, r3
 800113a:	1149      	asrs	r1, r1, #5
 800113c:	17db      	asrs	r3, r3, #31
 800113e:	1acb      	subs	r3, r1, r3
 8001140:	4413      	add	r3, r2
 8001142:	4a93      	ldr	r2, [pc, #588]	; (8001390 <decodeGGA+0x430>)
 8001144:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	4618      	mov	r0, r3
 800114c:	f007 fa3a 	bl	80085c4 <atoi>
 8001150:	4603      	mov	r3, r0
 8001152:	4a8e      	ldr	r2, [pc, #568]	; (800138c <decodeGGA+0x42c>)
 8001154:	fb82 1203 	smull	r1, r2, r2, r3
 8001158:	1152      	asrs	r2, r2, #5
 800115a:	17db      	asrs	r3, r3, #31
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	4a8b      	ldr	r2, [pc, #556]	; (800138c <decodeGGA+0x42c>)
 8001160:	fb82 1203 	smull	r1, r2, r2, r3
 8001164:	1151      	asrs	r1, r2, #5
 8001166:	17da      	asrs	r2, r3, #31
 8001168:	1a8a      	subs	r2, r1, r2
 800116a:	2164      	movs	r1, #100	; 0x64
 800116c:	fb01 f202 	mul.w	r2, r1, r2
 8001170:	1a9a      	subs	r2, r3, r2
 8001172:	4b85      	ldr	r3, [pc, #532]	; (8001388 <decodeGGA+0x428>)
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	4b85      	ldr	r3, [pc, #532]	; (800138c <decodeGGA+0x42c>)
 8001178:	fb83 0301 	smull	r0, r3, r3, r1
 800117c:	1158      	asrs	r0, r3, #5
 800117e:	17cb      	asrs	r3, r1, #31
 8001180:	1ac3      	subs	r3, r0, r3
 8001182:	2064      	movs	r0, #100	; 0x64
 8001184:	fb00 f303 	mul.w	r3, r0, r3
 8001188:	1acb      	subs	r3, r1, r3
 800118a:	4413      	add	r3, r2
 800118c:	4a81      	ldr	r2, [pc, #516]	; (8001394 <decodeGGA+0x434>)
 800118e:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8001190:	4b80      	ldr	r3, [pc, #512]	; (8001394 <decodeGGA+0x434>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b3b      	cmp	r3, #59	; 0x3b
 8001196:	dd09      	ble.n	80011ac <decodeGGA+0x24c>
	{
		min = min-60;
 8001198:	4b7e      	ldr	r3, [pc, #504]	; (8001394 <decodeGGA+0x434>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3b3c      	subs	r3, #60	; 0x3c
 800119e:	4a7d      	ldr	r2, [pc, #500]	; (8001394 <decodeGGA+0x434>)
 80011a0:	6013      	str	r3, [r2, #0]
		hr++;
 80011a2:	4b7b      	ldr	r3, [pc, #492]	; (8001390 <decodeGGA+0x430>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	4a79      	ldr	r2, [pc, #484]	; (8001390 <decodeGGA+0x430>)
 80011aa:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 80011ac:	4b78      	ldr	r3, [pc, #480]	; (8001390 <decodeGGA+0x430>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	da09      	bge.n	80011c8 <decodeGGA+0x268>
	{
		hr=24+hr;
 80011b4:	4b76      	ldr	r3, [pc, #472]	; (8001390 <decodeGGA+0x430>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3318      	adds	r3, #24
 80011ba:	4a75      	ldr	r2, [pc, #468]	; (8001390 <decodeGGA+0x430>)
 80011bc:	6013      	str	r3, [r2, #0]
		daychange--;
 80011be:	4b76      	ldr	r3, [pc, #472]	; (8001398 <decodeGGA+0x438>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	4a74      	ldr	r2, [pc, #464]	; (8001398 <decodeGGA+0x438>)
 80011c6:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 80011c8:	4b71      	ldr	r3, [pc, #452]	; (8001390 <decodeGGA+0x430>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b17      	cmp	r3, #23
 80011ce:	dd09      	ble.n	80011e4 <decodeGGA+0x284>
	{
		hr=hr-24;
 80011d0:	4b6f      	ldr	r3, [pc, #444]	; (8001390 <decodeGGA+0x430>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	3b18      	subs	r3, #24
 80011d6:	4a6e      	ldr	r2, [pc, #440]	; (8001390 <decodeGGA+0x430>)
 80011d8:	6013      	str	r3, [r2, #0]
		daychange++;
 80011da:	4b6f      	ldr	r3, [pc, #444]	; (8001398 <decodeGGA+0x438>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	4a6d      	ldr	r2, [pc, #436]	; (8001398 <decodeGGA+0x438>)
 80011e2:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80011e4:	4b6a      	ldr	r3, [pc, #424]	; (8001390 <decodeGGA+0x430>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80011ec:	4b69      	ldr	r3, [pc, #420]	; (8001394 <decodeGGA+0x434>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4618      	mov	r0, r3
 80011fa:	f007 f9e3 	bl	80085c4 <atoi>
 80011fe:	4602      	mov	r2, r0
 8001200:	4b62      	ldr	r3, [pc, #392]	; (800138c <decodeGGA+0x42c>)
 8001202:	fb83 1302 	smull	r1, r3, r3, r2
 8001206:	1159      	asrs	r1, r3, #5
 8001208:	17d3      	asrs	r3, r2, #31
 800120a:	1acb      	subs	r3, r1, r3
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001218:	4b59      	ldr	r3, [pc, #356]	; (8001380 <decodeGGA+0x420>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	4a58      	ldr	r2, [pc, #352]	; (8001380 <decodeGGA+0x420>)
 8001220:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	220c      	movs	r2, #12
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f007 ffd9 	bl	80091e2 <memset>
	i=0;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001234:	e013      	b.n	800125e <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8001236:	4b52      	ldr	r3, [pc, #328]	; (8001380 <decodeGGA+0x420>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	7819      	ldrb	r1, [r3, #0]
 8001242:	f107 020c 	add.w	r2, r7, #12
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	4413      	add	r3, r2
 800124a:	460a      	mov	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
		i++;
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	3301      	adds	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001254:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <decodeGGA+0x420>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	4a49      	ldr	r2, [pc, #292]	; (8001380 <decodeGGA+0x420>)
 800125c:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800125e:	4b48      	ldr	r3, [pc, #288]	; (8001380 <decodeGGA+0x420>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b2c      	cmp	r3, #44	; 0x2c
 800126c:	d1e3      	bne.n	8001236 <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	4618      	mov	r0, r3
 8001274:	f7fe ff6c 	bl	8000150 <strlen>
 8001278:	4603      	mov	r3, r0
 800127a:	2b05      	cmp	r3, #5
 800127c:	d801      	bhi.n	8001282 <decodeGGA+0x322>
 800127e:	2302      	movs	r3, #2
 8001280:	e202      	b.n	8001688 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	4618      	mov	r0, r3
 8001288:	f007 f99c 	bl	80085c4 <atoi>
 800128c:	4603      	mov	r3, r0
 800128e:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8001294:	e002      	b.n	800129c <decodeGGA+0x33c>
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	3301      	adds	r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
 800129c:	f107 020c 	add.w	r2, r7, #12
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b2e      	cmp	r3, #46	; 0x2e
 80012a8:	d1f5      	bne.n	8001296 <decodeGGA+0x336>
	j++;
 80012aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ac:	3301      	adds	r3, #1
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7fe ff4b 	bl	8000150 <strlen>
 80012ba:	4602      	mov	r2, r0
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80012c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c4:	f107 020c 	add.w	r2, r7, #12
 80012c8:	4413      	add	r3, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f007 f97a 	bl	80085c4 <atoi>
 80012d0:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80012d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f894 	bl	8000404 <__aeabi_i2d>
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b2e      	ldr	r3, [pc, #184]	; (800139c <decodeGGA+0x43c>)
 80012e2:	f7ff fa23 	bl	800072c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4690      	mov	r8, r2
 80012ec:	4699      	mov	r9, r3
 80012ee:	69f8      	ldr	r0, [r7, #28]
 80012f0:	f7ff f888 	bl	8000404 <__aeabi_i2d>
 80012f4:	4604      	mov	r4, r0
 80012f6:	460d      	mov	r5, r1
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	3302      	adds	r3, #2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f881 	bl	8000404 <__aeabi_i2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	f04f 0000 	mov.w	r0, #0
 800130a:	4925      	ldr	r1, [pc, #148]	; (80013a0 <decodeGGA+0x440>)
 800130c:	f00a f854 	bl	800b3b8 <pow>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7ff fa08 	bl	800072c <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4640      	mov	r0, r8
 8001322:	4649      	mov	r1, r9
 8001324:	f7fe ff22 	bl	800016c <__adddf3>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fbaa 	bl	8000a88 <__aeabi_d2f>
 8001334:	4603      	mov	r3, r0
 8001336:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	601a      	str	r2, [r3, #0]
	inx++;
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <decodeGGA+0x420>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <decodeGGA+0x420>)
 8001346:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001348:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <decodeGGA+0x420>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <decodeGGA+0x420>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <decodeGGA+0x420>)
 8001360:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <decodeGGA+0x420>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	4a05      	ldr	r2, [pc, #20]	; (8001380 <decodeGGA+0x420>)
 800136a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	220c      	movs	r2, #12
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f007 ff34 	bl	80091e2 <memset>
	i=0;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 800137e:	e025      	b.n	80013cc <decodeGGA+0x46c>
 8001380:	20000274 	.word	0x20000274
 8001384:	68db8bad 	.word	0x68db8bad
 8001388:	20000008 	.word	0x20000008
 800138c:	51eb851f 	.word	0x51eb851f
 8001390:	20000278 	.word	0x20000278
 8001394:	2000027c 	.word	0x2000027c
 8001398:	20000280 	.word	0x20000280
 800139c:	40590000 	.word	0x40590000
 80013a0:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 80013a4:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <decodeGGA+0x668>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	7819      	ldrb	r1, [r3, #0]
 80013b0:	f107 020c 	add.w	r2, r7, #12
 80013b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b6:	4413      	add	r3, r2
 80013b8:	460a      	mov	r2, r1
 80013ba:	701a      	strb	r2, [r3, #0]
		i++;
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	3301      	adds	r3, #1
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80013c2:	4b81      	ldr	r3, [pc, #516]	; (80015c8 <decodeGGA+0x668>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	4a7f      	ldr	r2, [pc, #508]	; (80015c8 <decodeGGA+0x668>)
 80013ca:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80013cc:	4b7e      	ldr	r3, [pc, #504]	; (80015c8 <decodeGGA+0x668>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b2c      	cmp	r3, #44	; 0x2c
 80013da:	d1e3      	bne.n	80013a4 <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4618      	mov	r0, r3
 80013e2:	f007 f8ef 	bl	80085c4 <atoi>
 80013e6:	4603      	mov	r3, r0
 80013e8:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80013ee:	e002      	b.n	80013f6 <decodeGGA+0x496>
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	3301      	adds	r3, #1
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f6:	f107 020c 	add.w	r2, r7, #12
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	4413      	add	r3, r2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b2e      	cmp	r3, #46	; 0x2e
 8001402:	d1f5      	bne.n	80013f0 <decodeGGA+0x490>
	j++;
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	3301      	adds	r3, #1
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe fe9e 	bl	8000150 <strlen>
 8001414:	4602      	mov	r2, r0
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	f107 020c 	add.w	r2, r7, #12
 8001422:	4413      	add	r3, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f007 f8cd 	bl	80085c4 <atoi>
 800142a:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 800142c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe ffe7 	bl	8000404 <__aeabi_i2d>
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b64      	ldr	r3, [pc, #400]	; (80015cc <decodeGGA+0x66c>)
 800143c:	f7ff f976 	bl	800072c <__aeabi_ddiv>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4690      	mov	r8, r2
 8001446:	4699      	mov	r9, r3
 8001448:	69f8      	ldr	r0, [r7, #28]
 800144a:	f7fe ffdb 	bl	8000404 <__aeabi_i2d>
 800144e:	4604      	mov	r4, r0
 8001450:	460d      	mov	r5, r1
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	3302      	adds	r3, #2
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe ffd4 	bl	8000404 <__aeabi_i2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	f04f 0000 	mov.w	r0, #0
 8001464:	495a      	ldr	r1, [pc, #360]	; (80015d0 <decodeGGA+0x670>)
 8001466:	f009 ffa7 	bl	800b3b8 <pow>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4620      	mov	r0, r4
 8001470:	4629      	mov	r1, r5
 8001472:	f7ff f95b 	bl	800072c <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4640      	mov	r0, r8
 800147c:	4649      	mov	r1, r9
 800147e:	f7fe fe75 	bl	800016c <__adddf3>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4610      	mov	r0, r2
 8001488:	4619      	mov	r1, r3
 800148a:	f7ff fafd 	bl	8000a88 <__aeabi_d2f>
 800148e:	4603      	mov	r3, r0
 8001490:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	609a      	str	r2, [r3, #8]
	inx++;
 8001498:	4b4b      	ldr	r3, [pc, #300]	; (80015c8 <decodeGGA+0x668>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a4a      	ldr	r2, [pc, #296]	; (80015c8 <decodeGGA+0x668>)
 80014a0:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80014a2:	4b49      	ldr	r3, [pc, #292]	; (80015c8 <decodeGGA+0x668>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80014b2:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <decodeGGA+0x668>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a43      	ldr	r2, [pc, #268]	; (80015c8 <decodeGGA+0x668>)
 80014ba:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80014bc:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <decodeGGA+0x668>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a41      	ldr	r2, [pc, #260]	; (80015c8 <decodeGGA+0x668>)
 80014c4:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80014c6:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <decodeGGA+0x668>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	4a3e      	ldr	r2, [pc, #248]	; (80015c8 <decodeGGA+0x668>)
 80014ce:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80014d0:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <decodeGGA+0x668>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	4a3c      	ldr	r2, [pc, #240]	; (80015c8 <decodeGGA+0x668>)
 80014d8:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	220c      	movs	r2, #12
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f007 fe7d 	bl	80091e2 <memset>
	i=0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80014ec:	e013      	b.n	8001516 <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <decodeGGA+0x668>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	7819      	ldrb	r1, [r3, #0]
 80014fa:	f107 020c 	add.w	r2, r7, #12
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	4413      	add	r3, r2
 8001502:	460a      	mov	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
		i++;
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	3301      	adds	r3, #1
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800150c:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <decodeGGA+0x668>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3301      	adds	r3, #1
 8001512:	4a2d      	ldr	r2, [pc, #180]	; (80015c8 <decodeGGA+0x668>)
 8001514:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 8001516:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <decodeGGA+0x668>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b2c      	cmp	r3, #44	; 0x2c
 8001524:	d1e3      	bne.n	80014ee <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	4618      	mov	r0, r3
 800152c:	f007 f84a 	bl	80085c4 <atoi>
 8001530:	4602      	mov	r2, r0
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <decodeGGA+0x668>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <decodeGGA+0x668>)
 800153e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001540:	e004      	b.n	800154c <decodeGGA+0x5ec>
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <decodeGGA+0x668>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <decodeGGA+0x668>)
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <decodeGGA+0x668>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b2c      	cmp	r3, #44	; 0x2c
 800155a:	d1f2      	bne.n	8001542 <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 800155c:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <decodeGGA+0x668>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <decodeGGA+0x668>)
 8001564:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	220c      	movs	r2, #12
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f007 fe37 	bl	80091e2 <memset>
	i=0;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8001578:	e013      	b.n	80015a2 <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <decodeGGA+0x668>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4413      	add	r3, r2
 8001584:	7819      	ldrb	r1, [r3, #0]
 8001586:	f107 020c 	add.w	r2, r7, #12
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	4413      	add	r3, r2
 800158e:	460a      	mov	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
		i++;
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	3301      	adds	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <decodeGGA+0x668>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <decodeGGA+0x668>)
 80015a0:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <decodeGGA+0x668>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b2c      	cmp	r3, #44	; 0x2c
 80015b0:	d1e3      	bne.n	800157a <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4618      	mov	r0, r3
 80015b8:	f007 f804 	bl	80085c4 <atoi>
 80015bc:	4603      	mov	r3, r0
 80015be:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 80015c4:	e009      	b.n	80015da <decodeGGA+0x67a>
 80015c6:	bf00      	nop
 80015c8:	20000274 	.word	0x20000274
 80015cc:	40590000 	.word	0x40590000
 80015d0:	40240000 	.word	0x40240000
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	3301      	adds	r3, #1
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80015da:	f107 020c 	add.w	r2, r7, #12
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b2e      	cmp	r3, #46	; 0x2e
 80015e6:	d1f5      	bne.n	80015d4 <decodeGGA+0x674>
	j++;
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	3301      	adds	r3, #1
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe fdac 	bl	8000150 <strlen>
 80015f8:	4602      	mov	r2, r0
 80015fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001602:	f107 020c 	add.w	r2, r7, #12
 8001606:	4413      	add	r3, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f006 ffdb 	bl	80085c4 <atoi>
 800160e:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 8001610:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe fef5 	bl	8000404 <__aeabi_i2d>
 800161a:	4604      	mov	r4, r0
 800161c:	460d      	mov	r5, r1
 800161e:	69f8      	ldr	r0, [r7, #28]
 8001620:	f7fe fef0 	bl	8000404 <__aeabi_i2d>
 8001624:	4680      	mov	r8, r0
 8001626:	4689      	mov	r9, r1
 8001628:	6a38      	ldr	r0, [r7, #32]
 800162a:	f7fe feeb 	bl	8000404 <__aeabi_i2d>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	4917      	ldr	r1, [pc, #92]	; (8001694 <decodeGGA+0x734>)
 8001638:	f009 febe 	bl	800b3b8 <pow>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4640      	mov	r0, r8
 8001642:	4649      	mov	r1, r9
 8001644:	f7ff f872 	bl	800072c <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4620      	mov	r0, r4
 800164e:	4629      	mov	r1, r5
 8001650:	f7fe fd8c 	bl	800016c <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff fa14 	bl	8000a88 <__aeabi_d2f>
 8001660:	4603      	mov	r3, r0
 8001662:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	621a      	str	r2, [r3, #32]

	inx++;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <decodeGGA+0x738>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	3301      	adds	r3, #1
 8001670:	4a09      	ldr	r2, [pc, #36]	; (8001698 <decodeGGA+0x738>)
 8001672:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <decodeGGA+0x738>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8001686:	2300      	movs	r3, #0

}
 8001688:	4618      	mov	r0, r3
 800168a:	3730      	adds	r7, #48	; 0x30
 800168c:	46bd      	mov	sp, r7
 800168e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001692:	bf00      	nop
 8001694:	40240000 	.word	0x40240000
 8001698:	20000274 	.word	0x20000274

0800169c <DC_RIGHT_DOWN>:
#define DC_MOTOR_CHANNEL_1  TIM_CHANNEL_1
#define DC_MOTOR_CHANNEL_2  TIM_CHANNEL_4

//Ham cho phep chay thuan cho hai dong co ben trai.

void DC_RIGHT_DOWN(void){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LEFT_CH1_PORT,DC_LEFT_CH1_PIN,GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <DC_RIGHT_DOWN+0x20>)
 80016a8:	f003 f89e 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_LEFT_CH2_PORT,DC_LEFT_CH2_PIN,GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b2:	4802      	ldr	r0, [pc, #8]	; (80016bc <DC_RIGHT_DOWN+0x20>)
 80016b4:	f003 f898 	bl	80047e8 <HAL_GPIO_WritePin>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40010c00 	.word	0x40010c00

080016c0 <DC_RIGHT_UP>:

void DC_RIGHT_UP(void){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_LEFT_CH1_PORT,DC_LEFT_CH1_PIN,GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ca:	4805      	ldr	r0, [pc, #20]	; (80016e0 <DC_RIGHT_UP+0x20>)
 80016cc:	f003 f88c 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_LEFT_CH2_PORT,DC_LEFT_CH2_PIN,GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016d6:	4802      	ldr	r0, [pc, #8]	; (80016e0 <DC_RIGHT_UP+0x20>)
 80016d8:	f003 f886 	bl	80047e8 <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40010c00 	.word	0x40010c00

080016e4 <DC_LEFT_UP>:

void DC_LEFT_UP(void){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(DC_RIGHT_CH1_PORT,DC_RIGHT_CH1_PIN,GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(DC_RIGHT_CH2_PORT,DC_RIGHT_CH2_PIN,GPIO_PIN_SET);
	HAL_GPIO_WritePin(DC_RIGHT_CH1_PORT,DC_RIGHT_CH1_PIN,GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2102      	movs	r1, #2
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <DC_LEFT_UP+0x20>)
 80016ee:	f003 f87b 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_RIGHT_CH2_PORT,DC_RIGHT_CH2_PIN,GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <DC_LEFT_UP+0x20>)
 80016fa:	f003 f875 	bl	80047e8 <HAL_GPIO_WritePin>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40010c00 	.word	0x40010c00

08001708 <DC_LEFT_DOWN>:

void DC_LEFT_DOWN(void){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(DC_RIGHT_CH1_PORT,DC_RIGHT_CH1_PIN,GPIO_PIN_SET);
	//HAL_GPIO_WritePin(DC_RIGHT_CH2_PORT,DC_RIGHT_CH2_PIN,GPIO_PIN_RESET);
	HAL_GPIO_WritePin(DC_RIGHT_CH1_PORT,DC_RIGHT_CH1_PIN,GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2102      	movs	r1, #2
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <DC_LEFT_DOWN+0x20>)
 8001712:	f003 f869 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_RIGHT_CH2_PORT,DC_RIGHT_CH2_PIN,GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <DC_LEFT_DOWN+0x20>)
 800171e:	f003 f863 	bl	80047e8 <HAL_GPIO_WritePin>
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40010c00 	.word	0x40010c00

0800172c <ROBOT_Forward>:

void ROBOT_Forward(void){
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0


	DC_LEFT_DOWN();
 8001730:	f7ff ffea 	bl	8001708 <DC_LEFT_DOWN>
	DC_RIGHT_DOWN();
 8001734:	f7ff ffb2 	bl	800169c <DC_RIGHT_DOWN>

	__HAL_TIM_SET_COMPARE(DC_PWM_1,DC_MOTOR_CHANNEL_1, 50); // PWM1
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <ROBOT_Forward+0x20>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2232      	movs	r2, #50	; 0x32
 800173e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(DC_PWM_2,DC_MOTOR_CHANNEL_2, 50); //PWM2
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <ROBOT_Forward+0x24>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2232      	movs	r2, #50	; 0x32
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000bc8 	.word	0x20000bc8
 8001750:	20000c10 	.word	0x20000c10

08001754 <ROBOT_Backward>:

void ROBOT_Backward(void){
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	DC_LEFT_UP();
 8001758:	f7ff ffc4 	bl	80016e4 <DC_LEFT_UP>
	DC_RIGHT_UP();
 800175c:	f7ff ffb0 	bl	80016c0 <DC_RIGHT_UP>

	__HAL_TIM_SET_COMPARE(DC_PWM_1,DC_MOTOR_CHANNEL_1, 50); // PWM1
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <ROBOT_Backward+0x20>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2232      	movs	r2, #50	; 0x32
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(DC_PWM_2,DC_MOTOR_CHANNEL_2, 50); //PWM2
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <ROBOT_Backward+0x24>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2232      	movs	r2, #50	; 0x32
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000bc8 	.word	0x20000bc8
 8001778:	20000c10 	.word	0x20000c10

0800177c <ROBOT_TurnLeft>:
void ROBOT_TurnLeft(void){
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	DC_LEFT_DOWN();
 8001780:	f7ff ffc2 	bl	8001708 <DC_LEFT_DOWN>
    DC_RIGHT_UP();
 8001784:	f7ff ff9c 	bl	80016c0 <DC_RIGHT_UP>
    __HAL_TIM_SET_COMPARE(DC_PWM_1,DC_MOTOR_CHANNEL_1, 50); // PWM1
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <ROBOT_TurnLeft+0x20>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2232      	movs	r2, #50	; 0x32
 800178e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(DC_PWM_2,DC_MOTOR_CHANNEL_2, 50); //PWM2
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <ROBOT_TurnLeft+0x24>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2232      	movs	r2, #50	; 0x32
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
		// PWM1;
		//PWM2;
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000bc8 	.word	0x20000bc8
 80017a0:	20000c10 	.word	0x20000c10

080017a4 <ROBOT_TurnRight>:
void ROBOT_TurnRight(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	DC_LEFT_UP();
 80017a8:	f7ff ff9c 	bl	80016e4 <DC_LEFT_UP>
	DC_RIGHT_DOWN();
 80017ac:	f7ff ff76 	bl	800169c <DC_RIGHT_DOWN>
	__HAL_TIM_SET_COMPARE(DC_PWM_1,DC_MOTOR_CHANNEL_1, 50); // PWM1
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <ROBOT_TurnRight+0x20>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2232      	movs	r2, #50	; 0x32
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(DC_PWM_2,DC_MOTOR_CHANNEL_2, 50); //PWM2
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <ROBOT_TurnRight+0x24>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2232      	movs	r2, #50	; 0x32
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
	// PWM1;
	//PWM2;
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000bc8 	.word	0x20000bc8
 80017c8:	20000c10 	.word	0x20000c10

080017cc <ROBOT_Stop>:
void ROBOT_Stop(void){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(DC_PWM_1,DC_MOTOR_CHANNEL_1, 0);
 80017d0:	4b10      	ldr	r3, [pc, #64]	; (8001814 <ROBOT_Stop+0x48>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(DC_PWM_2,DC_MOTOR_CHANNEL_2, 0);
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <ROBOT_Stop+0x4c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2200      	movs	r2, #0
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(DC_LEFT_CH1_PORT,DC_LEFT_CH1_PIN,GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e6:	480d      	ldr	r0, [pc, #52]	; (800181c <ROBOT_Stop+0x50>)
 80017e8:	f002 fffe 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_LEFT_CH2_PORT,DC_LEFT_CH2_PIN,GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f2:	480a      	ldr	r0, [pc, #40]	; (800181c <ROBOT_Stop+0x50>)
 80017f4:	f002 fff8 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_RIGHT_CH1_PORT,DC_RIGHT_CH1_PIN,GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2102      	movs	r1, #2
 80017fc:	4807      	ldr	r0, [pc, #28]	; (800181c <ROBOT_Stop+0x50>)
 80017fe:	f002 fff3 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_RIGHT_CH2_PORT,DC_RIGHT_CH2_PIN,GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <ROBOT_Stop+0x50>)
 800180a:	f002 ffed 	bl	80047e8 <HAL_GPIO_WritePin>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000bc8 	.word	0x20000bc8
 8001818:	20000c10 	.word	0x20000c10
 800181c:	40010c00 	.word	0x40010c00

08001820 <CS_Select>:
#define NRF24_CSN_PIN  GPIO_PIN_3


//Cac ham trong thu vien

void CS_Select(void){
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT,NRF24_CSN_PIN,GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	2108      	movs	r1, #8
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <CS_Select+0x14>)
 800182a:	f002 ffdd 	bl	80047e8 <HAL_GPIO_WritePin>
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40010800 	.word	0x40010800

08001838 <CS_UnSelect>:
void CS_UnSelect(void){
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT,NRF24_CSN_PIN,GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	2108      	movs	r1, #8
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <CS_UnSelect+0x14>)
 8001842:	f002 ffd1 	bl	80047e8 <HAL_GPIO_WritePin>
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40010800 	.word	0x40010800

08001850 <CE_Enable>:

void CE_Enable(void){
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT,NRF24_CE_PIN,GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	2104      	movs	r1, #4
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <CE_Enable+0x14>)
 800185a:	f002 ffc5 	bl	80047e8 <HAL_GPIO_WritePin>
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40010800 	.word	0x40010800

08001868 <CE_Disable>:
void CE_Disable(void){
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT,NRF24_CE_PIN,GPIO_PIN_RESET);
 800186c:	2200      	movs	r2, #0
 800186e:	2104      	movs	r1, #4
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <CE_Disable+0x14>)
 8001872:	f002 ffb9 	bl	80047e8 <HAL_GPIO_WritePin>
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40010800 	.word	0x40010800

08001880 <nrf24_WriteReg>:



void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	460a      	mov	r2, r1
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	4613      	mov	r3, r2
 800188e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f043 0320 	orr.w	r3, r3, #32
 8001896:	b2db      	uxtb	r3, r3
 8001898:	733b      	strb	r3, [r7, #12]
	buf[1]= Data;
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	737b      	strb	r3, [r7, #13]

	CS_Select();
 800189e:	f7ff ffbf 	bl	8001820 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf,2,1000);
 80018a2:	f107 010c 	add.w	r1, r7, #12
 80018a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018aa:	2202      	movs	r2, #2
 80018ac:	4804      	ldr	r0, [pc, #16]	; (80018c0 <nrf24_WriteReg+0x40>)
 80018ae:	f004 fef1 	bl	8006694 <HAL_SPI_Transmit>

	CS_UnSelect();
 80018b2:	f7ff ffc1 	bl	8001838 <CS_UnSelect>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000b70 	.word	0x20000b70

080018c4 <nrf24_WriteRegMulti>:

void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *data, int size){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	f043 0320 	orr.w	r3, r3, #32
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	753b      	strb	r3, [r7, #20]
	//buf[1]= Data;

	CS_Select();
 80018dc:	f7ff ffa0 	bl	8001820 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf,1,100);
 80018e0:	f107 0114 	add.w	r1, r7, #20
 80018e4:	2364      	movs	r3, #100	; 0x64
 80018e6:	2201      	movs	r2, #1
 80018e8:	4808      	ldr	r0, [pc, #32]	; (800190c <nrf24_WriteRegMulti+0x48>)
 80018ea:	f004 fed3 	bl	8006694 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data,size,1000);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <nrf24_WriteRegMulti+0x48>)
 80018fa:	f004 fecb 	bl	8006694 <HAL_SPI_Transmit>

	CS_UnSelect();
 80018fe:	f7ff ff9b 	bl	8001838 <CS_UnSelect>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000b70 	.word	0x20000b70

08001910 <nrf24_ReadReg>:

uint8_t nrf24_ReadReg(uint8_t Reg){
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]

	CS_Select();
 800191e:	f7ff ff7f 	bl	8001820 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001922:	1df9      	adds	r1, r7, #7
 8001924:	2364      	movs	r3, #100	; 0x64
 8001926:	2201      	movs	r2, #1
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <nrf24_ReadReg+0x3c>)
 800192a:	f004 feb3 	bl	8006694 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800192e:	f107 010f 	add.w	r1, r7, #15
 8001932:	2364      	movs	r3, #100	; 0x64
 8001934:	2201      	movs	r2, #1
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <nrf24_ReadReg+0x3c>)
 8001938:	f004 ffef 	bl	800691a <HAL_SPI_Receive>

	CS_UnSelect();
 800193c:	f7ff ff7c 	bl	8001838 <CS_UnSelect>
	return data;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000b70 	.word	0x20000b70

08001950 <nrfsendCmd>:

	CS_UnSelect();
}

// Gui ma lenh den nRF24
void nrfsendCmd(uint8_t cmd){
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
	CS_Select();
 800195a:	f7ff ff61 	bl	8001820 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800195e:	1df9      	adds	r1, r7, #7
 8001960:	2364      	movs	r3, #100	; 0x64
 8001962:	2201      	movs	r2, #1
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <nrfsendCmd+0x28>)
 8001966:	f004 fe95 	bl	8006694 <HAL_SPI_Transmit>

	CS_UnSelect();
 800196a:	f7ff ff65 	bl	8001838 <CS_UnSelect>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000b70 	.word	0x20000b70

0800197c <NRF24_Init>:

void NRF24_Init(void){
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	CE_Disable();
 8001980:	f7ff ff72 	bl	8001868 <CE_Disable>


	nrf24_WriteReg(CONFIG, 0);
 8001984:	2100      	movs	r1, #0
 8001986:	2000      	movs	r0, #0
 8001988:	f7ff ff7a 	bl	8001880 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0);   // No Auto ACK
 800198c:	2100      	movs	r1, #0
 800198e:	2001      	movs	r0, #1
 8001990:	f7ff ff76 	bl	8001880 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0);
 8001994:	2100      	movs	r1, #0
 8001996:	2002      	movs	r0, #2
 8001998:	f7ff ff72 	bl	8001880 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0X03);  // 5 bytes for the TX/RX
 800199c:	2103      	movs	r1, #3
 800199e:	2003      	movs	r0, #3
 80019a0:	f7ff ff6e 	bl	8001880 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0);
 80019a4:	2100      	movs	r1, #0
 80019a6:	2004      	movs	r0, #4
 80019a8:	f7ff ff6a 	bl	8001880 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0);
 80019ac:	2100      	movs	r1, #0
 80019ae:	2004      	movs	r0, #4
 80019b0:	f7ff ff66 	bl	8001880 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0);
 80019b4:	2100      	movs	r1, #0
 80019b6:	2005      	movs	r0, #5
 80019b8:	f7ff ff62 	bl	8001880 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0X0E);// POWER = 0dB, data rate = 20Mbps
 80019bc:	210e      	movs	r1, #14
 80019be:	2006      	movs	r0, #6
 80019c0:	f7ff ff5e 	bl	8001880 <nrf24_WriteReg>

	CE_Enable();
 80019c4:	f7ff ff44 	bl	8001850 <CE_Enable>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <NRF24_RxMode>:
		return 1;
	}
	return 0;
}

void NRF24_RxMode(uint8_t *Address, uint8_t channel){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
	CE_Disable();
 80019d8:	f7ff ff46 	bl	8001868 <CE_Disable>

	nrf24_WriteReg(RF_CH, channel);
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	4619      	mov	r1, r3
 80019e0:	2005      	movs	r0, #5
 80019e2:	f7ff ff4d 	bl	8001880 <nrf24_WriteReg>

	// Chon ong du lieu 1
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80019e6:	2002      	movs	r0, #2
 80019e8:	f7ff ff92 	bl	8001910 <nrf24_ReadReg>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<1);
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	f043 0302 	orr.w	r3, r3, #2
 80019f6:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(EN_RXADDR, en_rxaddr);
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	4619      	mov	r1, r3
 80019fc:	2002      	movs	r0, #2
 80019fe:	f7ff ff3f 	bl	8001880 <nrf24_WriteReg>

	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);
 8001a02:	2205      	movs	r2, #5
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	200b      	movs	r0, #11
 8001a08:	f7ff ff5c 	bl	80018c4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P1, 32);  // 32 BYTE.
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	2012      	movs	r0, #18
 8001a10:	f7ff ff36 	bl	8001880 <nrf24_WriteReg>

	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff ff7b 	bl	8001910 <nrf24_ReadReg>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	73bb      	strb	r3, [r7, #14]
	config = config|(1<<1)|(1<<0);
 8001a1e:	7bbb      	ldrb	r3, [r7, #14]
 8001a20:	f043 0303 	orr.w	r3, r3, #3
 8001a24:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg(CONFIG, config);
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff ff28 	bl	8001880 <nrf24_WriteReg>

	CE_Enable();
 8001a30:	f7ff ff0e 	bl	8001850 <CE_Enable>
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <isDataAvailable>:

uint8_t isDataAvailable(int pipenum){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001a44:	2007      	movs	r0, #7
 8001a46:	f7ff ff63 	bl	8001910 <nrf24_ReadReg>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	73fb      	strb	r3, [r7, #15]
	if((status&(1<<6))&&(status&(pipenum<<1))){
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00b      	beq.n	8001a70 <isDataAvailable+0x34>
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <isDataAvailable+0x34>
		nrf24_WriteReg(STATUS, (1<<6));
 8001a64:	2140      	movs	r1, #64	; 0x40
 8001a66:	2007      	movs	r0, #7
 8001a68:	f7ff ff0a 	bl	8001880 <nrf24_WriteReg>
		return 1;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <isDataAvailable+0x36>
	}
	return 0;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <NRF_Receive>:

void NRF_Receive(uint8_t *data){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]
    CS_Select();
 8001a88:	f7ff feca 	bl	8001820 <CS_Select>

	cmdtosend = R_RX_PAYLOAD;
 8001a8c:	2361      	movs	r3, #97	; 0x61
 8001a8e:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001a90:	f107 010f 	add.w	r1, r7, #15
 8001a94:	2364      	movs	r3, #100	; 0x64
 8001a96:	2201      	movs	r2, #1
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <NRF_Receive+0x50>)
 8001a9a:	f004 fdfb 	bl	8006694 <HAL_SPI_Transmit>

	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4809      	ldr	r0, [pc, #36]	; (8001acc <NRF_Receive+0x50>)
 8001aa8:	f004 ff37 	bl	800691a <HAL_SPI_Receive>

	CS_UnSelect();
 8001aac:	f7ff fec4 	bl	8001838 <CS_UnSelect>

	HAL_Delay(1);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f001 fd29 	bl	8003508 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 8001ab6:	23e2      	movs	r3, #226	; 0xe2
 8001ab8:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff47 	bl	8001950 <nrfsendCmd>

}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000b70 	.word	0x20000b70

08001ad0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <Ringbuf_init+0x38>)
 8001ad6:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <Ringbuf_init+0x3c>)
 8001ad8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <Ringbuf_init+0x40>)
 8001adc:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <Ringbuf_init+0x44>)
 8001ade:	601a      	str	r2, [r3, #0]

  // Enable the UART Error Interrupt: (Frame error, noise error, overrun error)
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <Ringbuf_init+0x48>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <Ringbuf_init+0x48>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	615a      	str	r2, [r3, #20]

  // Enable the UART Data Register not empty Interrupt
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <Ringbuf_init+0x48>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <Ringbuf_init+0x48>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0220 	orr.w	r2, r2, #32
 8001afe:	60da      	str	r2, [r3, #12]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	20000698 	.word	0x20000698
 8001b0c:	20000288 	.word	0x20000288
 8001b10:	2000069c 	.word	0x2000069c
 8001b14:	20000490 	.word	0x20000490
 8001b18:	20000c58 	.word	0x20000c58

08001b1c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b34:	60fb      	str	r3, [r7, #12]

  if(i != buffer->tail) {
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d009      	beq.n	8001b56 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	79f9      	ldrb	r1, [r7, #7]
 8001b4c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0

  if(_rx_buffer->head == _rx_buffer->tail)
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <Uart_read+0x54>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <Uart_read+0x54>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d102      	bne.n	8001b80 <Uart_read+0x20>
  {
    return -1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e013      	b.n	8001ba8 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <Uart_read+0x54>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <Uart_read+0x54>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b8c:	5cd3      	ldrb	r3, [r2, r3]
 8001b8e:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <Uart_read+0x54>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <Uart_read+0x54>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ba2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	20000698 	.word	0x20000698

08001bb8 <IsDataAvailable>:
	}
}

// checks if the new data is available in the incoming buffer
int IsDataAvailable(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <IsDataAvailable+0x30>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <IsDataAvailable+0x30>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000698 	.word	0x20000698

08001bec <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <Uart_peek+0x34>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <Uart_peek+0x34>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d102      	bne.n	8001c0a <Uart_peek+0x1e>
  {
    return -1;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
 8001c08:	e006      	b.n	8001c18 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <Uart_peek+0x34>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <Uart_peek+0x34>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000698 	.word	0x20000698

08001c24 <Copy_upto>:

int Copy_upto (char *string, char *buffertocopyinto)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe fa8c 	bl	8000150 <strlen>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001c40:	e01e      	b.n	8001c80 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <Copy_upto+0xf8>)
 8001c44:	6819      	ldr	r1, [r3, #0]
 8001c46:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <Copy_upto+0xf8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	6838      	ldr	r0, [r7, #0]
 8001c52:	4403      	add	r3, r0
 8001c54:	5c8a      	ldrb	r2, [r1, r2]
 8001c56:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <Copy_upto+0xf8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <Copy_upto+0xf8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	3301      	adds	r3, #1
 8001c72:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001c74:	bf00      	nop
 8001c76:	f7ff ff9f 	bl	8001bb8 <IsDataAvailable>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0fa      	beq.n	8001c76 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001c80:	f7ff ffb4 	bl	8001bec <Uart_peek>
 8001c84:	4601      	mov	r1, r0
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4299      	cmp	r1, r3
 8001c90:	d1d7      	bne.n	8001c42 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001c92:	e027      	b.n	8001ce4 <Copy_upto+0xc0>
	{
		so_far++;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001c9a:	f7ff ff61 	bl	8001b60 <Uart_read>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	613a      	str	r2, [r7, #16]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d101      	bne.n	8001cbc <Copy_upto+0x98>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e02a      	b.n	8001d12 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <Copy_upto+0xfc>)
 8001cbe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cc2:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001cc4:	bf00      	nop
 8001cc6:	f7ff ff77 	bl	8001bb8 <IsDataAvailable>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d103      	bne.n	8001cd8 <Copy_upto+0xb4>
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <Copy_upto+0xfc>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f6      	bne.n	8001cc6 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <Copy_upto+0xfc>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <Copy_upto+0xc0>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e016      	b.n	8001d12 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8001ce4:	f7ff ff82 	bl	8001bec <Uart_peek>
 8001ce8:	4601      	mov	r1, r0
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	4299      	cmp	r1, r3
 8001cf4:	d0ce      	beq.n	8001c94 <Copy_upto+0x70>
	}

	if (so_far != len)
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d002      	beq.n	8001d04 <Copy_upto+0xe0>
	{
		so_far = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
		goto again;
 8001d02:	e79d      	b.n	8001c40 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d101      	bne.n	8001d10 <Copy_upto+0xec>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <Copy_upto+0xee>
	else return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000698 	.word	0x20000698
 8001d20:	20000284 	.word	0x20000284

08001d24 <Wait_for>:
	return 1;
}

// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7fe fa0d 	bl	8000150 <strlen>
 8001d36:	4603      	mov	r3, r0
 8001d38:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001d3a:	4b3c      	ldr	r3, [pc, #240]	; (8001e2c <Wait_for+0x108>)
 8001d3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d40:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8001d42:	bf00      	nop
 8001d44:	f7ff ff38 	bl	8001bb8 <IsDataAvailable>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d103      	bne.n	8001d56 <Wait_for+0x32>
 8001d4e:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <Wait_for+0x108>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f6      	bne.n	8001d44 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8001d56:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <Wait_for+0x108>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d119      	bne.n	8001d92 <Wait_for+0x6e>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e060      	b.n	8001e24 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001d62:	4b33      	ldr	r3, [pc, #204]	; (8001e30 <Wait_for+0x10c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d6a:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <Wait_for+0x10c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d00b      	beq.n	8001d8e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <Wait_for+0x10c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <Wait_for+0x10c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001d8c:	e001      	b.n	8001d92 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e048      	b.n	8001e24 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001d92:	f7ff ff2b 	bl	8001bec <Uart_peek>
 8001d96:	4601      	mov	r1, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4299      	cmp	r1, r3
 8001da2:	d1de      	bne.n	8001d62 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001da4:	e027      	b.n	8001df6 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <Wait_for+0x10c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <Wait_for+0x10c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d101      	bne.n	8001dce <Wait_for+0xaa>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e02a      	b.n	8001e24 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <Wait_for+0x108>)
 8001dd0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001dd4:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001dd6:	bf00      	nop
 8001dd8:	f7ff feee 	bl	8001bb8 <IsDataAvailable>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d103      	bne.n	8001dea <Wait_for+0xc6>
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <Wait_for+0x108>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f6      	bne.n	8001dd8 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <Wait_for+0x108>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <Wait_for+0xd2>
 8001df2:	2300      	movs	r3, #0
 8001df4:	e016      	b.n	8001e24 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001df6:	f7ff fef9 	bl	8001bec <Uart_peek>
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4299      	cmp	r1, r3
 8001e06:	d0ce      	beq.n	8001da6 <Wait_for+0x82>
	}

	if (so_far != len)
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d002      	beq.n	8001e16 <Wait_for+0xf2>
	{
		so_far = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
		goto again;
 8001e14:	e791      	b.n	8001d3a <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d101      	bne.n	8001e22 <Wait_for+0xfe>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <Wait_for+0x100>
	else return 0;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20000284 	.word	0x20000284
 8001e30:	20000698 	.word	0x20000698

08001e34 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	613b      	str	r3, [r7, #16]

    // If DR is not empty and the Rx Int is enabled
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d013      	beq.n	8001e7e <Uart_isr+0x4a>
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d00e      	beq.n	8001e7e <Uart_isr+0x4a>
    {

		huart->Instance->SR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <Uart_isr+0xb4>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fe50 	bl	8001b1c <store_char>
        return;
 8001e7c:	e031      	b.n	8001ee2 <Uart_isr+0xae>
    }

    //If interrupt is caused due to Transmit Data Register Empty
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d02c      	beq.n	8001ee2 <Uart_isr+0xae>
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d027      	beq.n	8001ee2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <Uart_isr+0xb8>)
 8001e94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <Uart_isr+0xb8>)
 8001e9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d108      	bne.n	8001eb4 <Uart_isr+0x80>
    	    {

    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eb0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001eb2:	e015      	b.n	8001ee0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <Uart_isr+0xb8>)
 8001eb6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001eba:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <Uart_isr+0xb8>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <Uart_isr+0xb8>)
 8001ec2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <Uart_isr+0xb8>)
 8001ece:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	7bba      	ldrb	r2, [r7, #14]
 8001ede:	605a      	str	r2, [r3, #4]
    	return;
 8001ee0:	bf00      	nop
    }
}
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000698 	.word	0x20000698
 8001eec:	20000490 	.word	0x20000490

08001ef0 <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af04      	add	r7, sp, #16
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
	HAL_I2C_Mem_Write(SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001efa:	230a      	movs	r3, #10
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	2301      	movs	r3, #1
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	1dfb      	adds	r3, r7, #7
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2301      	movs	r3, #1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2178      	movs	r1, #120	; 0x78
 8001f0c:	4803      	ldr	r0, [pc, #12]	; (8001f1c <ssd1306_WriteCommand+0x2c>)
 8001f0e:	f002 fedf 	bl	8004cd0 <HAL_I2C_Mem_Write>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000b1c 	.word	0x20000b1c

08001f20 <ssd1306_Init>:

//
//	Het scherm initialiseren voor gebruik
//
uint8_t ssd1306_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	// Even wachten zodat het scherm zeker opgestart is
	HAL_Delay(100);
 8001f24:	2064      	movs	r0, #100	; 0x64
 8001f26:	f001 faef 	bl	8003508 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8001f2a:	20ae      	movs	r0, #174	; 0xae
 8001f2c:	f7ff ffe0 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001f30:	2020      	movs	r0, #32
 8001f32:	f7ff ffdd 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f36:	2010      	movs	r0, #16
 8001f38:	f7ff ffda 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f3c:	20b0      	movs	r0, #176	; 0xb0
 8001f3e:	f7ff ffd7 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001f42:	20c8      	movs	r0, #200	; 0xc8
 8001f44:	f7ff ffd4 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7ff ffd1 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8001f4e:	2010      	movs	r0, #16
 8001f50:	f7ff ffce 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001f54:	2040      	movs	r0, #64	; 0x40
 8001f56:	f7ff ffcb 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001f5a:	2081      	movs	r0, #129	; 0x81
 8001f5c:	f7ff ffc8 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001f60:	20ff      	movs	r0, #255	; 0xff
 8001f62:	f7ff ffc5 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001f66:	20a1      	movs	r0, #161	; 0xa1
 8001f68:	f7ff ffc2 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001f6c:	20a6      	movs	r0, #166	; 0xa6
 8001f6e:	f7ff ffbf 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001f72:	20a8      	movs	r0, #168	; 0xa8
 8001f74:	f7ff ffbc 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001f78:	203f      	movs	r0, #63	; 0x3f
 8001f7a:	f7ff ffb9 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f7e:	20a4      	movs	r0, #164	; 0xa4
 8001f80:	f7ff ffb6 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001f84:	20d3      	movs	r0, #211	; 0xd3
 8001f86:	f7ff ffb3 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff ffb0 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f90:	20d5      	movs	r0, #213	; 0xd5
 8001f92:	f7ff ffad 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001f96:	20f0      	movs	r0, #240	; 0xf0
 8001f98:	f7ff ffaa 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001f9c:	20d9      	movs	r0, #217	; 0xd9
 8001f9e:	f7ff ffa7 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001fa2:	2022      	movs	r0, #34	; 0x22
 8001fa4:	f7ff ffa4 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001fa8:	20da      	movs	r0, #218	; 0xda
 8001faa:	f7ff ffa1 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8001fae:	2012      	movs	r0, #18
 8001fb0:	f7ff ff9e 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001fb4:	20db      	movs	r0, #219	; 0xdb
 8001fb6:	f7ff ff9b 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001fba:	2020      	movs	r0, #32
 8001fbc:	f7ff ff98 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001fc0:	208d      	movs	r0, #141	; 0x8d
 8001fc2:	f7ff ff95 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001fc6:	2014      	movs	r0, #20
 8001fc8:	f7ff ff92 	bl	8001ef0 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8001fcc:	20af      	movs	r0, #175	; 0xaf
 8001fce:	f7ff ff8f 	bl	8001ef0 <ssd1306_WriteCommand>

	/* Clearen scherm */
	ssd1306_Fill(Black);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f810 	bl	8001ff8 <ssd1306_Fill>

	/* Update screen */
	ssd1306_UpdateScreen();
 8001fd8:	f000 f830 	bl	800203c <ssd1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <ssd1306_Init+0xd4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <ssd1306_Init+0xd4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001fe8:	4b02      	ldr	r3, [pc, #8]	; (8001ff4 <ssd1306_Init+0xd4>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000aa0 	.word	0x20000aa0

08001ff8 <ssd1306_Fill>:
//
//	We zetten de hele buffer op een bepaalde kleur
// 	color 	=> de kleur waarin alles moet
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	e00d      	b.n	8002024 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <ssd1306_Fill+0x1a>
 800200e:	2100      	movs	r1, #0
 8002010:	e000      	b.n	8002014 <ssd1306_Fill+0x1c>
 8002012:	21ff      	movs	r1, #255	; 0xff
 8002014:	4a08      	ldr	r2, [pc, #32]	; (8002038 <ssd1306_Fill+0x40>)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4413      	add	r3, r2
 800201a:	460a      	mov	r2, r1
 800201c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	3301      	adds	r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202a:	d3ed      	bcc.n	8002008 <ssd1306_Fill+0x10>
	}
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	200006a0 	.word	0x200006a0

0800203c <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8002042:	2300      	movs	r3, #0
 8002044:	71fb      	strb	r3, [r7, #7]
 8002046:	e01d      	b.n	8002084 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	3b50      	subs	r3, #80	; 0x50
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff4e 	bl	8001ef0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8002054:	2000      	movs	r0, #0
 8002056:	f7ff ff4b 	bl	8001ef0 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800205a:	2010      	movs	r0, #16
 800205c:	f7ff ff48 	bl	8001ef0 <ssd1306_WriteCommand>

		// We schrijven alles map per map weg
		HAL_I2C_Mem_Write(SSD1306_I2C_PORT,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	01db      	lsls	r3, r3, #7
 8002064:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <ssd1306_UpdateScreen+0x58>)
 8002066:	4413      	add	r3, r2
 8002068:	2264      	movs	r2, #100	; 0x64
 800206a:	9202      	str	r2, [sp, #8]
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	9201      	str	r2, [sp, #4]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	2178      	movs	r1, #120	; 0x78
 8002078:	4807      	ldr	r0, [pc, #28]	; (8002098 <ssd1306_UpdateScreen+0x5c>)
 800207a:	f002 fe29 	bl	8004cd0 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	3301      	adds	r3, #1
 8002082:	71fb      	strb	r3, [r7, #7]
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	2b07      	cmp	r3, #7
 8002088:	d9de      	bls.n	8002048 <ssd1306_UpdateScreen+0xc>
	}
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	200006a0 	.word	0x200006a0
 8002098:	20000b1c 	.word	0x20000b1c

0800209c <ssd1306_DrawPixel>:
//	X => X coordinaat
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	460b      	mov	r3, r1
 80020a8:	71bb      	strb	r3, [r7, #6]
 80020aa:	4613      	mov	r3, r2
 80020ac:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	db48      	blt.n	8002148 <ssd1306_DrawPixel+0xac>
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	2b3f      	cmp	r3, #63	; 0x3f
 80020ba:	d845      	bhi.n	8002148 <ssd1306_DrawPixel+0xac>
		// We gaan niet buiten het scherm schrijven
		return;
	}

	// Kijken of de pixel geinverteerd moet worden
	if (SSD1306.Inverted)
 80020bc:	4b25      	ldr	r3, [pc, #148]	; (8002154 <ssd1306_DrawPixel+0xb8>)
 80020be:	791b      	ldrb	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 80020c4:	797b      	ldrb	r3, [r7, #5]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf0c      	ite	eq
 80020ca:	2301      	moveq	r3, #1
 80020cc:	2300      	movne	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	717b      	strb	r3, [r7, #5]
	}

	// We zetten de juiste kleur voor de pixel
	if (color == White)
 80020d2:	797b      	ldrb	r3, [r7, #5]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d11a      	bne.n	800210e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020d8:	79fa      	ldrb	r2, [r7, #7]
 80020da:	79bb      	ldrb	r3, [r7, #6]
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	b2d8      	uxtb	r0, r3
 80020e0:	4603      	mov	r3, r0
 80020e2:	01db      	lsls	r3, r3, #7
 80020e4:	4413      	add	r3, r2
 80020e6:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <ssd1306_DrawPixel+0xbc>)
 80020e8:	5cd3      	ldrb	r3, [r2, r3]
 80020ea:	b25a      	sxtb	r2, r3
 80020ec:	79bb      	ldrb	r3, [r7, #6]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	b25b      	sxtb	r3, r3
 80020fa:	4313      	orrs	r3, r2
 80020fc:	b259      	sxtb	r1, r3
 80020fe:	79fa      	ldrb	r2, [r7, #7]
 8002100:	4603      	mov	r3, r0
 8002102:	01db      	lsls	r3, r3, #7
 8002104:	4413      	add	r3, r2
 8002106:	b2c9      	uxtb	r1, r1
 8002108:	4a13      	ldr	r2, [pc, #76]	; (8002158 <ssd1306_DrawPixel+0xbc>)
 800210a:	54d1      	strb	r1, [r2, r3]
 800210c:	e01d      	b.n	800214a <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800210e:	79fa      	ldrb	r2, [r7, #7]
 8002110:	79bb      	ldrb	r3, [r7, #6]
 8002112:	08db      	lsrs	r3, r3, #3
 8002114:	b2d8      	uxtb	r0, r3
 8002116:	4603      	mov	r3, r0
 8002118:	01db      	lsls	r3, r3, #7
 800211a:	4413      	add	r3, r2
 800211c:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <ssd1306_DrawPixel+0xbc>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	b25a      	sxtb	r2, r3
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	b25b      	sxtb	r3, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	b25b      	sxtb	r3, r3
 8002134:	4013      	ands	r3, r2
 8002136:	b259      	sxtb	r1, r3
 8002138:	79fa      	ldrb	r2, [r7, #7]
 800213a:	4603      	mov	r3, r0
 800213c:	01db      	lsls	r3, r3, #7
 800213e:	4413      	add	r3, r2
 8002140:	b2c9      	uxtb	r1, r1
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <ssd1306_DrawPixel+0xbc>)
 8002144:	54d1      	strb	r1, [r2, r3]
 8002146:	e000      	b.n	800214a <ssd1306_DrawPixel+0xae>
		return;
 8002148:	bf00      	nop
	}
}
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000aa0 	.word	0x20000aa0
 8002158:	200006a0 	.word	0x200006a0

0800215c <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	4604      	mov	r4, r0
 8002164:	1d38      	adds	r0, r7, #4
 8002166:	e880 0006 	stmia.w	r0, {r1, r2}
 800216a:	461a      	mov	r2, r3
 800216c:	4623      	mov	r3, r4
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	4613      	mov	r3, r2
 8002172:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002174:	4b38      	ldr	r3, [pc, #224]	; (8002258 <ssd1306_WriteChar+0xfc>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	793b      	ldrb	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	2b7f      	cmp	r3, #127	; 0x7f
 8002180:	dc06      	bgt.n	8002190 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8002182:	4b35      	ldr	r3, [pc, #212]	; (8002258 <ssd1306_WriteChar+0xfc>)
 8002184:	885b      	ldrh	r3, [r3, #2]
 8002186:	461a      	mov	r2, r3
 8002188:	797b      	ldrb	r3, [r7, #5]
 800218a:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 800218c:	2b3f      	cmp	r3, #63	; 0x3f
 800218e:	dd01      	ble.n	8002194 <ssd1306_WriteChar+0x38>
	{
		// Er is geen plaats meer
		return 0;
 8002190:	2300      	movs	r3, #0
 8002192:	e05d      	b.n	8002250 <ssd1306_WriteChar+0xf4>
	}

	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	e04c      	b.n	8002234 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	3b20      	subs	r3, #32
 80021a0:	7979      	ldrb	r1, [r7, #5]
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4619      	mov	r1, r3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	440b      	add	r3, r1
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	e034      	b.n	8002224 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d012      	beq.n	80021f0 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80021ca:	4b23      	ldr	r3, [pc, #140]	; (8002258 <ssd1306_WriteChar+0xfc>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	b2d8      	uxtb	r0, r3
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <ssd1306_WriteChar+0xfc>)
 80021da:	885b      	ldrh	r3, [r3, #2]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	7bba      	ldrb	r2, [r7, #14]
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7ff ff57 	bl	800209c <ssd1306_DrawPixel>
 80021ee:	e016      	b.n	800221e <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <ssd1306_WriteChar+0xfc>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	b2d8      	uxtb	r0, r3
 80021fe:	4b16      	ldr	r3, [pc, #88]	; (8002258 <ssd1306_WriteChar+0xfc>)
 8002200:	885b      	ldrh	r3, [r3, #2]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4413      	add	r3, r2
 800220a:	b2d9      	uxtb	r1, r3
 800220c:	7bbb      	ldrb	r3, [r7, #14]
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf0c      	ite	eq
 8002212:	2301      	moveq	r3, #1
 8002214:	2300      	movne	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	f7ff ff3f 	bl	800209c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	3301      	adds	r3, #1
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	793b      	ldrb	r3, [r7, #4]
 8002226:	461a      	mov	r2, r3
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	4293      	cmp	r3, r2
 800222c:	d3c5      	bcc.n	80021ba <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3301      	adds	r3, #1
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	797b      	ldrb	r3, [r7, #5]
 8002236:	461a      	mov	r2, r3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	4293      	cmp	r3, r2
 800223c:	d3ad      	bcc.n	800219a <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <ssd1306_WriteChar+0xfc>)
 8002240:	881a      	ldrh	r2, [r3, #0]
 8002242:	793b      	ldrb	r3, [r7, #4]
 8002244:	b29b      	uxth	r3, r3
 8002246:	4413      	add	r3, r2
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b03      	ldr	r3, [pc, #12]	; (8002258 <ssd1306_WriteChar+0xfc>)
 800224c:	801a      	strh	r2, [r3, #0]

	// We geven het geschreven char terug voor validatie
	return ch;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3724      	adds	r7, #36	; 0x24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd90      	pop	{r4, r7, pc}
 8002258:	20000aa0 	.word	0x20000aa0

0800225c <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	1d38      	adds	r0, r7, #4
 8002266:	e880 0006 	stmia.w	r0, {r1, r2}
 800226a:	70fb      	strb	r3, [r7, #3]
	// We schrijven alle char tot een nulbyte
	while (*str)
 800226c:	e012      	b.n	8002294 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	7818      	ldrb	r0, [r3, #0]
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	1d3a      	adds	r2, r7, #4
 8002276:	ca06      	ldmia	r2, {r1, r2}
 8002278:	f7ff ff70 	bl	800215c <ssd1306_WriteChar>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d002      	beq.n	800228e <ssd1306_WriteString+0x32>
		{
			// Het karakter is niet juist weggeschreven
			return *str;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	e008      	b.n	80022a0 <ssd1306_WriteString+0x44>
		}

		// Volgende char
		str++;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3301      	adds	r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
	while (*str)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1e8      	bne.n	800226e <ssd1306_WriteString+0x12>
	}

	// Alles gelukt, we sturen dus 0 terug
	return *str;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	781b      	ldrb	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <ssd1306_SetCursor>:

//
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	460a      	mov	r2, r1
 80022b2:	71fb      	strb	r3, [r7, #7]
 80022b4:	4613      	mov	r3, r2
 80022b6:	71bb      	strb	r3, [r7, #6]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <ssd1306_SetCursor+0x2c>)
 80022be:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80022c0:	79bb      	ldrb	r3, [r7, #6]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <ssd1306_SetCursor+0x2c>)
 80022c6:	805a      	strh	r2, [r3, #2]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000aa0 	.word	0x20000aa0

080022d8 <SSD1306_DrawBitmap>:
	ssd1306_WriteCommand(0x10);
	ssd1306_WriteCommand(0xAE);
}

void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60ba      	str	r2, [r7, #8]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	81fb      	strh	r3, [r7, #14]
 80022e6:	460b      	mov	r3, r1
 80022e8:	81bb      	strh	r3, [r7, #12]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80022ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022f2:	3307      	adds	r3, #7
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da00      	bge.n	80022fa <SSD1306_DrawBitmap+0x22>
 80022f8:	3307      	adds	r3, #7
 80022fa:	10db      	asrs	r3, r3, #3
 80022fc:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002302:	2300      	movs	r3, #0
 8002304:	82bb      	strh	r3, [r7, #20]
 8002306:	e047      	b.n	8002398 <SSD1306_DrawBitmap+0xc0>
    {
        for(int16_t i=0; i<w; i++)
 8002308:	2300      	movs	r3, #0
 800230a:	827b      	strh	r3, [r7, #18]
 800230c:	e032      	b.n	8002374 <SSD1306_DrawBitmap+0x9c>
        {
            if(i & 7)
 800230e:	8a7b      	ldrh	r3, [r7, #18]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
 800231e:	e012      	b.n	8002346 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002320:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002324:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002328:	fb03 f202 	mul.w	r2, r3, r2
 800232c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002330:	2b00      	cmp	r3, #0
 8002332:	da00      	bge.n	8002336 <SSD1306_DrawBitmap+0x5e>
 8002334:	3307      	adds	r3, #7
 8002336:	10db      	asrs	r3, r3, #3
 8002338:	b21b      	sxth	r3, r3
 800233a:	4413      	add	r3, r2
 800233c:	461a      	mov	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4413      	add	r3, r2
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) ssd1306_DrawPixel(x+i, y, color);//SSD1306_DrawPixel(x+i, y, color);
 8002346:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800234a:	2b00      	cmp	r3, #0
 800234c:	da0c      	bge.n	8002368 <SSD1306_DrawBitmap+0x90>
 800234e:	89fb      	ldrh	r3, [r7, #14]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	8a7b      	ldrh	r3, [r7, #18]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	4413      	add	r3, r2
 8002358:	b2db      	uxtb	r3, r3
 800235a:	89ba      	ldrh	r2, [r7, #12]
 800235c:	b2d1      	uxtb	r1, r2
 800235e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fe9a 	bl	800209c <ssd1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002368:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800236c:	b29b      	uxth	r3, r3
 800236e:	3301      	adds	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	827b      	strh	r3, [r7, #18]
 8002374:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002378:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800237c:	429a      	cmp	r2, r3
 800237e:	dbc6      	blt.n	800230e <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002380:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002384:	b29b      	uxth	r3, r3
 8002386:	3301      	adds	r3, #1
 8002388:	b29b      	uxth	r3, r3
 800238a:	82bb      	strh	r3, [r7, #20]
 800238c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002390:	b29b      	uxth	r3, r3
 8002392:	3301      	adds	r3, #1
 8002394:	b29b      	uxth	r3, r3
 8002396:	81bb      	strh	r3, [r7, #12]
 8002398:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800239c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	dbb1      	blt.n	8002308 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <Menu_Display>:

void Menu_Display(Menu menu)
{
 80023b0:	b084      	sub	sp, #16
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	f107 0c08 	add.w	ip, r7, #8
 80023ba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, 0);
 80023be:	2100      	movs	r1, #0
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff ff71 	bl	80022a8 <ssd1306_SetCursor>
	ssd1306_WriteString(menu.Title, Font_7x10, White);
 80023c6:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <Menu_Display+0x88>)
 80023c8:	2301      	movs	r3, #1
 80023ca:	ca06      	ldmia	r2, {r1, r2}
 80023cc:	f107 0008 	add.w	r0, r7, #8
 80023d0:	f7ff ff44 	bl	800225c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 12);
 80023d4:	210c      	movs	r1, #12
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7ff ff66 	bl	80022a8 <ssd1306_SetCursor>
	ssd1306_WriteString(menu.List1, Font_7x10, White);
 80023dc:	4a16      	ldr	r2, [pc, #88]	; (8002438 <Menu_Display+0x88>)
 80023de:	f107 001a 	add.w	r0, r7, #26
 80023e2:	2301      	movs	r3, #1
 80023e4:	ca06      	ldmia	r2, {r1, r2}
 80023e6:	f7ff ff39 	bl	800225c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 24);
 80023ea:	2118      	movs	r1, #24
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7ff ff5b 	bl	80022a8 <ssd1306_SetCursor>
	ssd1306_WriteString(menu.List2, Font_7x10, White);
 80023f2:	4a11      	ldr	r2, [pc, #68]	; (8002438 <Menu_Display+0x88>)
 80023f4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80023f8:	2301      	movs	r3, #1
 80023fa:	ca06      	ldmia	r2, {r1, r2}
 80023fc:	f7ff ff2e 	bl	800225c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 36);
 8002400:	2124      	movs	r1, #36	; 0x24
 8002402:	2000      	movs	r0, #0
 8002404:	f7ff ff50 	bl	80022a8 <ssd1306_SetCursor>
	ssd1306_WriteString(menu.List3, Font_7x10, White);
 8002408:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <Menu_Display+0x88>)
 800240a:	f107 003e 	add.w	r0, r7, #62	; 0x3e
 800240e:	2301      	movs	r3, #1
 8002410:	ca06      	ldmia	r2, {r1, r2}
 8002412:	f7ff ff23 	bl	800225c <ssd1306_WriteString>
	ssd1306_SetCursor(0, 48);
 8002416:	2130      	movs	r1, #48	; 0x30
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff ff45 	bl	80022a8 <ssd1306_SetCursor>
	ssd1306_WriteString(menu.List4, Font_7x10, White);
 800241e:	4a06      	ldr	r2, [pc, #24]	; (8002438 <Menu_Display+0x88>)
 8002420:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002424:	2301      	movs	r3, #1
 8002426:	ca06      	ldmia	r2, {r1, r2}
 8002428:	f7ff ff18 	bl	800225c <ssd1306_WriteString>
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002434:	b004      	add	sp, #16
 8002436:	4770      	bx	lr
 8002438:	20000000 	.word	0x20000000

0800243c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800243c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243e:	b09b      	sub	sp, #108	; 0x6c
 8002440:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002442:	f000 ffff 	bl	8003444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002446:	f000 fa1d 	bl	8002884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800244a:	f000 fc39 	bl	8002cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 800244e:	f000 fc19 	bl	8002c84 <MX_DMA_Init>
  MX_SPI1_Init();
 8002452:	f000 fadb 	bl	8002a0c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002456:	f000 fbeb 	bl	8002c30 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800245a:	f000 fb0d 	bl	8002a78 <MX_TIM1_Init>
  MX_TIM2_Init();
 800245e:	f000 fb8f 	bl	8002b80 <MX_TIM2_Init>
  MX_I2C1_Init();
 8002462:	f000 faa5 	bl	80029b0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002466:	f000 fa65 	bl	8002934 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  //khoi tao xung PWM cho dong co
 800246a:	2100      	movs	r1, #0
 800246c:	4887      	ldr	r0, [pc, #540]	; (800268c <main+0x250>)
 800246e:	f004 fe65 	bl	800713c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8002472:	210c      	movs	r1, #12
 8002474:	4886      	ldr	r0, [pc, #536]	; (8002690 <main+0x254>)
 8002476:	f004 fe61 	bl	800713c <HAL_TIM_PWM_Start>
  NRF24_Init();                             //khoi tao nRF
 800247a:	f7ff fa7f 	bl	800197c <NRF24_Init>
  NRF24_RxMode(RX_ADD, 10);                 // thiet lap che do nhan
 800247e:	210a      	movs	r1, #10
 8002480:	4884      	ldr	r0, [pc, #528]	; (8002694 <main+0x258>)
 8002482:	f7ff faa3 	bl	80019cc <NRF24_RxMode>
  Ringbuf_init();
 8002486:	f7ff fb23 	bl	8001ad0 <Ringbuf_init>
  CCS811_Init();                            // khoi tao cam bien
 800248a:	f7fe fccb 	bl	8000e24 <CCS811_Init>
  ssd1306_Init();                           // khoi tao man hinh LCD
 800248e:	f7ff fd47 	bl	8001f20 <ssd1306_Init>
// Hien thi mot vai thong so
	HAL_Delay (2000);
 8002492:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002496:	f001 f837 	bl	8003508 <HAL_Delay>
	SSD1306_DrawBitmap(0,0,logo, 128, 64, 1);
 800249a:	2301      	movs	r3, #1
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	2340      	movs	r3, #64	; 0x40
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	4a7c      	ldr	r2, [pc, #496]	; (8002698 <main+0x25c>)
 80024a6:	2100      	movs	r1, #0
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7ff ff15 	bl	80022d8 <SSD1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80024ae:	f7ff fdc5 	bl	800203c <ssd1306_UpdateScreen>
	HAL_Delay (5000);
 80024b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80024b6:	f001 f827 	bl	8003508 <HAL_Delay>
	ssd1306_Fill(Black);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff fd9c 	bl	8001ff8 <ssd1306_Fill>
	Menu_Display(Titlelcd);
 80024c0:	4c76      	ldr	r4, [pc, #472]	; (800269c <main+0x260>)
 80024c2:	4668      	mov	r0, sp
 80024c4:	f104 0310 	add.w	r3, r4, #16
 80024c8:	224a      	movs	r2, #74	; 0x4a
 80024ca:	4619      	mov	r1, r3
 80024cc:	f006 ff17 	bl	80092fe <memcpy>
 80024d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024d4:	f7ff ff6c 	bl	80023b0 <Menu_Display>
	ssd1306_UpdateScreen();
 80024d8:	f7ff fdb0 	bl	800203c <ssd1306_UpdateScreen>
    HAL_Delay(20);
 80024dc:	2014      	movs	r0, #20
 80024de:	f001 f813 	bl	8003508 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Ringbuf_init();
 80024e2:	f7ff faf5 	bl	8001ad0 <Ringbuf_init>
    // XỬ LÝ RF
	if(isDataAvailable(1)==1)
 80024e6:	2001      	movs	r0, #1
 80024e8:	f7ff faa8 	bl	8001a3c <isDataAvailable>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d15b      	bne.n	80025aa <main+0x16e>
	{
		 NRF_Receive(RxData);
 80024f2:	486b      	ldr	r0, [pc, #428]	; (80026a0 <main+0x264>)
 80024f4:	f7ff fac2 	bl	8001a7c <NRF_Receive>
		 if(Rx_Data_Mask[0]!=RxData[0])
 80024f8:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <main+0x268>)
 80024fa:	781a      	ldrb	r2, [r3, #0]
 80024fc:	4b68      	ldr	r3, [pc, #416]	; (80026a0 <main+0x264>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d052      	beq.n	80025aa <main+0x16e>
				{

					Rx_Data_Mask[0]=RxData[0];
 8002504:	4b66      	ldr	r3, [pc, #408]	; (80026a0 <main+0x264>)
 8002506:	781a      	ldrb	r2, [r3, #0]
 8002508:	4b66      	ldr	r3, [pc, #408]	; (80026a4 <main+0x268>)
 800250a:	701a      	strb	r2, [r3, #0]

					switch(Rx_Data_Mask[0])
 800250c:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <main+0x268>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	3b44      	subs	r3, #68	; 0x44
 8002512:	2b11      	cmp	r3, #17
 8002514:	d849      	bhi.n	80025aa <main+0x16e>
 8002516:	a201      	add	r2, pc, #4	; (adr r2, 800251c <main+0xe0>)
 8002518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251c:	08002595 	.word	0x08002595
 8002520:	080025ab 	.word	0x080025ab
 8002524:	080025ab 	.word	0x080025ab
 8002528:	080025ab 	.word	0x080025ab
 800252c:	080025ab 	.word	0x080025ab
 8002530:	080025ab 	.word	0x080025ab
 8002534:	080025ab 	.word	0x080025ab
 8002538:	080025ab 	.word	0x080025ab
 800253c:	08002575 	.word	0x08002575
 8002540:	080025ab 	.word	0x080025ab
 8002544:	080025ab 	.word	0x080025ab
 8002548:	080025ab 	.word	0x080025ab
 800254c:	080025ab 	.word	0x080025ab
 8002550:	080025ab 	.word	0x080025ab
 8002554:	08002565 	.word	0x08002565
 8002558:	080025a5 	.word	0x080025a5
 800255c:	080025ab 	.word	0x080025ab
 8002560:	08002585 	.word	0x08002585
					{
					  case 'R': //HAL_UART_Transmit(&huart1,State_Right,strlen((char*)State_Right),100);
						  	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002568:	484f      	ldr	r0, [pc, #316]	; (80026a8 <main+0x26c>)
 800256a:	f002 f955 	bl	8004818 <HAL_GPIO_TogglePin>
						  	  ROBOT_TurnRight();
 800256e:	f7ff f919 	bl	80017a4 <ROBOT_TurnRight>
						  break;
 8002572:	e01a      	b.n	80025aa <main+0x16e>
					  case 'L': //HAL_UART_Transmit(&huart1,State_Left,strlen((char*)State_Left),100);
								HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002578:	484b      	ldr	r0, [pc, #300]	; (80026a8 <main+0x26c>)
 800257a:	f002 f94d 	bl	8004818 <HAL_GPIO_TogglePin>
								ROBOT_TurnLeft(); break;
 800257e:	f7ff f8fd 	bl	800177c <ROBOT_TurnLeft>
 8002582:	e012      	b.n	80025aa <main+0x16e>
					  case 'U': HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);//HAL_UART_Transmit(&huart1,State_Up,strlen((char*)State_Up),100);
 8002584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002588:	4847      	ldr	r0, [pc, #284]	; (80026a8 <main+0x26c>)
 800258a:	f002 f945 	bl	8004818 <HAL_GPIO_TogglePin>
								ROBOT_Forward();break;
 800258e:	f7ff f8cd 	bl	800172c <ROBOT_Forward>
 8002592:	e00a      	b.n	80025aa <main+0x16e>
					  case 'D': HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);////HAL_UART_Transmit(&huart1,State_Down,strlen((char*)State_Down),100);
 8002594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002598:	4843      	ldr	r0, [pc, #268]	; (80026a8 <main+0x26c>)
 800259a:	f002 f93d 	bl	8004818 <HAL_GPIO_TogglePin>
								ROBOT_Backward();break;
 800259e:	f7ff f8d9 	bl	8001754 <ROBOT_Backward>
 80025a2:	e002      	b.n	80025aa <main+0x16e>
					  case 'S': //HAL_UART_Transmit(&huart1,State_Stop,strlen((char*)State_Stop),100);
								ROBOT_Stop();
 80025a4:	f7ff f912 	bl	80017cc <ROBOT_Stop>
								 break;
 80025a8:	bf00      	nop
				}


	}
	// XỬ LÝ GPS
	 if(Wait_for("GGA")==1)
 80025aa:	4840      	ldr	r0, [pc, #256]	; (80026ac <main+0x270>)
 80025ac:	f7ff fbba 	bl	8001d24 <Wait_for>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d111      	bne.n	80025da <main+0x19e>
	 {
		 Copy_upto("*",GGA);
 80025b6:	493e      	ldr	r1, [pc, #248]	; (80026b0 <main+0x274>)
 80025b8:	483e      	ldr	r0, [pc, #248]	; (80026b4 <main+0x278>)
 80025ba:	f7ff fb33 	bl	8001c24 <Copy_upto>
		 if(decodeGGA(GGA, &gpsData.ggastruct)==0)
 80025be:	493e      	ldr	r1, [pc, #248]	; (80026b8 <main+0x27c>)
 80025c0:	483b      	ldr	r0, [pc, #236]	; (80026b0 <main+0x274>)
 80025c2:	f7fe fccd 	bl	8000f60 <decodeGGA>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <main+0x198>
		 {
			flagGPS = 1;
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <main+0x280>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e002      	b.n	80025da <main+0x19e>
		 }
		 else
		 {
			 flagGPS=0;
 80025d4:	4b39      	ldr	r3, [pc, #228]	; (80026bc <main+0x280>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
		 }
	 }



	  if(CCS811_checkDataReady()==1)   // Kiem tra cam bien sang sang khong
 80025da:	f7fe fc63 	bl	8000ea4 <CCS811_checkDataReady>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d130      	bne.n	8002646 <main+0x20a>
	  {
		  unsigned int x = CCS811_getCO2PPM();    // Doc gia trị cam bien
 80025e4:	f7fe fc77 	bl	8000ed6 <CCS811_getCO2PPM>
 80025e8:	4603      	mov	r3, r0
 80025ea:	617b      	str	r3, [r7, #20]
		  unsigned int z = CCS811_getTVOCPPB();
 80025ec:	f7fe fc89 	bl	8000f02 <CCS811_getTVOCPPB>
 80025f0:	4603      	mov	r3, r0
 80025f2:	613b      	str	r3, [r7, #16]
		  if(y<8)
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <main+0x284>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b07      	cmp	r3, #7
 80025fa:	dc11      	bgt.n	8002620 <main+0x1e4>
		  {
			  Sensor_Val.CO2  += x;
 80025fc:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <main+0x288>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	4413      	add	r3, r2
 8002604:	4a2f      	ldr	r2, [pc, #188]	; (80026c4 <main+0x288>)
 8002606:	6013      	str	r3, [r2, #0]
			  Sensor_Val.TVOC += z;
 8002608:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <main+0x288>)
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	4a2c      	ldr	r2, [pc, #176]	; (80026c4 <main+0x288>)
 8002612:	6053      	str	r3, [r2, #4]
			  y++;
 8002614:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <main+0x284>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <main+0x284>)
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e012      	b.n	8002646 <main+0x20a>
		  }
		  else
		  {

			  SUM_CO2  = Sensor_Val.CO2/8;
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <main+0x288>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	08db      	lsrs	r3, r3, #3
 8002626:	4a28      	ldr	r2, [pc, #160]	; (80026c8 <main+0x28c>)
 8002628:	6013      	str	r3, [r2, #0]
			  SUM_TVOC = Sensor_Val.TVOC/8;
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <main+0x288>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	08db      	lsrs	r3, r3, #3
 8002630:	4a26      	ldr	r2, [pc, #152]	; (80026cc <main+0x290>)
 8002632:	6013      	str	r3, [r2, #0]

			  Sensor_Val.CO2  = 0;
 8002634:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <main+0x288>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
			  Sensor_Val.TVOC = 0;
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <main+0x288>)
 800263c:	2200      	movs	r2, #0
 800263e:	605a      	str	r2, [r3, #4]
			  y=0;
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <main+0x284>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
		  }
	  }
	  CCS811_writeBaseLine(0x447B);
 8002646:	f244 407b 	movw	r0, #17531	; 0x447b
 800264a:	f7fe fc70 	bl	8000f2e <CCS811_writeBaseLine>



	//DO CAM BIEN H2S
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)h2s, 1);
 800264e:	2201      	movs	r2, #1
 8002650:	491f      	ldr	r1, [pc, #124]	; (80026d0 <main+0x294>)
 8002652:	4820      	ldr	r0, [pc, #128]	; (80026d4 <main+0x298>)
 8002654:	f001 f854 	bl	8003700 <HAL_ADC_Start_DMA>
	HAL_Delay(2);
 8002658:	2002      	movs	r0, #2
 800265a:	f000 ff55 	bl	8003508 <HAL_Delay>
	HAL_ADC_Stop_DMA(&hadc1);
 800265e:	481d      	ldr	r0, [pc, #116]	; (80026d4 <main+0x298>)
 8002660:	f001 f92c 	bl	80038bc <HAL_ADC_Stop_DMA>
	uint16_t h2s_tam = h2s[0];
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <main+0x294>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	81fb      	strh	r3, [r7, #14]
	if(dem_h2s<8)
 800266a:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <main+0x29c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b07      	cmp	r3, #7
 8002670:	dc36      	bgt.n	80026e0 <main+0x2a4>
	{
	Data_H2S +=h2s_tam;
 8002672:	89fa      	ldrh	r2, [r7, #14]
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <main+0x2a0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4413      	add	r3, r2
 800267a:	4a18      	ldr	r2, [pc, #96]	; (80026dc <main+0x2a0>)
 800267c:	6013      	str	r3, [r2, #0]
	dem_h2s++;
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <main+0x29c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3301      	adds	r3, #1
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <main+0x29c>)
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e036      	b.n	80026f8 <main+0x2bc>
 800268a:	bf00      	nop
 800268c:	20000bc8 	.word	0x20000bc8
 8002690:	20000c10 	.word	0x20000c10
 8002694:	2000000c 	.word	0x2000000c
 8002698:	0800c9dc 	.word	0x0800c9dc
 800269c:	20000014 	.word	0x20000014
 80026a0:	20000ca0 	.word	0x20000ca0
 80026a4:	20000cc0 	.word	0x20000cc0
 80026a8:	40011000 	.word	0x40011000
 80026ac:	0800c1e8 	.word	0x0800c1e8
 80026b0:	20000e38 	.word	0x20000e38
 80026b4:	0800c1ec 	.word	0x0800c1ec
 80026b8:	20000e9c 	.word	0x20000e9c
 80026bc:	20000ee0 	.word	0x20000ee0
 80026c0:	20000e18 	.word	0x20000e18
 80026c4:	20000f34 	.word	0x20000f34
 80026c8:	20000e2c 	.word	0x20000e2c
 80026cc:	20000e28 	.word	0x20000e28
 80026d0:	20000e30 	.word	0x20000e30
 80026d4:	20000aa8 	.word	0x20000aa8
 80026d8:	20000e20 	.word	0x20000e20
 80026dc:	20000e1c 	.word	0x20000e1c
	}
	else
	{
	H2S_avr  = Data_H2S/8;
 80026e0:	4b52      	ldr	r3, [pc, #328]	; (800282c <main+0x3f0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	08db      	lsrs	r3, r3, #3
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	4b51      	ldr	r3, [pc, #324]	; (8002830 <main+0x3f4>)
 80026ea:	801a      	strh	r2, [r3, #0]
	Data_H2S  = 0;
 80026ec:	4b4f      	ldr	r3, [pc, #316]	; (800282c <main+0x3f0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
	dem_h2s=0;
 80026f2:	4b50      	ldr	r3, [pc, #320]	; (8002834 <main+0x3f8>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
	}

	// TRUYEN DU LIEU CHO ESP32
	sprintf(Data_UART,"{\"C\":%d,\"T\":%d,\"H\":%d,\"N\":%.6f,\"E\":%.6f}\n",SUM_CO2,SUM_TVOC,H2S_avr,gpsData.ggastruct.lcation.latitude,gpsData.ggastruct.lcation.longitude);
 80026f8:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <main+0x3fc>)
 80026fa:	681e      	ldr	r6, [r3, #0]
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <main+0x400>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	4b4b      	ldr	r3, [pc, #300]	; (8002830 <main+0x3f4>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <main+0x404>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fe8b 	bl	8000428 <__aeabi_f2d>
 8002712:	4604      	mov	r4, r0
 8002714:	460d      	mov	r5, r1
 8002716:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <main+0x404>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd fe84 	bl	8000428 <__aeabi_f2d>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002728:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	9200      	str	r2, [sp, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4632      	mov	r2, r6
 8002734:	4943      	ldr	r1, [pc, #268]	; (8002844 <main+0x408>)
 8002736:	4844      	ldr	r0, [pc, #272]	; (8002848 <main+0x40c>)
 8002738:	f006 fcf0 	bl	800911c <siprintf>
	HAL_UART_Transmit(&huart1, Data_UART, strlen((char *)Data_UART), 1000);
 800273c:	4842      	ldr	r0, [pc, #264]	; (8002848 <main+0x40c>)
 800273e:	f7fd fd07 	bl	8000150 <strlen>
 8002742:	4603      	mov	r3, r0
 8002744:	b29a      	uxth	r2, r3
 8002746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274a:	493f      	ldr	r1, [pc, #252]	; (8002848 <main+0x40c>)
 800274c:	483f      	ldr	r0, [pc, #252]	; (800284c <main+0x410>)
 800274e:	f005 f966 	bl	8007a1e <HAL_UART_Transmit>

	// XUAT MAN HINH HIEN THI LCD


	if(flagGPS==1)
 8002752:	4b3f      	ldr	r3, [pc, #252]	; (8002850 <main+0x414>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d127      	bne.n	80027aa <main+0x36e>
	 {
		sprintf(LCD_Buffer1,"%.4f%c,%.4f%c  ",gpsData.ggastruct.lcation.latitude,gpsData.ggastruct.lcation.NS,gpsData.ggastruct.lcation.longitude,gpsData.ggastruct.lcation.EW);
 800275a:	4b39      	ldr	r3, [pc, #228]	; (8002840 <main+0x404>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fe62 	bl	8000428 <__aeabi_f2d>
 8002764:	4604      	mov	r4, r0
 8002766:	460d      	mov	r5, r1
 8002768:	4b35      	ldr	r3, [pc, #212]	; (8002840 <main+0x404>)
 800276a:	791b      	ldrb	r3, [r3, #4]
 800276c:	461e      	mov	r6, r3
 800276e:	4b34      	ldr	r3, [pc, #208]	; (8002840 <main+0x404>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd fe58 	bl	8000428 <__aeabi_f2d>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4930      	ldr	r1, [pc, #192]	; (8002840 <main+0x404>)
 800277e:	7b09      	ldrb	r1, [r1, #12]
 8002780:	9104      	str	r1, [sp, #16]
 8002782:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002786:	9600      	str	r6, [sp, #0]
 8002788:	4622      	mov	r2, r4
 800278a:	462b      	mov	r3, r5
 800278c:	4931      	ldr	r1, [pc, #196]	; (8002854 <main+0x418>)
 800278e:	4832      	ldr	r0, [pc, #200]	; (8002858 <main+0x41c>)
 8002790:	f006 fcc4 	bl	800911c <siprintf>
		//sprintf(LCD_Buffer1,"%.4fN,%.4fE  ",convert_latitude,convert_longitude);
		ssd1306_SetCursor(0, 48);
 8002794:	2130      	movs	r1, #48	; 0x30
 8002796:	2000      	movs	r0, #0
 8002798:	f7ff fd86 	bl	80022a8 <ssd1306_SetCursor>
		ssd1306_WriteString(LCD_Buffer1, Font_7x10, White);
 800279c:	4a2f      	ldr	r2, [pc, #188]	; (800285c <main+0x420>)
 800279e:	2301      	movs	r3, #1
 80027a0:	ca06      	ldmia	r2, {r1, r2}
 80027a2:	482d      	ldr	r0, [pc, #180]	; (8002858 <main+0x41c>)
 80027a4:	f7ff fd5a 	bl	800225c <ssd1306_WriteString>
 80027a8:	e009      	b.n	80027be <main+0x382>
		//ssd1306_UpdateScreen();
	 }
	 else
	 {
		 ssd1306_SetCursor(0, 48);
 80027aa:	2130      	movs	r1, #48	; 0x30
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7ff fd7b 	bl	80022a8 <ssd1306_SetCursor>
		 ssd1306_WriteString("    GPS  Error      ",Font_7x10 , White);
 80027b2:	4a2a      	ldr	r2, [pc, #168]	; (800285c <main+0x420>)
 80027b4:	2301      	movs	r3, #1
 80027b6:	ca06      	ldmia	r2, {r1, r2}
 80027b8:	4829      	ldr	r0, [pc, #164]	; (8002860 <main+0x424>)
 80027ba:	f7ff fd4f 	bl	800225c <ssd1306_WriteString>
	 }
	// Hien thi thong so ra LCD
	sprintf(LCD_Buffer2, "%d  ", H2S_avr);
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <main+0x3f4>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	4927      	ldr	r1, [pc, #156]	; (8002864 <main+0x428>)
 80027c6:	4828      	ldr	r0, [pc, #160]	; (8002868 <main+0x42c>)
 80027c8:	f006 fca8 	bl	800911c <siprintf>
	ssd1306_SetCursor(55, 36);
 80027cc:	2124      	movs	r1, #36	; 0x24
 80027ce:	2037      	movs	r0, #55	; 0x37
 80027d0:	f7ff fd6a 	bl	80022a8 <ssd1306_SetCursor>
	ssd1306_WriteString(LCD_Buffer2, Font_7x10, White);
 80027d4:	4a21      	ldr	r2, [pc, #132]	; (800285c <main+0x420>)
 80027d6:	2301      	movs	r3, #1
 80027d8:	ca06      	ldmia	r2, {r1, r2}
 80027da:	4823      	ldr	r0, [pc, #140]	; (8002868 <main+0x42c>)
 80027dc:	f7ff fd3e 	bl	800225c <ssd1306_WriteString>
	//
	sprintf(target1, "%d%s  ", SUM_CO2,"ppm  "); //Sum_CO2
 80027e0:	4b15      	ldr	r3, [pc, #84]	; (8002838 <main+0x3fc>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b21      	ldr	r3, [pc, #132]	; (800286c <main+0x430>)
 80027e6:	4922      	ldr	r1, [pc, #136]	; (8002870 <main+0x434>)
 80027e8:	4822      	ldr	r0, [pc, #136]	; (8002874 <main+0x438>)
 80027ea:	f006 fc97 	bl	800911c <siprintf>
	sprintf(target2, "%d%s    ", SUM_TVOC,"ppb  ");
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <main+0x400>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4b21      	ldr	r3, [pc, #132]	; (8002878 <main+0x43c>)
 80027f4:	4921      	ldr	r1, [pc, #132]	; (800287c <main+0x440>)
 80027f6:	4822      	ldr	r0, [pc, #136]	; (8002880 <main+0x444>)
 80027f8:	f006 fc90 	bl	800911c <siprintf>
	ssd1306_SetCursor(55, 12);
 80027fc:	210c      	movs	r1, #12
 80027fe:	2037      	movs	r0, #55	; 0x37
 8002800:	f7ff fd52 	bl	80022a8 <ssd1306_SetCursor>
	ssd1306_WriteString(target1,Font_7x10 , White);
 8002804:	4a15      	ldr	r2, [pc, #84]	; (800285c <main+0x420>)
 8002806:	2301      	movs	r3, #1
 8002808:	ca06      	ldmia	r2, {r1, r2}
 800280a:	481a      	ldr	r0, [pc, #104]	; (8002874 <main+0x438>)
 800280c:	f7ff fd26 	bl	800225c <ssd1306_WriteString>
	ssd1306_SetCursor(55, 24);
 8002810:	2118      	movs	r1, #24
 8002812:	2037      	movs	r0, #55	; 0x37
 8002814:	f7ff fd48 	bl	80022a8 <ssd1306_SetCursor>
	ssd1306_WriteString(target2,Font_7x10 , White);
 8002818:	4a10      	ldr	r2, [pc, #64]	; (800285c <main+0x420>)
 800281a:	2301      	movs	r3, #1
 800281c:	ca06      	ldmia	r2, {r1, r2}
 800281e:	4818      	ldr	r0, [pc, #96]	; (8002880 <main+0x444>)
 8002820:	f7ff fd1c 	bl	800225c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002824:	f7ff fc0a 	bl	800203c <ssd1306_UpdateScreen>
  {
 8002828:	e65b      	b.n	80024e2 <main+0xa6>
 800282a:	bf00      	nop
 800282c:	20000e1c 	.word	0x20000e1c
 8002830:	20000e24 	.word	0x20000e24
 8002834:	20000e20 	.word	0x20000e20
 8002838:	20000e2c 	.word	0x20000e2c
 800283c:	20000e28 	.word	0x20000e28
 8002840:	20000e9c 	.word	0x20000e9c
 8002844:	0800c1f0 	.word	0x0800c1f0
 8002848:	20000ce0 	.word	0x20000ce0
 800284c:	20000c58 	.word	0x20000c58
 8002850:	20000ee0 	.word	0x20000ee0
 8002854:	0800c21c 	.word	0x0800c21c
 8002858:	20000ee4 	.word	0x20000ee4
 800285c:	20000000 	.word	0x20000000
 8002860:	0800c22c 	.word	0x0800c22c
 8002864:	0800c244 	.word	0x0800c244
 8002868:	20000f0c 	.word	0x20000f0c
 800286c:	0800c24c 	.word	0x0800c24c
 8002870:	0800c254 	.word	0x0800c254
 8002874:	20000d78 	.word	0x20000d78
 8002878:	0800c25c 	.word	0x0800c25c
 800287c:	0800c264 	.word	0x0800c264
 8002880:	20000dc8 	.word	0x20000dc8

08002884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b094      	sub	sp, #80	; 0x50
 8002888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800288e:	2228      	movs	r2, #40	; 0x28
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f006 fca5 	bl	80091e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028b4:	2301      	movs	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80028be:	2300      	movs	r3, #0
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c2:	2301      	movs	r3, #1
 80028c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c6:	2302      	movs	r3, #2
 80028c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80028d0:	2300      	movs	r3, #0
 80028d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 f991 	bl	8005c00 <HAL_RCC_OscConfig>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80028e4:	f000 fa70 	bl	8002dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028e8:	230f      	movs	r3, #15
 80028ea:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ec:	2302      	movs	r3, #2
 80028ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f003 fbfe 	bl	8006104 <HAL_RCC_ClockConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800290e:	f000 fa5b 	bl	8002dc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002912:	2302      	movs	r3, #2
 8002914:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	4618      	mov	r0, r3
 800291e:	f003 fd7f 	bl	8006420 <HAL_RCCEx_PeriphCLKConfig>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002928:	f000 fa4e 	bl	8002dc8 <Error_Handler>
  }
}
 800292c:	bf00      	nop
 800292e:	3750      	adds	r7, #80	; 0x50
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002944:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <MX_ADC1_Init+0x74>)
 8002946:	4a19      	ldr	r2, [pc, #100]	; (80029ac <MX_ADC1_Init+0x78>)
 8002948:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <MX_ADC1_Init+0x74>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002950:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <MX_ADC1_Init+0x74>)
 8002952:	2200      	movs	r2, #0
 8002954:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <MX_ADC1_Init+0x74>)
 8002958:	2200      	movs	r2, #0
 800295a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <MX_ADC1_Init+0x74>)
 800295e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002962:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002964:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <MX_ADC1_Init+0x74>)
 8002966:	2200      	movs	r2, #0
 8002968:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800296a:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <MX_ADC1_Init+0x74>)
 800296c:	2201      	movs	r2, #1
 800296e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <MX_ADC1_Init+0x74>)
 8002972:	f000 fded 	bl	8003550 <HAL_ADC_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800297c:	f000 fa24 	bl	8002dc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002984:	2301      	movs	r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8002988:	2301      	movs	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <MX_ADC1_Init+0x74>)
 8002992:	f000 fffb 	bl	800398c <HAL_ADC_ConfigChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800299c:	f000 fa14 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000aa8 	.word	0x20000aa8
 80029ac:	40012400 	.word	0x40012400

080029b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <MX_I2C1_Init+0x54>)
 80029b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <MX_I2C1_Init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029ec:	4804      	ldr	r0, [pc, #16]	; (8002a00 <MX_I2C1_Init+0x50>)
 80029ee:	f001 ff2d 	bl	800484c <HAL_I2C_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029f8:	f000 f9e6 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000b1c 	.word	0x20000b1c
 8002a04:	40005400 	.word	0x40005400
 8002a08:	000186a0 	.word	0x000186a0

08002a0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a10:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a40:	2208      	movs	r2, #8
 8002a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a58:	220a      	movs	r2, #10
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a5c:	4804      	ldr	r0, [pc, #16]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a5e:	f003 fd95 	bl	800658c <HAL_SPI_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a68:	f000 f9ae 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000b70 	.word	0x20000b70
 8002a74:	40013000 	.word	0x40013000

08002a78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b092      	sub	sp, #72	; 0x48
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
 8002a98:	615a      	str	r2, [r3, #20]
 8002a9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a9c:	1d3b      	adds	r3, r7, #4
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f006 fb9d 	bl	80091e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002aa8:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002aaa:	4a34      	ldr	r2, [pc, #208]	; (8002b7c <MX_TIM1_Init+0x104>)
 8002aac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000;
 8002aae:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002ab0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ab4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab6:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8002abc:	4b2e      	ldr	r3, [pc, #184]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002abe:	2263      	movs	r2, #99	; 0x63
 8002ac0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002ad4:	4828      	ldr	r0, [pc, #160]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002ad6:	f004 fae1 	bl	800709c <HAL_TIM_PWM_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002ae0:	f000 f972 	bl	8002dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002aec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002af0:	4619      	mov	r1, r3
 8002af2:	4821      	ldr	r0, [pc, #132]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002af4:	f004 fe94 	bl	8007820 <HAL_TIMEx_MasterConfigSynchronization>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002afe:	f000 f963 	bl	8002dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b02:	2360      	movs	r3, #96	; 0x60
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25;
 8002b06:	2319      	movs	r3, #25
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b22:	2200      	movs	r2, #0
 8002b24:	4619      	mov	r1, r3
 8002b26:	4814      	ldr	r0, [pc, #80]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002b28:	f004 fbaa 	bl	8007280 <HAL_TIM_PWM_ConfigChannel>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002b32:	f000 f949 	bl	8002dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	4807      	ldr	r0, [pc, #28]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002b5a:	f004 febf 	bl	80078dc <HAL_TIMEx_ConfigBreakDeadTime>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002b64:	f000 f930 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b68:	4803      	ldr	r0, [pc, #12]	; (8002b78 <MX_TIM1_Init+0x100>)
 8002b6a:	f000 fa85 	bl	8003078 <HAL_TIM_MspPostInit>

}
 8002b6e:	bf00      	nop
 8002b70:	3748      	adds	r7, #72	; 0x48
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000bc8 	.word	0x20000bc8
 8002b7c:	40012c00 	.word	0x40012c00

08002b80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b86:	f107 0320 	add.w	r3, r7, #32
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	611a      	str	r2, [r3, #16]
 8002b9e:	615a      	str	r2, [r3, #20]
 8002ba0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ba2:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <MX_TIM2_Init+0xac>)
 8002ba4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ba8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000;
 8002baa:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <MX_TIM2_Init+0xac>)
 8002bac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002bb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <MX_TIM2_Init+0xac>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <MX_TIM2_Init+0xac>)
 8002bba:	2263      	movs	r2, #99	; 0x63
 8002bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <MX_TIM2_Init+0xac>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <MX_TIM2_Init+0xac>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002bca:	4818      	ldr	r0, [pc, #96]	; (8002c2c <MX_TIM2_Init+0xac>)
 8002bcc:	f004 fa66 	bl	800709c <HAL_TIM_PWM_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002bd6:	f000 f8f7 	bl	8002dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002be2:	f107 0320 	add.w	r3, r7, #32
 8002be6:	4619      	mov	r1, r3
 8002be8:	4810      	ldr	r0, [pc, #64]	; (8002c2c <MX_TIM2_Init+0xac>)
 8002bea:	f004 fe19 	bl	8007820 <HAL_TIMEx_MasterConfigSynchronization>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002bf4:	f000 f8e8 	bl	8002dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf8:	2360      	movs	r3, #96	; 0x60
 8002bfa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25;
 8002bfc:	2319      	movs	r3, #25
 8002bfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c08:	1d3b      	adds	r3, r7, #4
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4807      	ldr	r0, [pc, #28]	; (8002c2c <MX_TIM2_Init+0xac>)
 8002c10:	f004 fb36 	bl	8007280 <HAL_TIM_PWM_ConfigChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002c1a:	f000 f8d5 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c1e:	4803      	ldr	r0, [pc, #12]	; (8002c2c <MX_TIM2_Init+0xac>)
 8002c20:	f000 fa2a 	bl	8003078 <HAL_TIM_MspPostInit>

}
 8002c24:	bf00      	nop
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000c10 	.word	0x20000c10

08002c30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <MX_USART1_UART_Init+0x4c>)
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <MX_USART1_UART_Init+0x50>)
 8002c38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <MX_USART1_UART_Init+0x4c>)
 8002c3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002c40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <MX_USART1_UART_Init+0x4c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <MX_USART1_UART_Init+0x4c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <MX_USART1_UART_Init+0x4c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <MX_USART1_UART_Init+0x4c>)
 8002c56:	220c      	movs	r2, #12
 8002c58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c5a:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <MX_USART1_UART_Init+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <MX_USART1_UART_Init+0x4c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c66:	4805      	ldr	r0, [pc, #20]	; (8002c7c <MX_USART1_UART_Init+0x4c>)
 8002c68:	f004 fe89 	bl	800797e <HAL_UART_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c72:	f000 f8a9 	bl	8002dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000c58 	.word	0x20000c58
 8002c80:	40013800 	.word	0x40013800

08002c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <MX_DMA_Init+0x38>)
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <MX_DMA_Init+0x38>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6153      	str	r3, [r2, #20]
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <MX_DMA_Init+0x38>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	200b      	movs	r0, #11
 8002ca8:	f001 f941 	bl	8003f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002cac:	200b      	movs	r0, #11
 8002cae:	f001 f95a 	bl	8003f66 <HAL_NVIC_EnableIRQ>

}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc6:	f107 0310 	add.w	r3, r7, #16
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd4:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	4a37      	ldr	r2, [pc, #220]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002cda:	f043 0310 	orr.w	r3, r3, #16
 8002cde:	6193      	str	r3, [r2, #24]
 8002ce0:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cec:	4b32      	ldr	r3, [pc, #200]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	4a31      	ldr	r2, [pc, #196]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002cf2:	f043 0320 	orr.w	r3, r3, #32
 8002cf6:	6193      	str	r3, [r2, #24]
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	4b2c      	ldr	r3, [pc, #176]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4a2b      	ldr	r2, [pc, #172]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	6193      	str	r3, [r2, #24]
 8002d10:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1c:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4a25      	ldr	r2, [pc, #148]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002d22:	f043 0308 	orr.w	r3, r3, #8
 8002d26:	6193      	str	r3, [r2, #24]
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <MX_GPIO_Init+0xf8>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	603b      	str	r3, [r7, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002d34:	2200      	movs	r2, #0
 8002d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d3a:	4820      	ldr	r0, [pc, #128]	; (8002dbc <MX_GPIO_Init+0xfc>)
 8002d3c:	f001 fd54 	bl	80047e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002d40:	2200      	movs	r2, #0
 8002d42:	210c      	movs	r1, #12
 8002d44:	481e      	ldr	r0, [pc, #120]	; (8002dc0 <MX_GPIO_Init+0x100>)
 8002d46:	f001 fd4f 	bl	80047e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f243 4102 	movw	r1, #13314	; 0x3402
 8002d50:	481c      	ldr	r0, [pc, #112]	; (8002dc4 <MX_GPIO_Init+0x104>)
 8002d52:	f001 fd49 	bl	80047e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d64:	2303      	movs	r3, #3
 8002d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d68:	f107 0310 	add.w	r3, r7, #16
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4813      	ldr	r0, [pc, #76]	; (8002dbc <MX_GPIO_Init+0xfc>)
 8002d70:	f001 fbb6 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d74:	230c      	movs	r3, #12
 8002d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <MX_GPIO_Init+0x100>)
 8002d8c:	f001 fba8 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13;
 8002d90:	f243 4302 	movw	r3, #13314	; 0x3402
 8002d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d96:	2301      	movs	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da2:	f107 0310 	add.w	r3, r7, #16
 8002da6:	4619      	mov	r1, r3
 8002da8:	4806      	ldr	r0, [pc, #24]	; (8002dc4 <MX_GPIO_Init+0x104>)
 8002daa:	f001 fb99 	bl	80044e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dae:	bf00      	nop
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	40011000 	.word	0x40011000
 8002dc0:	40010800 	.word	0x40010800
 8002dc4:	40010c00 	.word	0x40010c00

08002dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dcc:	b672      	cpsid	i
}
 8002dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <Error_Handler+0x8>
	...

08002dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_MspInit+0x5c>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <HAL_MspInit+0x5c>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6193      	str	r3, [r2, #24]
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_MspInit+0x5c>)
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_MspInit+0x5c>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4a0e      	ldr	r2, [pc, #56]	; (8002e30 <HAL_MspInit+0x5c>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	61d3      	str	r3, [r2, #28]
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <HAL_MspInit+0x5c>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_MspInit+0x60>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <HAL_MspInit+0x60>)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40010000 	.word	0x40010000

08002e38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	605a      	str	r2, [r3, #4]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <HAL_ADC_MspInit+0xbc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d149      	bne.n	8002eec <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e58:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <HAL_ADC_MspInit+0xc0>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <HAL_ADC_MspInit+0xc0>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	6193      	str	r3, [r2, #24]
 8002e64:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_ADC_MspInit+0xc0>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <HAL_ADC_MspInit+0xc0>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <HAL_ADC_MspInit+0xc0>)
 8002e76:	f043 0304 	orr.w	r3, r3, #4
 8002e7a:	6193      	str	r3, [r2, #24]
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_ADC_MspInit+0xc0>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 0310 	add.w	r3, r7, #16
 8002e94:	4619      	mov	r1, r3
 8002e96:	4819      	ldr	r0, [pc, #100]	; (8002efc <HAL_ADC_MspInit+0xc4>)
 8002e98:	f001 fb22 	bl	80044e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_ADC_MspInit+0xc8>)
 8002e9e:	4a19      	ldr	r2, [pc, #100]	; (8002f04 <HAL_ADC_MspInit+0xcc>)
 8002ea0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <HAL_ADC_MspInit+0xc8>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_ADC_MspInit+0xc8>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_ADC_MspInit+0xc8>)
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <HAL_ADC_MspInit+0xc8>)
 8002eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ebc:	4b10      	ldr	r3, [pc, #64]	; (8002f00 <HAL_ADC_MspInit+0xc8>)
 8002ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <HAL_ADC_MspInit+0xc8>)
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <HAL_ADC_MspInit+0xc8>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ed0:	480b      	ldr	r0, [pc, #44]	; (8002f00 <HAL_ADC_MspInit+0xc8>)
 8002ed2:	f001 f863 	bl	8003f9c <HAL_DMA_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002edc:	f7ff ff74 	bl	8002dc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a07      	ldr	r2, [pc, #28]	; (8002f00 <HAL_ADC_MspInit+0xc8>)
 8002ee4:	621a      	str	r2, [r3, #32]
 8002ee6:	4a06      	ldr	r2, [pc, #24]	; (8002f00 <HAL_ADC_MspInit+0xc8>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002eec:	bf00      	nop
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40012400 	.word	0x40012400
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010800 	.word	0x40010800
 8002f00:	20000ad8 	.word	0x20000ad8
 8002f04:	40020008 	.word	0x40020008

08002f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f107 0310 	add.w	r3, r7, #16
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <HAL_I2C_MspInit+0x70>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d123      	bne.n	8002f70 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <HAL_I2C_MspInit+0x74>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <HAL_I2C_MspInit+0x74>)
 8002f2e:	f043 0308 	orr.w	r3, r3, #8
 8002f32:	6193      	str	r3, [r2, #24]
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_I2C_MspInit+0x74>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f40:	23c0      	movs	r3, #192	; 0xc0
 8002f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f44:	2312      	movs	r3, #18
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	4619      	mov	r1, r3
 8002f52:	480b      	ldr	r0, [pc, #44]	; (8002f80 <HAL_I2C_MspInit+0x78>)
 8002f54:	f001 fac4 	bl	80044e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_I2C_MspInit+0x74>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_I2C_MspInit+0x74>)
 8002f5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f62:	61d3      	str	r3, [r2, #28]
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_I2C_MspInit+0x74>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f70:	bf00      	nop
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40005400 	.word	0x40005400
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40010c00 	.word	0x40010c00

08002f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1b      	ldr	r2, [pc, #108]	; (800300c <HAL_SPI_MspInit+0x88>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d12f      	bne.n	8003004 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_SPI_MspInit+0x8c>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_SPI_MspInit+0x8c>)
 8002faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fae:	6193      	str	r3, [r2, #24]
 8002fb0:	4b17      	ldr	r3, [pc, #92]	; (8003010 <HAL_SPI_MspInit+0x8c>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <HAL_SPI_MspInit+0x8c>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <HAL_SPI_MspInit+0x8c>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6193      	str	r3, [r2, #24]
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <HAL_SPI_MspInit+0x8c>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002fd4:	23a0      	movs	r3, #160	; 0xa0
 8002fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd8:	2302      	movs	r3, #2
 8002fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe0:	f107 0310 	add.w	r3, r7, #16
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	480b      	ldr	r0, [pc, #44]	; (8003014 <HAL_SPI_MspInit+0x90>)
 8002fe8:	f001 fa7a 	bl	80044e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fec:	2340      	movs	r3, #64	; 0x40
 8002fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff8:	f107 0310 	add.w	r3, r7, #16
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4805      	ldr	r0, [pc, #20]	; (8003014 <HAL_SPI_MspInit+0x90>)
 8003000:	f001 fa6e 	bl	80044e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003004:	bf00      	nop
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40013000 	.word	0x40013000
 8003010:	40021000 	.word	0x40021000
 8003014:	40010800 	.word	0x40010800

08003018 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a12      	ldr	r2, [pc, #72]	; (8003070 <HAL_TIM_PWM_MspInit+0x58>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10c      	bne.n	8003044 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_TIM_PWM_MspInit+0x5c>)
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	4a11      	ldr	r2, [pc, #68]	; (8003074 <HAL_TIM_PWM_MspInit+0x5c>)
 8003030:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003034:	6193      	str	r3, [r2, #24]
 8003036:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <HAL_TIM_PWM_MspInit+0x5c>)
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003042:	e010      	b.n	8003066 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304c:	d10b      	bne.n	8003066 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800304e:	4b09      	ldr	r3, [pc, #36]	; (8003074 <HAL_TIM_PWM_MspInit+0x5c>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4a08      	ldr	r2, [pc, #32]	; (8003074 <HAL_TIM_PWM_MspInit+0x5c>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	61d3      	str	r3, [r2, #28]
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_TIM_PWM_MspInit+0x5c>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	68bb      	ldr	r3, [r7, #8]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40021000 	.word	0x40021000

08003078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0314 	add.w	r3, r7, #20
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a28      	ldr	r2, [pc, #160]	; (8003134 <HAL_TIM_MspPostInit+0xbc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d119      	bne.n	80030cc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_TIM_MspPostInit+0xc0>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	4a26      	ldr	r2, [pc, #152]	; (8003138 <HAL_TIM_MspPostInit+0xc0>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	6193      	str	r3, [r2, #24]
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_TIM_MspPostInit+0xc0>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	2302      	movs	r3, #2
 80030b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2302      	movs	r3, #2
 80030bc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030be:	f107 0314 	add.w	r3, r7, #20
 80030c2:	4619      	mov	r1, r3
 80030c4:	481d      	ldr	r0, [pc, #116]	; (800313c <HAL_TIM_MspPostInit+0xc4>)
 80030c6:	f001 fa0b 	bl	80044e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030ca:	e02f      	b.n	800312c <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d4:	d12a      	bne.n	800312c <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030d6:	4b18      	ldr	r3, [pc, #96]	; (8003138 <HAL_TIM_MspPostInit+0xc0>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	4a17      	ldr	r2, [pc, #92]	; (8003138 <HAL_TIM_MspPostInit+0xc0>)
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	6193      	str	r3, [r2, #24]
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_TIM_MspPostInit+0xc0>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f4:	2302      	movs	r3, #2
 80030f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f8:	2302      	movs	r3, #2
 80030fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	4619      	mov	r1, r3
 8003102:	480f      	ldr	r0, [pc, #60]	; (8003140 <HAL_TIM_MspPostInit+0xc8>)
 8003104:	f001 f9ec 	bl	80044e0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003108:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <HAL_TIM_MspPostInit+0xcc>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
 8003126:	4a07      	ldr	r2, [pc, #28]	; (8003144 <HAL_TIM_MspPostInit+0xcc>)
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	6053      	str	r3, [r2, #4]
}
 800312c:	bf00      	nop
 800312e:	3728      	adds	r7, #40	; 0x28
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40012c00 	.word	0x40012c00
 8003138:	40021000 	.word	0x40021000
 800313c:	40010800 	.word	0x40010800
 8003140:	40010c00 	.word	0x40010c00
 8003144:	40010000 	.word	0x40010000

08003148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 0310 	add.w	r3, r7, #16
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a20      	ldr	r2, [pc, #128]	; (80031e4 <HAL_UART_MspInit+0x9c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d139      	bne.n	80031dc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003168:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <HAL_UART_MspInit+0xa0>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	4a1e      	ldr	r2, [pc, #120]	; (80031e8 <HAL_UART_MspInit+0xa0>)
 800316e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003172:	6193      	str	r3, [r2, #24]
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_UART_MspInit+0xa0>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_UART_MspInit+0xa0>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	4a18      	ldr	r2, [pc, #96]	; (80031e8 <HAL_UART_MspInit+0xa0>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6193      	str	r3, [r2, #24]
 800318c:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <HAL_UART_MspInit+0xa0>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800319c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031a2:	2303      	movs	r3, #3
 80031a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a6:	f107 0310 	add.w	r3, r7, #16
 80031aa:	4619      	mov	r1, r3
 80031ac:	480f      	ldr	r0, [pc, #60]	; (80031ec <HAL_UART_MspInit+0xa4>)
 80031ae:	f001 f997 	bl	80044e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c0:	f107 0310 	add.w	r3, r7, #16
 80031c4:	4619      	mov	r1, r3
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <HAL_UART_MspInit+0xa4>)
 80031c8:	f001 f98a 	bl	80044e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031cc:	2200      	movs	r2, #0
 80031ce:	2100      	movs	r1, #0
 80031d0:	2025      	movs	r0, #37	; 0x25
 80031d2:	f000 feac 	bl	8003f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031d6:	2025      	movs	r0, #37	; 0x25
 80031d8:	f000 fec5 	bl	8003f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031dc:	bf00      	nop
 80031de:	3720      	adds	r7, #32
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40013800 	.word	0x40013800
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40010800 	.word	0x40010800

080031f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031f4:	e7fe      	b.n	80031f4 <NMI_Handler+0x4>

080031f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fa:	e7fe      	b.n	80031fa <HardFault_Handler+0x4>

080031fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <MemManage_Handler+0x4>

08003202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003206:	e7fe      	b.n	8003206 <BusFault_Handler+0x4>

08003208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800320c:	e7fe      	b.n	800320c <UsageFault_Handler+0x4>

0800320e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr

08003226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003236:	f000 f94b 	bl	80034d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003244:	4802      	ldr	r0, [pc, #8]	; (8003250 <DMA1_Channel1_IRQHandler+0x10>)
 8003246:	f001 f817 	bl	8004278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000ad8 	.word	0x20000ad8

08003254 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8003258:	4803      	ldr	r0, [pc, #12]	; (8003268 <USART1_IRQHandler+0x14>)
 800325a:	f7fe fdeb 	bl	8001e34 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800325e:	4802      	ldr	r0, [pc, #8]	; (8003268 <USART1_IRQHandler+0x14>)
 8003260:	f004 fc60 	bl	8007b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000c58 	.word	0x20000c58

0800326c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return 1;
 8003270:	2301      	movs	r3, #1
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <_kill>:

int _kill(int pid, int sig)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003284:	f006 f800 	bl	8009288 <__errno>
 8003288:	4603      	mov	r3, r0
 800328a:	2216      	movs	r2, #22
 800328c:	601a      	str	r2, [r3, #0]
  return -1;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <_exit>:

void _exit (int status)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032a2:	f04f 31ff 	mov.w	r1, #4294967295
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ffe7 	bl	800327a <_kill>
  while (1) {}    /* Make sure we hang here */
 80032ac:	e7fe      	b.n	80032ac <_exit+0x12>

080032ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	e00a      	b.n	80032d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032c0:	f3af 8000 	nop.w
 80032c4:	4601      	mov	r1, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	60ba      	str	r2, [r7, #8]
 80032cc:	b2ca      	uxtb	r2, r1
 80032ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	3301      	adds	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	dbf0      	blt.n	80032c0 <_read+0x12>
  }

  return len;
 80032de:	687b      	ldr	r3, [r7, #4]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	e009      	b.n	800330e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	60ba      	str	r2, [r7, #8]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	3301      	adds	r3, #1
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	429a      	cmp	r2, r3
 8003314:	dbf1      	blt.n	80032fa <_write+0x12>
  }
  return len;
 8003316:	687b      	ldr	r3, [r7, #4]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <_close>:

int _close(int file)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003346:	605a      	str	r2, [r3, #4]
  return 0;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <_isatty>:

int _isatty(int file)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800335c:	2301      	movs	r3, #1
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003388:	4a14      	ldr	r2, [pc, #80]	; (80033dc <_sbrk+0x5c>)
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <_sbrk+0x60>)
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <_sbrk+0x64>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800339c:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <_sbrk+0x64>)
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <_sbrk+0x68>)
 80033a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033a2:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <_sbrk+0x64>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d207      	bcs.n	80033c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033b0:	f005 ff6a 	bl	8009288 <__errno>
 80033b4:	4603      	mov	r3, r0
 80033b6:	220c      	movs	r2, #12
 80033b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
 80033be:	e009      	b.n	80033d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <_sbrk+0x64>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <_sbrk+0x64>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	4a05      	ldr	r2, [pc, #20]	; (80033e4 <_sbrk+0x64>)
 80033d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033d2:	68fb      	ldr	r3, [r7, #12]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20005000 	.word	0x20005000
 80033e0:	00000400 	.word	0x00000400
 80033e4:	20000f3c 	.word	0x20000f3c
 80033e8:	20001090 	.word	0x20001090

080033ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
			    bl  SystemInit
 80033f8:	f7ff fff8 	bl	80033ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033fc:	480b      	ldr	r0, [pc, #44]	; (800342c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80033fe:	490c      	ldr	r1, [pc, #48]	; (8003430 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003400:	4a0c      	ldr	r2, [pc, #48]	; (8003434 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003404:	e002      	b.n	800340c <LoopCopyDataInit>

08003406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800340a:	3304      	adds	r3, #4

0800340c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800340c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800340e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003410:	d3f9      	bcc.n	8003406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003412:	4a09      	ldr	r2, [pc, #36]	; (8003438 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003414:	4c09      	ldr	r4, [pc, #36]	; (800343c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003418:	e001      	b.n	800341e <LoopFillZerobss>

0800341a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800341a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800341c:	3204      	adds	r2, #4

0800341e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800341e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003420:	d3fb      	bcc.n	800341a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003422:	f005 ff37 	bl	8009294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003426:	f7ff f809 	bl	800243c <main>
  bx lr
 800342a:	4770      	bx	lr
  ldr r0, =_sdata
 800342c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003430:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8003434:	0800d1b8 	.word	0x0800d1b8
  ldr r2, =_sbss
 8003438:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 800343c:	20001090 	.word	0x20001090

08003440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003440:	e7fe      	b.n	8003440 <ADC1_2_IRQHandler>
	...

08003444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <HAL_Init+0x28>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a07      	ldr	r2, [pc, #28]	; (800346c <HAL_Init+0x28>)
 800344e:	f043 0310 	orr.w	r3, r3, #16
 8003452:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003454:	2003      	movs	r0, #3
 8003456:	f000 fd5f 	bl	8003f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800345a:	200f      	movs	r0, #15
 800345c:	f000 f808 	bl	8003470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003460:	f7ff fcb8 	bl	8002dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40022000 	.word	0x40022000

08003470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_InitTick+0x54>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_InitTick+0x58>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	4619      	mov	r1, r3
 8003482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003486:	fbb3 f3f1 	udiv	r3, r3, r1
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fd77 	bl	8003f82 <HAL_SYSTICK_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e00e      	b.n	80034bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b0f      	cmp	r3, #15
 80034a2:	d80a      	bhi.n	80034ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a4:	2200      	movs	r2, #0
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	f000 fd3f 	bl	8003f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034b0:	4a06      	ldr	r2, [pc, #24]	; (80034cc <HAL_InitTick+0x5c>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e000      	b.n	80034bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000070 	.word	0x20000070
 80034c8:	20000078 	.word	0x20000078
 80034cc:	20000074 	.word	0x20000074

080034d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_IncTick+0x1c>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_IncTick+0x20>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4413      	add	r3, r2
 80034e0:	4a03      	ldr	r2, [pc, #12]	; (80034f0 <HAL_IncTick+0x20>)
 80034e2:	6013      	str	r3, [r2, #0]
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	20000078 	.word	0x20000078
 80034f0:	20000f40 	.word	0x20000f40

080034f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return uwTick;
 80034f8:	4b02      	ldr	r3, [pc, #8]	; (8003504 <HAL_GetTick+0x10>)
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	20000f40 	.word	0x20000f40

08003508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003510:	f7ff fff0 	bl	80034f4 <HAL_GetTick>
 8003514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d005      	beq.n	800352e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_Delay+0x44>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800352e:	bf00      	nop
 8003530:	f7ff ffe0 	bl	80034f4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	429a      	cmp	r2, r3
 800353e:	d8f7      	bhi.n	8003530 <HAL_Delay+0x28>
  {
  }
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000078 	.word	0x20000078

08003550 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e0be      	b.n	80036f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff fc52 	bl	8002e38 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fb4b 	bl	8003c30 <ADC_ConversionStop_Disable>
 800359a:	4603      	mov	r3, r0
 800359c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f040 8099 	bne.w	80036de <HAL_ADC_Init+0x18e>
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 8095 	bne.w	80036de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035bc:	f023 0302 	bic.w	r3, r3, #2
 80035c0:	f043 0202 	orr.w	r2, r3, #2
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	7b1b      	ldrb	r3, [r3, #12]
 80035d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e8:	d003      	beq.n	80035f2 <HAL_ADC_Init+0xa2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d102      	bne.n	80035f8 <HAL_ADC_Init+0xa8>
 80035f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035f6:	e000      	b.n	80035fa <HAL_ADC_Init+0xaa>
 80035f8:	2300      	movs	r3, #0
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7d1b      	ldrb	r3, [r3, #20]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d119      	bne.n	800363c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	7b1b      	ldrb	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d109      	bne.n	8003624 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	3b01      	subs	r3, #1
 8003616:	035a      	lsls	r2, r3, #13
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	e00b      	b.n	800363c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	f043 0220 	orr.w	r2, r3, #32
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <HAL_ADC_Init+0x1a8>)
 8003658:	4013      	ands	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	430b      	orrs	r3, r1
 8003662:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366c:	d003      	beq.n	8003676 <HAL_ADC_Init+0x126>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d104      	bne.n	8003680 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	3b01      	subs	r3, #1
 800367c:	051b      	lsls	r3, r3, #20
 800367e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	430a      	orrs	r2, r1
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	4b18      	ldr	r3, [pc, #96]	; (80036fc <HAL_ADC_Init+0x1ac>)
 800369c:	4013      	ands	r3, r2
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d10b      	bne.n	80036bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	f023 0303 	bic.w	r3, r3, #3
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036ba:	e018      	b.n	80036ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	f023 0312 	bic.w	r3, r3, #18
 80036c4:	f043 0210 	orr.w	r2, r3, #16
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036dc:	e007      	b.n	80036ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	f043 0210 	orr.w	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	ffe1f7fd 	.word	0xffe1f7fd
 80036fc:	ff1f0efe 	.word	0xff1f0efe

08003700 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a64      	ldr	r2, [pc, #400]	; (80038a8 <HAL_ADC_Start_DMA+0x1a8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_ADC_Start_DMA+0x24>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a63      	ldr	r2, [pc, #396]	; (80038ac <HAL_ADC_Start_DMA+0x1ac>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d106      	bne.n	8003732 <HAL_ADC_Start_DMA+0x32>
 8003724:	4b60      	ldr	r3, [pc, #384]	; (80038a8 <HAL_ADC_Start_DMA+0x1a8>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800372c:	2b00      	cmp	r3, #0
 800372e:	f040 80b3 	bne.w	8003898 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_ADC_Start_DMA+0x40>
 800373c:	2302      	movs	r3, #2
 800373e:	e0ae      	b.n	800389e <HAL_ADC_Start_DMA+0x19e>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fa17 	bl	8003b7c <ADC_Enable>
 800374e:	4603      	mov	r3, r0
 8003750:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	2b00      	cmp	r3, #0
 8003756:	f040 809a 	bne.w	800388e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a4e      	ldr	r2, [pc, #312]	; (80038ac <HAL_ADC_Start_DMA+0x1ac>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d105      	bne.n	8003784 <HAL_ADC_Start_DMA+0x84>
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <HAL_ADC_Start_DMA+0x1a8>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d115      	bne.n	80037b0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003788:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	2b00      	cmp	r3, #0
 800379c:	d026      	beq.n	80037ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80037ae:	e01d      	b.n	80037ec <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a39      	ldr	r2, [pc, #228]	; (80038a8 <HAL_ADC_Start_DMA+0x1a8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_ADC_Start_DMA+0xd0>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a38      	ldr	r2, [pc, #224]	; (80038ac <HAL_ADC_Start_DMA+0x1ac>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10d      	bne.n	80037ec <HAL_ADC_Start_DMA+0xec>
 80037d0:	4b35      	ldr	r3, [pc, #212]	; (80038a8 <HAL_ADC_Start_DMA+0x1a8>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d007      	beq.n	80037ec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d006      	beq.n	8003806 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	f023 0206 	bic.w	r2, r3, #6
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	62da      	str	r2, [r3, #44]	; 0x2c
 8003804:	e002      	b.n	800380c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4a25      	ldr	r2, [pc, #148]	; (80038b0 <HAL_ADC_Start_DMA+0x1b0>)
 800381a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <HAL_ADC_Start_DMA+0x1b4>)
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4a23      	ldr	r2, [pc, #140]	; (80038b8 <HAL_ADC_Start_DMA+0x1b8>)
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0202 	mvn.w	r2, #2
 8003834:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003844:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a18      	ldr	r0, [r3, #32]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	334c      	adds	r3, #76	; 0x4c
 8003850:	4619      	mov	r1, r3
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f000 fbfb 	bl	8004050 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003864:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003868:	d108      	bne.n	800387c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003878:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800387a:	e00f      	b.n	800389c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800388a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800388c:	e006      	b.n	800389c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003896:	e001      	b.n	800389c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800389c:	7dfb      	ldrb	r3, [r7, #23]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40012400 	.word	0x40012400
 80038ac:	40012800 	.word	0x40012800
 80038b0:	08003cb3 	.word	0x08003cb3
 80038b4:	08003d2f 	.word	0x08003d2f
 80038b8:	08003d4b 	.word	0x08003d4b

080038bc <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_Stop_DMA+0x1a>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e03a      	b.n	800394c <HAL_ADC_Stop_DMA+0x90>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f9a6 	bl	8003c30 <ADC_ConversionStop_Disable>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d129      	bne.n	8003942 <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fc:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d11a      	bne.n	8003942 <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fbfd 	bl	8004110 <HAL_DMA_Abort>
 8003916:	4603      	mov	r3, r0
 8003918:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28
 8003934:	e005      	b.n	8003942 <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
	...

0800398c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x20>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e0dc      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x1da>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b06      	cmp	r3, #6
 80039ba:	d81c      	bhi.n	80039f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	3b05      	subs	r3, #5
 80039ce:	221f      	movs	r2, #31
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	4019      	ands	r1, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	3b05      	subs	r3, #5
 80039e8:	fa00 f203 	lsl.w	r2, r0, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	635a      	str	r2, [r3, #52]	; 0x34
 80039f4:	e03c      	b.n	8003a70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b0c      	cmp	r3, #12
 80039fc:	d81c      	bhi.n	8003a38 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3b23      	subs	r3, #35	; 0x23
 8003a10:	221f      	movs	r2, #31
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	4019      	ands	r1, r3
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	3b23      	subs	r3, #35	; 0x23
 8003a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
 8003a36:	e01b      	b.n	8003a70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	3b41      	subs	r3, #65	; 0x41
 8003a4a:	221f      	movs	r2, #31
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	4019      	ands	r1, r3
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	3b41      	subs	r3, #65	; 0x41
 8003a64:	fa00 f203 	lsl.w	r2, r0, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b09      	cmp	r3, #9
 8003a76:	d91c      	bls.n	8003ab2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68d9      	ldr	r1, [r3, #12]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	3b1e      	subs	r3, #30
 8003a8a:	2207      	movs	r2, #7
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	4019      	ands	r1, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	6898      	ldr	r0, [r3, #8]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3b1e      	subs	r3, #30
 8003aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	60da      	str	r2, [r3, #12]
 8003ab0:	e019      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6919      	ldr	r1, [r3, #16]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4413      	add	r3, r2
 8003ac2:	2207      	movs	r2, #7
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	4019      	ands	r1, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	6898      	ldr	r0, [r3, #8]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	fa00 f203 	lsl.w	r2, r0, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b10      	cmp	r3, #16
 8003aec:	d003      	beq.n	8003af6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003af2:	2b11      	cmp	r3, #17
 8003af4:	d132      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <HAL_ADC_ConfigChannel+0x1e4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d125      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d126      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b1c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d11a      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b26:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <HAL_ADC_ConfigChannel+0x1ec>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	0c9a      	lsrs	r2, r3, #18
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b3c:	e002      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f9      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x1b2>
 8003b4a:	e007      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	40012400 	.word	0x40012400
 8003b74:	20000070 	.word	0x20000070
 8003b78:	431bde83 	.word	0x431bde83

08003b7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d040      	beq.n	8003c1c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003baa:	4b1f      	ldr	r3, [pc, #124]	; (8003c28 <ADC_Enable+0xac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1f      	ldr	r2, [pc, #124]	; (8003c2c <ADC_Enable+0xb0>)
 8003bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb4:	0c9b      	lsrs	r3, r3, #18
 8003bb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bb8:	e002      	b.n	8003bc0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f9      	bne.n	8003bba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bc6:	f7ff fc95 	bl	80034f4 <HAL_GetTick>
 8003bca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003bcc:	e01f      	b.n	8003c0e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bce:	f7ff fc91 	bl	80034f4 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d918      	bls.n	8003c0e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d011      	beq.n	8003c0e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e007      	b.n	8003c1e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d1d8      	bne.n	8003bce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000070 	.word	0x20000070
 8003c2c:	431bde83 	.word	0x431bde83

08003c30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d12e      	bne.n	8003ca8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c5a:	f7ff fc4b 	bl	80034f4 <HAL_GetTick>
 8003c5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c60:	e01b      	b.n	8003c9a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c62:	f7ff fc47 	bl	80034f4 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d914      	bls.n	8003c9a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10d      	bne.n	8003c9a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	f043 0210 	orr.w	r2, r3, #16
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	f043 0201 	orr.w	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e007      	b.n	8003caa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d0dc      	beq.n	8003c62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d127      	bne.n	8003d1c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003ce2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003ce6:	d115      	bne.n	8003d14 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d111      	bne.n	8003d14 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	f043 0201 	orr.w	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fe1d 	bl	8003954 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003d1a:	e004      	b.n	8003d26 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff fe12 	bl	8003966 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b084      	sub	sp, #16
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	f043 0204 	orr.w	r2, r3, #4
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff fe01 	bl	8003978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db2:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	60d3      	str	r3, [r2, #12]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	f003 0307 	and.w	r3, r3, #7
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	db0b      	blt.n	8003e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003df6:	79fb      	ldrb	r3, [r7, #7]
 8003df8:	f003 021f 	and.w	r2, r3, #31
 8003dfc:	4906      	ldr	r1, [pc, #24]	; (8003e18 <__NVIC_EnableIRQ+0x34>)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2001      	movs	r0, #1
 8003e06:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	e000e100 	.word	0xe000e100

08003e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	db0a      	blt.n	8003e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	490c      	ldr	r1, [pc, #48]	; (8003e68 <__NVIC_SetPriority+0x4c>)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	440b      	add	r3, r1
 8003e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e44:	e00a      	b.n	8003e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	4908      	ldr	r1, [pc, #32]	; (8003e6c <__NVIC_SetPriority+0x50>)
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	3b04      	subs	r3, #4
 8003e54:	0112      	lsls	r2, r2, #4
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	440b      	add	r3, r1
 8003e5a:	761a      	strb	r2, [r3, #24]
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	e000e100 	.word	0xe000e100
 8003e6c:	e000ed00 	.word	0xe000ed00

08003e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f1c3 0307 	rsb	r3, r3, #7
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	bf28      	it	cs
 8003e8e:	2304      	movcs	r3, #4
 8003e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d902      	bls.n	8003ea0 <NVIC_EncodePriority+0x30>
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3b03      	subs	r3, #3
 8003e9e:	e000      	b.n	8003ea2 <NVIC_EncodePriority+0x32>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec2:	43d9      	mvns	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	4313      	orrs	r3, r2
         );
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3724      	adds	r7, #36	; 0x24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee4:	d301      	bcc.n	8003eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e00f      	b.n	8003f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <SysTick_Config+0x40>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef2:	210f      	movs	r1, #15
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	f7ff ff90 	bl	8003e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <SysTick_Config+0x40>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f02:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <SysTick_Config+0x40>)
 8003f04:	2207      	movs	r2, #7
 8003f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	e000e010 	.word	0xe000e010

08003f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff2d 	bl	8003d80 <__NVIC_SetPriorityGrouping>
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f40:	f7ff ff42 	bl	8003dc8 <__NVIC_GetPriorityGrouping>
 8003f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68b9      	ldr	r1, [r7, #8]
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7ff ff90 	bl	8003e70 <NVIC_EncodePriority>
 8003f50:	4602      	mov	r2, r0
 8003f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff ff5f 	bl	8003e1c <__NVIC_SetPriority>
}
 8003f5e:	bf00      	nop
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff35 	bl	8003de4 <__NVIC_EnableIRQ>
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7ff ffa2 	bl	8003ed4 <SysTick_Config>
 8003f90:	4603      	mov	r3, r0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e043      	b.n	800403a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_DMA_Init+0xa8>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	4a22      	ldr	r2, [pc, #136]	; (8004048 <HAL_DMA_Init+0xac>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	009a      	lsls	r2, r3, #2
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	; (800404c <HAL_DMA_Init+0xb0>)
 8003fce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003fe6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003fea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr
 8004044:	bffdfff8 	.word	0xbffdfff8
 8004048:	cccccccd 	.word	0xcccccccd
 800404c:	40020000 	.word	0x40020000

08004050 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_DMA_Start_IT+0x20>
 800406c:	2302      	movs	r3, #2
 800406e:	e04b      	b.n	8004108 <HAL_DMA_Start_IT+0xb8>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d13a      	bne.n	80040fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f9eb 	bl	8004484 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 020e 	orr.w	r2, r2, #14
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e00f      	b.n	80040e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0204 	bic.w	r2, r2, #4
 80040d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 020a 	orr.w	r2, r2, #10
 80040e6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	e005      	b.n	8004106 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004102:	2302      	movs	r3, #2
 8004104:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004106:	7dfb      	ldrb	r3, [r7, #23]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d008      	beq.n	800413a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2204      	movs	r2, #4
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e020      	b.n	800417c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 020e 	bic.w	r2, r2, #14
 8004148:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	2101      	movs	r1, #1
 8004164:	fa01 f202 	lsl.w	r2, r1, r2
 8004168:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800417a:	7bfb      	ldrb	r3, [r7, #15]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
	...

08004188 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d005      	beq.n	80041ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2204      	movs	r2, #4
 80041a4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
 80041aa:	e051      	b.n	8004250 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 020e 	bic.w	r2, r2, #14
 80041ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a22      	ldr	r2, [pc, #136]	; (800425c <HAL_DMA_Abort_IT+0xd4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d029      	beq.n	800422a <HAL_DMA_Abort_IT+0xa2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a21      	ldr	r2, [pc, #132]	; (8004260 <HAL_DMA_Abort_IT+0xd8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_DMA_Abort_IT+0x9e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <HAL_DMA_Abort_IT+0xdc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01a      	beq.n	8004220 <HAL_DMA_Abort_IT+0x98>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <HAL_DMA_Abort_IT+0xe0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d012      	beq.n	800421a <HAL_DMA_Abort_IT+0x92>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1c      	ldr	r2, [pc, #112]	; (800426c <HAL_DMA_Abort_IT+0xe4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00a      	beq.n	8004214 <HAL_DMA_Abort_IT+0x8c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <HAL_DMA_Abort_IT+0xe8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d102      	bne.n	800420e <HAL_DMA_Abort_IT+0x86>
 8004208:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800420c:	e00e      	b.n	800422c <HAL_DMA_Abort_IT+0xa4>
 800420e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004212:	e00b      	b.n	800422c <HAL_DMA_Abort_IT+0xa4>
 8004214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004218:	e008      	b.n	800422c <HAL_DMA_Abort_IT+0xa4>
 800421a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800421e:	e005      	b.n	800422c <HAL_DMA_Abort_IT+0xa4>
 8004220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004224:	e002      	b.n	800422c <HAL_DMA_Abort_IT+0xa4>
 8004226:	2310      	movs	r3, #16
 8004228:	e000      	b.n	800422c <HAL_DMA_Abort_IT+0xa4>
 800422a:	2301      	movs	r3, #1
 800422c:	4a11      	ldr	r2, [pc, #68]	; (8004274 <HAL_DMA_Abort_IT+0xec>)
 800422e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	4798      	blx	r3
    } 
  }
  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40020008 	.word	0x40020008
 8004260:	4002001c 	.word	0x4002001c
 8004264:	40020030 	.word	0x40020030
 8004268:	40020044 	.word	0x40020044
 800426c:	40020058 	.word	0x40020058
 8004270:	4002006c 	.word	0x4002006c
 8004274:	40020000 	.word	0x40020000

08004278 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	2204      	movs	r2, #4
 8004296:	409a      	lsls	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d04f      	beq.n	8004340 <HAL_DMA_IRQHandler+0xc8>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d04a      	beq.n	8004340 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0204 	bic.w	r2, r2, #4
 80042c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a66      	ldr	r2, [pc, #408]	; (8004468 <HAL_DMA_IRQHandler+0x1f0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d029      	beq.n	8004326 <HAL_DMA_IRQHandler+0xae>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a65      	ldr	r2, [pc, #404]	; (800446c <HAL_DMA_IRQHandler+0x1f4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d022      	beq.n	8004322 <HAL_DMA_IRQHandler+0xaa>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a63      	ldr	r2, [pc, #396]	; (8004470 <HAL_DMA_IRQHandler+0x1f8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01a      	beq.n	800431c <HAL_DMA_IRQHandler+0xa4>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a62      	ldr	r2, [pc, #392]	; (8004474 <HAL_DMA_IRQHandler+0x1fc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d012      	beq.n	8004316 <HAL_DMA_IRQHandler+0x9e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a60      	ldr	r2, [pc, #384]	; (8004478 <HAL_DMA_IRQHandler+0x200>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00a      	beq.n	8004310 <HAL_DMA_IRQHandler+0x98>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a5f      	ldr	r2, [pc, #380]	; (800447c <HAL_DMA_IRQHandler+0x204>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d102      	bne.n	800430a <HAL_DMA_IRQHandler+0x92>
 8004304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004308:	e00e      	b.n	8004328 <HAL_DMA_IRQHandler+0xb0>
 800430a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800430e:	e00b      	b.n	8004328 <HAL_DMA_IRQHandler+0xb0>
 8004310:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004314:	e008      	b.n	8004328 <HAL_DMA_IRQHandler+0xb0>
 8004316:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800431a:	e005      	b.n	8004328 <HAL_DMA_IRQHandler+0xb0>
 800431c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004320:	e002      	b.n	8004328 <HAL_DMA_IRQHandler+0xb0>
 8004322:	2340      	movs	r3, #64	; 0x40
 8004324:	e000      	b.n	8004328 <HAL_DMA_IRQHandler+0xb0>
 8004326:	2304      	movs	r3, #4
 8004328:	4a55      	ldr	r2, [pc, #340]	; (8004480 <HAL_DMA_IRQHandler+0x208>)
 800432a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8094 	beq.w	800445e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800433e:	e08e      	b.n	800445e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	2202      	movs	r2, #2
 8004346:	409a      	lsls	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d056      	beq.n	80043fe <HAL_DMA_IRQHandler+0x186>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d051      	beq.n	80043fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 020a 	bic.w	r2, r2, #10
 8004376:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a38      	ldr	r2, [pc, #224]	; (8004468 <HAL_DMA_IRQHandler+0x1f0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d029      	beq.n	80043de <HAL_DMA_IRQHandler+0x166>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a37      	ldr	r2, [pc, #220]	; (800446c <HAL_DMA_IRQHandler+0x1f4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d022      	beq.n	80043da <HAL_DMA_IRQHandler+0x162>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a35      	ldr	r2, [pc, #212]	; (8004470 <HAL_DMA_IRQHandler+0x1f8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01a      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x15c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a34      	ldr	r2, [pc, #208]	; (8004474 <HAL_DMA_IRQHandler+0x1fc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d012      	beq.n	80043ce <HAL_DMA_IRQHandler+0x156>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a32      	ldr	r2, [pc, #200]	; (8004478 <HAL_DMA_IRQHandler+0x200>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00a      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x150>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a31      	ldr	r2, [pc, #196]	; (800447c <HAL_DMA_IRQHandler+0x204>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d102      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x14a>
 80043bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043c0:	e00e      	b.n	80043e0 <HAL_DMA_IRQHandler+0x168>
 80043c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043c6:	e00b      	b.n	80043e0 <HAL_DMA_IRQHandler+0x168>
 80043c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043cc:	e008      	b.n	80043e0 <HAL_DMA_IRQHandler+0x168>
 80043ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043d2:	e005      	b.n	80043e0 <HAL_DMA_IRQHandler+0x168>
 80043d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043d8:	e002      	b.n	80043e0 <HAL_DMA_IRQHandler+0x168>
 80043da:	2320      	movs	r3, #32
 80043dc:	e000      	b.n	80043e0 <HAL_DMA_IRQHandler+0x168>
 80043de:	2302      	movs	r3, #2
 80043e0:	4a27      	ldr	r2, [pc, #156]	; (8004480 <HAL_DMA_IRQHandler+0x208>)
 80043e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d034      	beq.n	800445e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80043fc:	e02f      	b.n	800445e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2208      	movs	r2, #8
 8004404:	409a      	lsls	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d028      	beq.n	8004460 <HAL_DMA_IRQHandler+0x1e8>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d023      	beq.n	8004460 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 020e 	bic.w	r2, r2, #14
 8004426:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	2101      	movs	r1, #1
 8004432:	fa01 f202 	lsl.w	r2, r1, r2
 8004436:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
    }
  }
  return;
 800445e:	bf00      	nop
 8004460:	bf00      	nop
}
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40020008 	.word	0x40020008
 800446c:	4002001c 	.word	0x4002001c
 8004470:	40020030 	.word	0x40020030
 8004474:	40020044 	.word	0x40020044
 8004478:	40020058 	.word	0x40020058
 800447c:	4002006c 	.word	0x4002006c
 8004480:	40020000 	.word	0x40020000

08004484 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449a:	2101      	movs	r1, #1
 800449c:	fa01 f202 	lsl.w	r2, r1, r2
 80044a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d108      	bne.n	80044c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044c2:	e007      	b.n	80044d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	60da      	str	r2, [r3, #12]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr
	...

080044e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b08b      	sub	sp, #44	; 0x2c
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ea:	2300      	movs	r3, #0
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044f2:	e169      	b.n	80047c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044f4:	2201      	movs	r2, #1
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	4013      	ands	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	429a      	cmp	r2, r3
 800450e:	f040 8158 	bne.w	80047c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a9a      	ldr	r2, [pc, #616]	; (8004780 <HAL_GPIO_Init+0x2a0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d05e      	beq.n	80045da <HAL_GPIO_Init+0xfa>
 800451c:	4a98      	ldr	r2, [pc, #608]	; (8004780 <HAL_GPIO_Init+0x2a0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d875      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 8004522:	4a98      	ldr	r2, [pc, #608]	; (8004784 <HAL_GPIO_Init+0x2a4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d058      	beq.n	80045da <HAL_GPIO_Init+0xfa>
 8004528:	4a96      	ldr	r2, [pc, #600]	; (8004784 <HAL_GPIO_Init+0x2a4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d86f      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 800452e:	4a96      	ldr	r2, [pc, #600]	; (8004788 <HAL_GPIO_Init+0x2a8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d052      	beq.n	80045da <HAL_GPIO_Init+0xfa>
 8004534:	4a94      	ldr	r2, [pc, #592]	; (8004788 <HAL_GPIO_Init+0x2a8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d869      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 800453a:	4a94      	ldr	r2, [pc, #592]	; (800478c <HAL_GPIO_Init+0x2ac>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d04c      	beq.n	80045da <HAL_GPIO_Init+0xfa>
 8004540:	4a92      	ldr	r2, [pc, #584]	; (800478c <HAL_GPIO_Init+0x2ac>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d863      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 8004546:	4a92      	ldr	r2, [pc, #584]	; (8004790 <HAL_GPIO_Init+0x2b0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d046      	beq.n	80045da <HAL_GPIO_Init+0xfa>
 800454c:	4a90      	ldr	r2, [pc, #576]	; (8004790 <HAL_GPIO_Init+0x2b0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d85d      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 8004552:	2b12      	cmp	r3, #18
 8004554:	d82a      	bhi.n	80045ac <HAL_GPIO_Init+0xcc>
 8004556:	2b12      	cmp	r3, #18
 8004558:	d859      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <HAL_GPIO_Init+0x80>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	080045db 	.word	0x080045db
 8004564:	080045b5 	.word	0x080045b5
 8004568:	080045c7 	.word	0x080045c7
 800456c:	08004609 	.word	0x08004609
 8004570:	0800460f 	.word	0x0800460f
 8004574:	0800460f 	.word	0x0800460f
 8004578:	0800460f 	.word	0x0800460f
 800457c:	0800460f 	.word	0x0800460f
 8004580:	0800460f 	.word	0x0800460f
 8004584:	0800460f 	.word	0x0800460f
 8004588:	0800460f 	.word	0x0800460f
 800458c:	0800460f 	.word	0x0800460f
 8004590:	0800460f 	.word	0x0800460f
 8004594:	0800460f 	.word	0x0800460f
 8004598:	0800460f 	.word	0x0800460f
 800459c:	0800460f 	.word	0x0800460f
 80045a0:	0800460f 	.word	0x0800460f
 80045a4:	080045bd 	.word	0x080045bd
 80045a8:	080045d1 	.word	0x080045d1
 80045ac:	4a79      	ldr	r2, [pc, #484]	; (8004794 <HAL_GPIO_Init+0x2b4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045b2:	e02c      	b.n	800460e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	623b      	str	r3, [r7, #32]
          break;
 80045ba:	e029      	b.n	8004610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	3304      	adds	r3, #4
 80045c2:	623b      	str	r3, [r7, #32]
          break;
 80045c4:	e024      	b.n	8004610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	3308      	adds	r3, #8
 80045cc:	623b      	str	r3, [r7, #32]
          break;
 80045ce:	e01f      	b.n	8004610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	330c      	adds	r3, #12
 80045d6:	623b      	str	r3, [r7, #32]
          break;
 80045d8:	e01a      	b.n	8004610 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045e2:	2304      	movs	r3, #4
 80045e4:	623b      	str	r3, [r7, #32]
          break;
 80045e6:	e013      	b.n	8004610 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d105      	bne.n	80045fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045f0:	2308      	movs	r3, #8
 80045f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	611a      	str	r2, [r3, #16]
          break;
 80045fa:	e009      	b.n	8004610 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045fc:	2308      	movs	r3, #8
 80045fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	615a      	str	r2, [r3, #20]
          break;
 8004606:	e003      	b.n	8004610 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004608:	2300      	movs	r3, #0
 800460a:	623b      	str	r3, [r7, #32]
          break;
 800460c:	e000      	b.n	8004610 <HAL_GPIO_Init+0x130>
          break;
 800460e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2bff      	cmp	r3, #255	; 0xff
 8004614:	d801      	bhi.n	800461a <HAL_GPIO_Init+0x13a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	e001      	b.n	800461e <HAL_GPIO_Init+0x13e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3304      	adds	r3, #4
 800461e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2bff      	cmp	r3, #255	; 0xff
 8004624:	d802      	bhi.n	800462c <HAL_GPIO_Init+0x14c>
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	e002      	b.n	8004632 <HAL_GPIO_Init+0x152>
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	3b08      	subs	r3, #8
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	210f      	movs	r1, #15
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	401a      	ands	r2, r3
 8004644:	6a39      	ldr	r1, [r7, #32]
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	fa01 f303 	lsl.w	r3, r1, r3
 800464c:	431a      	orrs	r2, r3
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80b1 	beq.w	80047c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004660:	4b4d      	ldr	r3, [pc, #308]	; (8004798 <HAL_GPIO_Init+0x2b8>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	4a4c      	ldr	r2, [pc, #304]	; (8004798 <HAL_GPIO_Init+0x2b8>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6193      	str	r3, [r2, #24]
 800466c:	4b4a      	ldr	r3, [pc, #296]	; (8004798 <HAL_GPIO_Init+0x2b8>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004678:	4a48      	ldr	r2, [pc, #288]	; (800479c <HAL_GPIO_Init+0x2bc>)
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	089b      	lsrs	r3, r3, #2
 800467e:	3302      	adds	r3, #2
 8004680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004684:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	220f      	movs	r2, #15
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a40      	ldr	r2, [pc, #256]	; (80047a0 <HAL_GPIO_Init+0x2c0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d013      	beq.n	80046cc <HAL_GPIO_Init+0x1ec>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3f      	ldr	r2, [pc, #252]	; (80047a4 <HAL_GPIO_Init+0x2c4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00d      	beq.n	80046c8 <HAL_GPIO_Init+0x1e8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3e      	ldr	r2, [pc, #248]	; (80047a8 <HAL_GPIO_Init+0x2c8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <HAL_GPIO_Init+0x1e4>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a3d      	ldr	r2, [pc, #244]	; (80047ac <HAL_GPIO_Init+0x2cc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d101      	bne.n	80046c0 <HAL_GPIO_Init+0x1e0>
 80046bc:	2303      	movs	r3, #3
 80046be:	e006      	b.n	80046ce <HAL_GPIO_Init+0x1ee>
 80046c0:	2304      	movs	r3, #4
 80046c2:	e004      	b.n	80046ce <HAL_GPIO_Init+0x1ee>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e002      	b.n	80046ce <HAL_GPIO_Init+0x1ee>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_GPIO_Init+0x1ee>
 80046cc:	2300      	movs	r3, #0
 80046ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d0:	f002 0203 	and.w	r2, r2, #3
 80046d4:	0092      	lsls	r2, r2, #2
 80046d6:	4093      	lsls	r3, r2
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046de:	492f      	ldr	r1, [pc, #188]	; (800479c <HAL_GPIO_Init+0x2bc>)
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	3302      	adds	r3, #2
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d006      	beq.n	8004706 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	492c      	ldr	r1, [pc, #176]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	4313      	orrs	r3, r2
 8004702:	608b      	str	r3, [r1, #8]
 8004704:	e006      	b.n	8004714 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004706:	4b2a      	ldr	r3, [pc, #168]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	43db      	mvns	r3, r3
 800470e:	4928      	ldr	r1, [pc, #160]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004710:	4013      	ands	r3, r2
 8004712:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d006      	beq.n	800472e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004720:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	4922      	ldr	r1, [pc, #136]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	4313      	orrs	r3, r2
 800472a:	60cb      	str	r3, [r1, #12]
 800472c:	e006      	b.n	800473c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800472e:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	43db      	mvns	r3, r3
 8004736:	491e      	ldr	r1, [pc, #120]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004738:	4013      	ands	r3, r2
 800473a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d006      	beq.n	8004756 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004748:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	4918      	ldr	r1, [pc, #96]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
 8004754:	e006      	b.n	8004764 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	43db      	mvns	r3, r3
 800475e:	4914      	ldr	r1, [pc, #80]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004760:	4013      	ands	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d021      	beq.n	80047b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	490e      	ldr	r1, [pc, #56]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]
 800477c:	e021      	b.n	80047c2 <HAL_GPIO_Init+0x2e2>
 800477e:	bf00      	nop
 8004780:	10320000 	.word	0x10320000
 8004784:	10310000 	.word	0x10310000
 8004788:	10220000 	.word	0x10220000
 800478c:	10210000 	.word	0x10210000
 8004790:	10120000 	.word	0x10120000
 8004794:	10110000 	.word	0x10110000
 8004798:	40021000 	.word	0x40021000
 800479c:	40010000 	.word	0x40010000
 80047a0:	40010800 	.word	0x40010800
 80047a4:	40010c00 	.word	0x40010c00
 80047a8:	40011000 	.word	0x40011000
 80047ac:	40011400 	.word	0x40011400
 80047b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_GPIO_Init+0x304>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	4909      	ldr	r1, [pc, #36]	; (80047e4 <HAL_GPIO_Init+0x304>)
 80047be:	4013      	ands	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	3301      	adds	r3, #1
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	fa22 f303 	lsr.w	r3, r2, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f47f ae8e 	bne.w	80044f4 <HAL_GPIO_Init+0x14>
  }
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	372c      	adds	r7, #44	; 0x2c
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr
 80047e4:	40010400 	.word	0x40010400

080047e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	807b      	strh	r3, [r7, #2]
 80047f4:	4613      	mov	r3, r2
 80047f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047f8:	787b      	ldrb	r3, [r7, #1]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047fe:	887a      	ldrh	r2, [r7, #2]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004804:	e003      	b.n	800480e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004806:	887b      	ldrh	r3, [r7, #2]
 8004808:	041a      	lsls	r2, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	611a      	str	r2, [r3, #16]
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4013      	ands	r3, r2
 8004830:	041a      	lsls	r2, r3, #16
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	43d9      	mvns	r1, r3
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	400b      	ands	r3, r1
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	611a      	str	r2, [r3, #16]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
	...

0800484c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e12b      	b.n	8004ab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fe fb48 	bl	8002f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2224      	movs	r2, #36	; 0x24
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0201 	bic.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800489e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048b0:	f001 fd70 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 80048b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4a81      	ldr	r2, [pc, #516]	; (8004ac0 <HAL_I2C_Init+0x274>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d807      	bhi.n	80048d0 <HAL_I2C_Init+0x84>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a80      	ldr	r2, [pc, #512]	; (8004ac4 <HAL_I2C_Init+0x278>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	bf94      	ite	ls
 80048c8:	2301      	movls	r3, #1
 80048ca:	2300      	movhi	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e006      	b.n	80048de <HAL_I2C_Init+0x92>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a7d      	ldr	r2, [pc, #500]	; (8004ac8 <HAL_I2C_Init+0x27c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	bf94      	ite	ls
 80048d8:	2301      	movls	r3, #1
 80048da:	2300      	movhi	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e0e7      	b.n	8004ab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4a78      	ldr	r2, [pc, #480]	; (8004acc <HAL_I2C_Init+0x280>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	0c9b      	lsrs	r3, r3, #18
 80048f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	4a6a      	ldr	r2, [pc, #424]	; (8004ac0 <HAL_I2C_Init+0x274>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d802      	bhi.n	8004920 <HAL_I2C_Init+0xd4>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	3301      	adds	r3, #1
 800491e:	e009      	b.n	8004934 <HAL_I2C_Init+0xe8>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004926:	fb02 f303 	mul.w	r3, r2, r3
 800492a:	4a69      	ldr	r2, [pc, #420]	; (8004ad0 <HAL_I2C_Init+0x284>)
 800492c:	fba2 2303 	umull	r2, r3, r2, r3
 8004930:	099b      	lsrs	r3, r3, #6
 8004932:	3301      	adds	r3, #1
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	430b      	orrs	r3, r1
 800493a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004946:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	495c      	ldr	r1, [pc, #368]	; (8004ac0 <HAL_I2C_Init+0x274>)
 8004950:	428b      	cmp	r3, r1
 8004952:	d819      	bhi.n	8004988 <HAL_I2C_Init+0x13c>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1e59      	subs	r1, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004962:	1c59      	adds	r1, r3, #1
 8004964:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004968:	400b      	ands	r3, r1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_I2C_Init+0x138>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1e59      	subs	r1, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fbb1 f3f3 	udiv	r3, r1, r3
 800497c:	3301      	adds	r3, #1
 800497e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004982:	e051      	b.n	8004a28 <HAL_I2C_Init+0x1dc>
 8004984:	2304      	movs	r3, #4
 8004986:	e04f      	b.n	8004a28 <HAL_I2C_Init+0x1dc>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d111      	bne.n	80049b4 <HAL_I2C_Init+0x168>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	1e58      	subs	r0, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	440b      	add	r3, r1
 800499e:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a2:	3301      	adds	r3, #1
 80049a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e012      	b.n	80049da <HAL_I2C_Init+0x18e>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1e58      	subs	r0, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6859      	ldr	r1, [r3, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	0099      	lsls	r1, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ca:	3301      	adds	r3, #1
 80049cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_I2C_Init+0x196>
 80049de:	2301      	movs	r3, #1
 80049e0:	e022      	b.n	8004a28 <HAL_I2C_Init+0x1dc>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10e      	bne.n	8004a08 <HAL_I2C_Init+0x1bc>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1e58      	subs	r0, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6859      	ldr	r1, [r3, #4]
 80049f2:	460b      	mov	r3, r1
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	440b      	add	r3, r1
 80049f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80049fc:	3301      	adds	r3, #1
 80049fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a06:	e00f      	b.n	8004a28 <HAL_I2C_Init+0x1dc>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1e58      	subs	r0, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6859      	ldr	r1, [r3, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	0099      	lsls	r1, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	6809      	ldr	r1, [r1, #0]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69da      	ldr	r2, [r3, #28]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6911      	ldr	r1, [r2, #16]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68d2      	ldr	r2, [r2, #12]
 8004a62:	4311      	orrs	r1, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	000186a0 	.word	0x000186a0
 8004ac4:	001e847f 	.word	0x001e847f
 8004ac8:	003d08ff 	.word	0x003d08ff
 8004acc:	431bde83 	.word	0x431bde83
 8004ad0:	10624dd3 	.word	0x10624dd3

08004ad4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	607a      	str	r2, [r7, #4]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	817b      	strh	r3, [r7, #10]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ae8:	f7fe fd04 	bl	80034f4 <HAL_GetTick>
 8004aec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	f040 80e0 	bne.w	8004cbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	2319      	movs	r3, #25
 8004b02:	2201      	movs	r2, #1
 8004b04:	4970      	ldr	r1, [pc, #448]	; (8004cc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fe44 	bl	8005794 <I2C_WaitOnFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b12:	2302      	movs	r3, #2
 8004b14:	e0d3      	b.n	8004cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_I2C_Master_Transmit+0x50>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e0cc      	b.n	8004cbe <HAL_I2C_Master_Transmit+0x1ea>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d007      	beq.n	8004b4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2221      	movs	r2, #33	; 0x21
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2210      	movs	r2, #16
 8004b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	893a      	ldrh	r2, [r7, #8]
 8004b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a50      	ldr	r2, [pc, #320]	; (8004ccc <HAL_I2C_Master_Transmit+0x1f8>)
 8004b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b8c:	8979      	ldrh	r1, [r7, #10]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	6a3a      	ldr	r2, [r7, #32]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fbfe 	bl	8005394 <I2C_MasterRequestWrite>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e08d      	b.n	8004cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	613b      	str	r3, [r7, #16]
 8004bb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004bb8:	e066      	b.n	8004c88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	6a39      	ldr	r1, [r7, #32]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 ff02 	bl	80059c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00d      	beq.n	8004be6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d107      	bne.n	8004be2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e06b      	b.n	8004cbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	781a      	ldrb	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d11b      	bne.n	8004c5c <HAL_I2C_Master_Transmit+0x188>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d017      	beq.n	8004c5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	6a39      	ldr	r1, [r7, #32]
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 fef9 	bl	8005a58 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00d      	beq.n	8004c88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d107      	bne.n	8004c84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e01a      	b.n	8004cbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d194      	bne.n	8004bba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e000      	b.n	8004cbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
  }
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	00100002 	.word	0x00100002
 8004ccc:	ffff0000 	.word	0xffff0000

08004cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	817b      	strh	r3, [r7, #10]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	813b      	strh	r3, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cea:	f7fe fc03 	bl	80034f4 <HAL_GetTick>
 8004cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	f040 80d9 	bne.w	8004eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2319      	movs	r3, #25
 8004d04:	2201      	movs	r2, #1
 8004d06:	496d      	ldr	r1, [pc, #436]	; (8004ebc <HAL_I2C_Mem_Write+0x1ec>)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 fd43 	bl	8005794 <I2C_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
 8004d16:	e0cc      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_I2C_Mem_Write+0x56>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0c5      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d007      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2221      	movs	r2, #33	; 0x21
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2240      	movs	r2, #64	; 0x40
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a4d      	ldr	r2, [pc, #308]	; (8004ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8004d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d8e:	88f8      	ldrh	r0, [r7, #6]
 8004d90:	893a      	ldrh	r2, [r7, #8]
 8004d92:	8979      	ldrh	r1, [r7, #10]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fb7a 	bl	8005498 <I2C_RequestMemoryWrite>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d052      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e081      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fe08 	bl	80059c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06b      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	781a      	ldrb	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d11b      	bne.n	8004e50 <HAL_I2C_Mem_Write+0x180>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d017      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	781a      	ldrb	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1aa      	bne.n	8004dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fdfb 	bl	8005a58 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00d      	beq.n	8004e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d107      	bne.n	8004e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e016      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	00100002 	.word	0x00100002
 8004ec0:	ffff0000 	.word	0xffff0000

08004ec4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08c      	sub	sp, #48	; 0x30
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	817b      	strh	r3, [r7, #10]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	813b      	strh	r3, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ee2:	f7fe fb07 	bl	80034f4 <HAL_GetTick>
 8004ee6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	f040 8244 	bne.w	800537e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	2319      	movs	r3, #25
 8004efc:	2201      	movs	r2, #1
 8004efe:	4982      	ldr	r1, [pc, #520]	; (8005108 <HAL_I2C_Mem_Read+0x244>)
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fc47 	bl	8005794 <I2C_WaitOnFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e237      	b.n	8005380 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_I2C_Mem_Read+0x5a>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e230      	b.n	8005380 <HAL_I2C_Mem_Read+0x4bc>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d007      	beq.n	8004f44 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2222      	movs	r2, #34	; 0x22
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2240      	movs	r2, #64	; 0x40
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4a62      	ldr	r2, [pc, #392]	; (800510c <HAL_I2C_Mem_Read+0x248>)
 8004f84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f86:	88f8      	ldrh	r0, [r7, #6]
 8004f88:	893a      	ldrh	r2, [r7, #8]
 8004f8a:	8979      	ldrh	r1, [r7, #10]
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	9301      	str	r3, [sp, #4]
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	4603      	mov	r3, r0
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fb14 	bl	80055c4 <I2C_RequestMemoryRead>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e1ec      	b.n	8005380 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d113      	bne.n	8004fd6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e1c0      	b.n	8005358 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d11e      	bne.n	800501c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004fee:	b672      	cpsid	i
}
 8004ff0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005018:	b662      	cpsie	i
}
 800501a:	e035      	b.n	8005088 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005020:	2b02      	cmp	r3, #2
 8005022:	d11e      	bne.n	8005062 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005032:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005034:	b672      	cpsid	i
}
 8005036:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800505e:	b662      	cpsie	i
}
 8005060:	e012      	b.n	8005088 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005070:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005088:	e166      	b.n	8005358 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508e:	2b03      	cmp	r3, #3
 8005090:	f200 811f 	bhi.w	80052d2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005098:	2b01      	cmp	r3, #1
 800509a:	d123      	bne.n	80050e4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800509c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 fd21 	bl	8005ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e167      	b.n	8005380 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050e2:	e139      	b.n	8005358 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d152      	bne.n	8005192 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	2200      	movs	r2, #0
 80050f4:	4906      	ldr	r1, [pc, #24]	; (8005110 <HAL_I2C_Mem_Read+0x24c>)
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 fb4c 	bl	8005794 <I2C_WaitOnFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d008      	beq.n	8005114 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e13c      	b.n	8005380 <HAL_I2C_Mem_Read+0x4bc>
 8005106:	bf00      	nop
 8005108:	00100002 	.word	0x00100002
 800510c:	ffff0000 	.word	0xffff0000
 8005110:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005114:	b672      	cpsid	i
}
 8005116:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005126:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800515a:	b662      	cpsie	i
}
 800515c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005190:	e0e2      	b.n	8005358 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	2200      	movs	r2, #0
 800519a:	497b      	ldr	r1, [pc, #492]	; (8005388 <HAL_I2C_Mem_Read+0x4c4>)
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 faf9 	bl	8005794 <I2C_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0e9      	b.n	8005380 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051bc:	b672      	cpsid	i
}
 80051be:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80051f2:	4b66      	ldr	r3, [pc, #408]	; (800538c <HAL_I2C_Mem_Read+0x4c8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	08db      	lsrs	r3, r3, #3
 80051f8:	4a65      	ldr	r2, [pc, #404]	; (8005390 <HAL_I2C_Mem_Read+0x4cc>)
 80051fa:	fba2 2303 	umull	r2, r3, r2, r3
 80051fe:	0a1a      	lsrs	r2, r3, #8
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	00da      	lsls	r2, r3, #3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	3b01      	subs	r3, #1
 8005210:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d118      	bne.n	800524a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f043 0220 	orr.w	r2, r3, #32
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800523a:	b662      	cpsie	i
}
 800523c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e09a      	b.n	8005380 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b04      	cmp	r3, #4
 8005256:	d1d9      	bne.n	800520c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005290:	b29b      	uxth	r3, r3
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800529a:	b662      	cpsie	i
}
 800529c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052d0:	e042      	b.n	8005358 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 fc06 	bl	8005ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e04c      	b.n	8005380 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b04      	cmp	r3, #4
 8005324:	d118      	bne.n	8005358 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	f47f ae94 	bne.w	800508a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e000      	b.n	8005380 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3728      	adds	r7, #40	; 0x28
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	00010004 	.word	0x00010004
 800538c:	20000070 	.word	0x20000070
 8005390:	14f8b589 	.word	0x14f8b589

08005394 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	607a      	str	r2, [r7, #4]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	460b      	mov	r3, r1
 80053a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d006      	beq.n	80053be <I2C_MasterRequestWrite+0x2a>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d003      	beq.n	80053be <I2C_MasterRequestWrite+0x2a>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053bc:	d108      	bne.n	80053d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	e00b      	b.n	80053e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	2b12      	cmp	r3, #18
 80053d6:	d107      	bne.n	80053e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f9cd 	bl	8005794 <I2C_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00d      	beq.n	800541c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800540e:	d103      	bne.n	8005418 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005416:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e035      	b.n	8005488 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005424:	d108      	bne.n	8005438 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005426:	897b      	ldrh	r3, [r7, #10]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	461a      	mov	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005434:	611a      	str	r2, [r3, #16]
 8005436:	e01b      	b.n	8005470 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005438:	897b      	ldrh	r3, [r7, #10]
 800543a:	11db      	asrs	r3, r3, #7
 800543c:	b2db      	uxtb	r3, r3
 800543e:	f003 0306 	and.w	r3, r3, #6
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f063 030f 	orn	r3, r3, #15
 8005448:	b2da      	uxtb	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	490e      	ldr	r1, [pc, #56]	; (8005490 <I2C_MasterRequestWrite+0xfc>)
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fa16 	bl	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e010      	b.n	8005488 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005466:	897b      	ldrh	r3, [r7, #10]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	4907      	ldr	r1, [pc, #28]	; (8005494 <I2C_MasterRequestWrite+0x100>)
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fa06 	bl	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	00010008 	.word	0x00010008
 8005494:	00010002 	.word	0x00010002

08005498 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af02      	add	r7, sp, #8
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	4608      	mov	r0, r1
 80054a2:	4611      	mov	r1, r2
 80054a4:	461a      	mov	r2, r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	817b      	strh	r3, [r7, #10]
 80054aa:	460b      	mov	r3, r1
 80054ac:	813b      	strh	r3, [r7, #8]
 80054ae:	4613      	mov	r3, r2
 80054b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f960 	bl	8005794 <I2C_WaitOnFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e8:	d103      	bne.n	80054f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e05f      	b.n	80055b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054f6:	897b      	ldrh	r3, [r7, #10]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005504:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	6a3a      	ldr	r2, [r7, #32]
 800550a:	492d      	ldr	r1, [pc, #180]	; (80055c0 <I2C_RequestMemoryWrite+0x128>)
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f9bb 	bl	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e04c      	b.n	80055b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005534:	6a39      	ldr	r1, [r7, #32]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fa46 	bl	80059c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00d      	beq.n	800555e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	2b04      	cmp	r3, #4
 8005548:	d107      	bne.n	800555a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005558:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e02b      	b.n	80055b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800555e:	88fb      	ldrh	r3, [r7, #6]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005564:	893b      	ldrh	r3, [r7, #8]
 8005566:	b2da      	uxtb	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	611a      	str	r2, [r3, #16]
 800556e:	e021      	b.n	80055b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005570:	893b      	ldrh	r3, [r7, #8]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	b29b      	uxth	r3, r3
 8005576:	b2da      	uxtb	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800557e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005580:	6a39      	ldr	r1, [r7, #32]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fa20 	bl	80059c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00d      	beq.n	80055aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b04      	cmp	r3, #4
 8005594:	d107      	bne.n	80055a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e005      	b.n	80055b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055aa:	893b      	ldrh	r3, [r7, #8]
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	00010002 	.word	0x00010002

080055c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	4608      	mov	r0, r1
 80055ce:	4611      	mov	r1, r2
 80055d0:	461a      	mov	r2, r3
 80055d2:	4603      	mov	r3, r0
 80055d4:	817b      	strh	r3, [r7, #10]
 80055d6:	460b      	mov	r3, r1
 80055d8:	813b      	strh	r3, [r7, #8]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	2200      	movs	r2, #0
 8005606:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f000 f8c2 	bl	8005794 <I2C_WaitOnFlagUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00d      	beq.n	8005632 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005624:	d103      	bne.n	800562e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800562c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e0aa      	b.n	8005788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005632:	897b      	ldrh	r3, [r7, #10]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005640:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	6a3a      	ldr	r2, [r7, #32]
 8005646:	4952      	ldr	r1, [pc, #328]	; (8005790 <I2C_RequestMemoryRead+0x1cc>)
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f91d 	bl	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e097      	b.n	8005788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800566e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005670:	6a39      	ldr	r1, [r7, #32]
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f9a8 	bl	80059c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00d      	beq.n	800569a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	2b04      	cmp	r3, #4
 8005684:	d107      	bne.n	8005696 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005694:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e076      	b.n	8005788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d105      	bne.n	80056ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056a0:	893b      	ldrh	r3, [r7, #8]
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	611a      	str	r2, [r3, #16]
 80056aa:	e021      	b.n	80056f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056ac:	893b      	ldrh	r3, [r7, #8]
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056bc:	6a39      	ldr	r1, [r7, #32]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f000 f982 	bl	80059c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00d      	beq.n	80056e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d107      	bne.n	80056e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e050      	b.n	8005788 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056e6:	893b      	ldrh	r3, [r7, #8]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f2:	6a39      	ldr	r1, [r7, #32]
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f967 	bl	80059c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00d      	beq.n	800571c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	2b04      	cmp	r3, #4
 8005706:	d107      	bne.n	8005718 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005716:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e035      	b.n	8005788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800572a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	2200      	movs	r2, #0
 8005734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f82b 	bl	8005794 <I2C_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00d      	beq.n	8005760 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005752:	d103      	bne.n	800575c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800575a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e013      	b.n	8005788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005760:	897b      	ldrh	r3, [r7, #10]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f043 0301 	orr.w	r3, r3, #1
 8005768:	b2da      	uxtb	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	6a3a      	ldr	r2, [r7, #32]
 8005774:	4906      	ldr	r1, [pc, #24]	; (8005790 <I2C_RequestMemoryRead+0x1cc>)
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f886 	bl	8005888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	00010002 	.word	0x00010002

08005794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	4613      	mov	r3, r2
 80057a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057a4:	e048      	b.n	8005838 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d044      	beq.n	8005838 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ae:	f7fd fea1 	bl	80034f4 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d302      	bcc.n	80057c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d139      	bne.n	8005838 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	0c1b      	lsrs	r3, r3, #16
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d10d      	bne.n	80057ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	43da      	mvns	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4013      	ands	r3, r2
 80057da:	b29b      	uxth	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bf0c      	ite	eq
 80057e0:	2301      	moveq	r3, #1
 80057e2:	2300      	movne	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	e00c      	b.n	8005804 <I2C_WaitOnFlagUntilTimeout+0x70>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	43da      	mvns	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4013      	ands	r3, r2
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bf0c      	ite	eq
 80057fc:	2301      	moveq	r3, #1
 80057fe:	2300      	movne	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	429a      	cmp	r2, r3
 8005808:	d116      	bne.n	8005838 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e023      	b.n	8005880 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	0c1b      	lsrs	r3, r3, #16
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b01      	cmp	r3, #1
 8005840:	d10d      	bne.n	800585e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	43da      	mvns	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4013      	ands	r3, r2
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	e00c      	b.n	8005878 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	43da      	mvns	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	4013      	ands	r3, r2
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	bf0c      	ite	eq
 8005870:	2301      	moveq	r3, #1
 8005872:	2300      	movne	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	429a      	cmp	r2, r3
 800587c:	d093      	beq.n	80057a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005896:	e071      	b.n	800597c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a6:	d123      	bne.n	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	f043 0204 	orr.w	r2, r3, #4
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e067      	b.n	80059c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d041      	beq.n	800597c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f8:	f7fd fdfc 	bl	80034f4 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d302      	bcc.n	800590e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d136      	bne.n	800597c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	0c1b      	lsrs	r3, r3, #16
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	d10c      	bne.n	8005932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	43da      	mvns	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	bf14      	ite	ne
 800592a:	2301      	movne	r3, #1
 800592c:	2300      	moveq	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	e00b      	b.n	800594a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	43da      	mvns	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	4013      	ands	r3, r2
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	bf14      	ite	ne
 8005944:	2301      	movne	r3, #1
 8005946:	2300      	moveq	r3, #0
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d016      	beq.n	800597c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	f043 0220 	orr.w	r2, r3, #32
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e021      	b.n	80059c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	0c1b      	lsrs	r3, r3, #16
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d10c      	bne.n	80059a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	43da      	mvns	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4013      	ands	r3, r2
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e00b      	b.n	80059b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	43da      	mvns	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4013      	ands	r3, r2
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	bf14      	ite	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	2300      	moveq	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f47f af6d 	bne.w	8005898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059d4:	e034      	b.n	8005a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f8e3 	bl	8005ba2 <I2C_IsAcknowledgeFailed>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e034      	b.n	8005a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d028      	beq.n	8005a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ee:	f7fd fd81 	bl	80034f4 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d302      	bcc.n	8005a04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d11d      	bne.n	8005a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0e:	2b80      	cmp	r3, #128	; 0x80
 8005a10:	d016      	beq.n	8005a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	f043 0220 	orr.w	r2, r3, #32
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e007      	b.n	8005a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4a:	2b80      	cmp	r3, #128	; 0x80
 8005a4c:	d1c3      	bne.n	80059d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a64:	e034      	b.n	8005ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f89b 	bl	8005ba2 <I2C_IsAcknowledgeFailed>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e034      	b.n	8005ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7c:	d028      	beq.n	8005ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7e:	f7fd fd39 	bl	80034f4 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d302      	bcc.n	8005a94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11d      	bne.n	8005ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d016      	beq.n	8005ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	f043 0220 	orr.w	r2, r3, #32
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e007      	b.n	8005ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d1c3      	bne.n	8005a66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005af4:	e049      	b.n	8005b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d119      	bne.n	8005b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0210 	mvn.w	r2, #16
 8005b0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e030      	b.n	8005b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b38:	f7fd fcdc 	bl	80034f4 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d302      	bcc.n	8005b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d11d      	bne.n	8005b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b58:	2b40      	cmp	r3, #64	; 0x40
 8005b5a:	d016      	beq.n	8005b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f043 0220 	orr.w	r2, r3, #32
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e007      	b.n	8005b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d1ae      	bne.n	8005af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb8:	d11b      	bne.n	8005bf2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bc2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f043 0204 	orr.w	r2, r3, #4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr
	...

08005c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e272      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8087 	beq.w	8005d2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c20:	4b92      	ldr	r3, [pc, #584]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f003 030c 	and.w	r3, r3, #12
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d00c      	beq.n	8005c46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c2c:	4b8f      	ldr	r3, [pc, #572]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f003 030c 	and.w	r3, r3, #12
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d112      	bne.n	8005c5e <HAL_RCC_OscConfig+0x5e>
 8005c38:	4b8c      	ldr	r3, [pc, #560]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c44:	d10b      	bne.n	8005c5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c46:	4b89      	ldr	r3, [pc, #548]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d06c      	beq.n	8005d2c <HAL_RCC_OscConfig+0x12c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d168      	bne.n	8005d2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e24c      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c66:	d106      	bne.n	8005c76 <HAL_RCC_OscConfig+0x76>
 8005c68:	4b80      	ldr	r3, [pc, #512]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a7f      	ldr	r2, [pc, #508]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	e02e      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd4>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCC_OscConfig+0x98>
 8005c7e:	4b7b      	ldr	r3, [pc, #492]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a7a      	ldr	r2, [pc, #488]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	4b78      	ldr	r3, [pc, #480]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a77      	ldr	r2, [pc, #476]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	e01d      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd4>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ca0:	d10c      	bne.n	8005cbc <HAL_RCC_OscConfig+0xbc>
 8005ca2:	4b72      	ldr	r3, [pc, #456]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a71      	ldr	r2, [pc, #452]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	4b6f      	ldr	r3, [pc, #444]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a6e      	ldr	r2, [pc, #440]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	e00b      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd4>
 8005cbc:	4b6b      	ldr	r3, [pc, #428]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a6a      	ldr	r2, [pc, #424]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4b68      	ldr	r3, [pc, #416]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a67      	ldr	r2, [pc, #412]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d013      	beq.n	8005d04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cdc:	f7fd fc0a 	bl	80034f4 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ce4:	f7fd fc06 	bl	80034f4 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b64      	cmp	r3, #100	; 0x64
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e200      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf6:	4b5d      	ldr	r3, [pc, #372]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0xe4>
 8005d02:	e014      	b.n	8005d2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d04:	f7fd fbf6 	bl	80034f4 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d0c:	f7fd fbf2 	bl	80034f4 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b64      	cmp	r3, #100	; 0x64
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e1ec      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1e:	4b53      	ldr	r3, [pc, #332]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x10c>
 8005d2a:	e000      	b.n	8005d2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d063      	beq.n	8005e02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d3a:	4b4c      	ldr	r3, [pc, #304]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d46:	4b49      	ldr	r3, [pc, #292]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d11c      	bne.n	8005d8c <HAL_RCC_OscConfig+0x18c>
 8005d52:	4b46      	ldr	r3, [pc, #280]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d116      	bne.n	8005d8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5e:	4b43      	ldr	r3, [pc, #268]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <HAL_RCC_OscConfig+0x176>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d001      	beq.n	8005d76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e1c0      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d76:	4b3d      	ldr	r3, [pc, #244]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4939      	ldr	r1, [pc, #228]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8a:	e03a      	b.n	8005e02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d020      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d94:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <HAL_RCC_OscConfig+0x270>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d9a:	f7fd fbab 	bl	80034f4 <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005da2:	f7fd fba7 	bl	80034f4 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e1a1      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db4:	4b2d      	ldr	r3, [pc, #180]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc0:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	4927      	ldr	r1, [pc, #156]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	600b      	str	r3, [r1, #0]
 8005dd4:	e015      	b.n	8005e02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dd6:	4b26      	ldr	r3, [pc, #152]	; (8005e70 <HAL_RCC_OscConfig+0x270>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fd fb8a 	bl	80034f4 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de4:	f7fd fb86 	bl	80034f4 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e180      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df6:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f0      	bne.n	8005de4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d03a      	beq.n	8005e84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d019      	beq.n	8005e4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e16:	4b17      	ldr	r3, [pc, #92]	; (8005e74 <HAL_RCC_OscConfig+0x274>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e1c:	f7fd fb6a 	bl	80034f4 <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e24:	f7fd fb66 	bl	80034f4 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e160      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <HAL_RCC_OscConfig+0x26c>)
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e42:	2001      	movs	r0, #1
 8005e44:	f000 face 	bl	80063e4 <RCC_Delay>
 8005e48:	e01c      	b.n	8005e84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <HAL_RCC_OscConfig+0x274>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e50:	f7fd fb50 	bl	80034f4 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e56:	e00f      	b.n	8005e78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e58:	f7fd fb4c 	bl	80034f4 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d908      	bls.n	8005e78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e146      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
 8005e6a:	bf00      	nop
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	42420000 	.word	0x42420000
 8005e74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e78:	4b92      	ldr	r3, [pc, #584]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e9      	bne.n	8005e58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 80a6 	beq.w	8005fde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e92:	2300      	movs	r3, #0
 8005e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e96:	4b8b      	ldr	r3, [pc, #556]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10d      	bne.n	8005ebe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea2:	4b88      	ldr	r3, [pc, #544]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	4a87      	ldr	r2, [pc, #540]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eac:	61d3      	str	r3, [r2, #28]
 8005eae:	4b85      	ldr	r3, [pc, #532]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eb6:	60bb      	str	r3, [r7, #8]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ebe:	4b82      	ldr	r3, [pc, #520]	; (80060c8 <HAL_RCC_OscConfig+0x4c8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d118      	bne.n	8005efc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eca:	4b7f      	ldr	r3, [pc, #508]	; (80060c8 <HAL_RCC_OscConfig+0x4c8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a7e      	ldr	r2, [pc, #504]	; (80060c8 <HAL_RCC_OscConfig+0x4c8>)
 8005ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ed6:	f7fd fb0d 	bl	80034f4 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ede:	f7fd fb09 	bl	80034f4 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b64      	cmp	r3, #100	; 0x64
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e103      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef0:	4b75      	ldr	r3, [pc, #468]	; (80060c8 <HAL_RCC_OscConfig+0x4c8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f0      	beq.n	8005ede <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d106      	bne.n	8005f12 <HAL_RCC_OscConfig+0x312>
 8005f04:	4b6f      	ldr	r3, [pc, #444]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	4a6e      	ldr	r2, [pc, #440]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f0a:	f043 0301 	orr.w	r3, r3, #1
 8005f0e:	6213      	str	r3, [r2, #32]
 8005f10:	e02d      	b.n	8005f6e <HAL_RCC_OscConfig+0x36e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCC_OscConfig+0x334>
 8005f1a:	4b6a      	ldr	r3, [pc, #424]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	4a69      	ldr	r2, [pc, #420]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	6213      	str	r3, [r2, #32]
 8005f26:	4b67      	ldr	r3, [pc, #412]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	4a66      	ldr	r2, [pc, #408]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f2c:	f023 0304 	bic.w	r3, r3, #4
 8005f30:	6213      	str	r3, [r2, #32]
 8005f32:	e01c      	b.n	8005f6e <HAL_RCC_OscConfig+0x36e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2b05      	cmp	r3, #5
 8005f3a:	d10c      	bne.n	8005f56 <HAL_RCC_OscConfig+0x356>
 8005f3c:	4b61      	ldr	r3, [pc, #388]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	4a60      	ldr	r2, [pc, #384]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f42:	f043 0304 	orr.w	r3, r3, #4
 8005f46:	6213      	str	r3, [r2, #32]
 8005f48:	4b5e      	ldr	r3, [pc, #376]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	4a5d      	ldr	r2, [pc, #372]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	6213      	str	r3, [r2, #32]
 8005f54:	e00b      	b.n	8005f6e <HAL_RCC_OscConfig+0x36e>
 8005f56:	4b5b      	ldr	r3, [pc, #364]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	4a5a      	ldr	r2, [pc, #360]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f5c:	f023 0301 	bic.w	r3, r3, #1
 8005f60:	6213      	str	r3, [r2, #32]
 8005f62:	4b58      	ldr	r3, [pc, #352]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	4a57      	ldr	r2, [pc, #348]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f68:	f023 0304 	bic.w	r3, r3, #4
 8005f6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d015      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f76:	f7fd fabd 	bl	80034f4 <HAL_GetTick>
 8005f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7c:	e00a      	b.n	8005f94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7e:	f7fd fab9 	bl	80034f4 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e0b1      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f94:	4b4b      	ldr	r3, [pc, #300]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0ee      	beq.n	8005f7e <HAL_RCC_OscConfig+0x37e>
 8005fa0:	e014      	b.n	8005fcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fa2:	f7fd faa7 	bl	80034f4 <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa8:	e00a      	b.n	8005fc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005faa:	f7fd faa3 	bl	80034f4 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e09b      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc0:	4b40      	ldr	r3, [pc, #256]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1ee      	bne.n	8005faa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d105      	bne.n	8005fde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd2:	4b3c      	ldr	r3, [pc, #240]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	4a3b      	ldr	r2, [pc, #236]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 8087 	beq.w	80060f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fe8:	4b36      	ldr	r3, [pc, #216]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f003 030c 	and.w	r3, r3, #12
 8005ff0:	2b08      	cmp	r3, #8
 8005ff2:	d061      	beq.n	80060b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d146      	bne.n	800608a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffc:	4b33      	ldr	r3, [pc, #204]	; (80060cc <HAL_RCC_OscConfig+0x4cc>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006002:	f7fd fa77 	bl	80034f4 <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006008:	e008      	b.n	800601c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800600a:	f7fd fa73 	bl	80034f4 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e06d      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800601c:	4b29      	ldr	r3, [pc, #164]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1f0      	bne.n	800600a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006030:	d108      	bne.n	8006044 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006032:	4b24      	ldr	r3, [pc, #144]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	4921      	ldr	r1, [pc, #132]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8006040:	4313      	orrs	r3, r2
 8006042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006044:	4b1f      	ldr	r3, [pc, #124]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a19      	ldr	r1, [r3, #32]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	430b      	orrs	r3, r1
 8006056:	491b      	ldr	r1, [pc, #108]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 8006058:	4313      	orrs	r3, r2
 800605a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800605c:	4b1b      	ldr	r3, [pc, #108]	; (80060cc <HAL_RCC_OscConfig+0x4cc>)
 800605e:	2201      	movs	r2, #1
 8006060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006062:	f7fd fa47 	bl	80034f4 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800606a:	f7fd fa43 	bl	80034f4 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e03d      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800607c:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0f0      	beq.n	800606a <HAL_RCC_OscConfig+0x46a>
 8006088:	e035      	b.n	80060f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800608a:	4b10      	ldr	r3, [pc, #64]	; (80060cc <HAL_RCC_OscConfig+0x4cc>)
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006090:	f7fd fa30 	bl	80034f4 <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006098:	f7fd fa2c 	bl	80034f4 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e026      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <HAL_RCC_OscConfig+0x4c4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f0      	bne.n	8006098 <HAL_RCC_OscConfig+0x498>
 80060b6:	e01e      	b.n	80060f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	69db      	ldr	r3, [r3, #28]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d107      	bne.n	80060d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e019      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
 80060c4:	40021000 	.word	0x40021000
 80060c8:	40007000 	.word	0x40007000
 80060cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <HAL_RCC_OscConfig+0x500>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d106      	bne.n	80060f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d001      	beq.n	80060f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40021000 	.word	0x40021000

08006104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e0d0      	b.n	80062ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006118:	4b6a      	ldr	r3, [pc, #424]	; (80062c4 <HAL_RCC_ClockConfig+0x1c0>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d910      	bls.n	8006148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006126:	4b67      	ldr	r3, [pc, #412]	; (80062c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 0207 	bic.w	r2, r3, #7
 800612e:	4965      	ldr	r1, [pc, #404]	; (80062c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	4313      	orrs	r3, r2
 8006134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006136:	4b63      	ldr	r3, [pc, #396]	; (80062c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d001      	beq.n	8006148 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e0b8      	b.n	80062ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d020      	beq.n	8006196 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006160:	4b59      	ldr	r3, [pc, #356]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	4a58      	ldr	r2, [pc, #352]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006166:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800616a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b00      	cmp	r3, #0
 8006176:	d005      	beq.n	8006184 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006178:	4b53      	ldr	r3, [pc, #332]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4a52      	ldr	r2, [pc, #328]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 800617e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006182:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006184:	4b50      	ldr	r3, [pc, #320]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	494d      	ldr	r1, [pc, #308]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006192:	4313      	orrs	r3, r2
 8006194:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d040      	beq.n	8006224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d107      	bne.n	80061ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061aa:	4b47      	ldr	r3, [pc, #284]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d115      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e07f      	b.n	80062ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d107      	bne.n	80061d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c2:	4b41      	ldr	r3, [pc, #260]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e073      	b.n	80062ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d2:	4b3d      	ldr	r3, [pc, #244]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e06b      	b.n	80062ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061e2:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f023 0203 	bic.w	r2, r3, #3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4936      	ldr	r1, [pc, #216]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061f4:	f7fd f97e 	bl	80034f4 <HAL_GetTick>
 80061f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061fa:	e00a      	b.n	8006212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061fc:	f7fd f97a 	bl	80034f4 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	f241 3288 	movw	r2, #5000	; 0x1388
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e053      	b.n	80062ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006212:	4b2d      	ldr	r3, [pc, #180]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f003 020c 	and.w	r2, r3, #12
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	429a      	cmp	r2, r3
 8006222:	d1eb      	bne.n	80061fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006224:	4b27      	ldr	r3, [pc, #156]	; (80062c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d210      	bcs.n	8006254 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006232:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 0207 	bic.w	r2, r3, #7
 800623a:	4922      	ldr	r1, [pc, #136]	; (80062c4 <HAL_RCC_ClockConfig+0x1c0>)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006242:	4b20      	ldr	r3, [pc, #128]	; (80062c4 <HAL_RCC_ClockConfig+0x1c0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d001      	beq.n	8006254 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e032      	b.n	80062ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0304 	and.w	r3, r3, #4
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006260:	4b19      	ldr	r3, [pc, #100]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4916      	ldr	r1, [pc, #88]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 800626e:	4313      	orrs	r3, r2
 8006270:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d009      	beq.n	8006292 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800627e:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	490e      	ldr	r1, [pc, #56]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 800628e:	4313      	orrs	r3, r2
 8006290:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006292:	f000 f821 	bl	80062d8 <HAL_RCC_GetSysClockFreq>
 8006296:	4602      	mov	r2, r0
 8006298:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <HAL_RCC_ClockConfig+0x1c4>)
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	091b      	lsrs	r3, r3, #4
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	490a      	ldr	r1, [pc, #40]	; (80062cc <HAL_RCC_ClockConfig+0x1c8>)
 80062a4:	5ccb      	ldrb	r3, [r1, r3]
 80062a6:	fa22 f303 	lsr.w	r3, r2, r3
 80062aa:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <HAL_RCC_ClockConfig+0x1cc>)
 80062ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062ae:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <HAL_RCC_ClockConfig+0x1d0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fd f8dc 	bl	8003470 <HAL_InitTick>

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	40022000 	.word	0x40022000
 80062c8:	40021000 	.word	0x40021000
 80062cc:	0800cddc 	.word	0x0800cddc
 80062d0:	20000070 	.word	0x20000070
 80062d4:	20000074 	.word	0x20000074

080062d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	2300      	movs	r3, #0
 80062e4:	60bb      	str	r3, [r7, #8]
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80062f2:	4b1e      	ldr	r3, [pc, #120]	; (800636c <HAL_RCC_GetSysClockFreq+0x94>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 030c 	and.w	r3, r3, #12
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d002      	beq.n	8006308 <HAL_RCC_GetSysClockFreq+0x30>
 8006302:	2b08      	cmp	r3, #8
 8006304:	d003      	beq.n	800630e <HAL_RCC_GetSysClockFreq+0x36>
 8006306:	e027      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006308:	4b19      	ldr	r3, [pc, #100]	; (8006370 <HAL_RCC_GetSysClockFreq+0x98>)
 800630a:	613b      	str	r3, [r7, #16]
      break;
 800630c:	e027      	b.n	800635e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	0c9b      	lsrs	r3, r3, #18
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	4a17      	ldr	r2, [pc, #92]	; (8006374 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006318:	5cd3      	ldrb	r3, [r2, r3]
 800631a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d010      	beq.n	8006348 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006326:	4b11      	ldr	r3, [pc, #68]	; (800636c <HAL_RCC_GetSysClockFreq+0x94>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	0c5b      	lsrs	r3, r3, #17
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	4a11      	ldr	r2, [pc, #68]	; (8006378 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006332:	5cd3      	ldrb	r3, [r2, r3]
 8006334:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a0d      	ldr	r2, [pc, #52]	; (8006370 <HAL_RCC_GetSysClockFreq+0x98>)
 800633a:	fb03 f202 	mul.w	r2, r3, r2
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	fbb2 f3f3 	udiv	r3, r2, r3
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e004      	b.n	8006352 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a0c      	ldr	r2, [pc, #48]	; (800637c <HAL_RCC_GetSysClockFreq+0xa4>)
 800634c:	fb02 f303 	mul.w	r3, r2, r3
 8006350:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	613b      	str	r3, [r7, #16]
      break;
 8006356:	e002      	b.n	800635e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006358:	4b05      	ldr	r3, [pc, #20]	; (8006370 <HAL_RCC_GetSysClockFreq+0x98>)
 800635a:	613b      	str	r3, [r7, #16]
      break;
 800635c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800635e:	693b      	ldr	r3, [r7, #16]
}
 8006360:	4618      	mov	r0, r3
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	bc80      	pop	{r7}
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40021000 	.word	0x40021000
 8006370:	007a1200 	.word	0x007a1200
 8006374:	0800cdf4 	.word	0x0800cdf4
 8006378:	0800ce04 	.word	0x0800ce04
 800637c:	003d0900 	.word	0x003d0900

08006380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006384:	4b02      	ldr	r3, [pc, #8]	; (8006390 <HAL_RCC_GetHCLKFreq+0x10>)
 8006386:	681b      	ldr	r3, [r3, #0]
}
 8006388:	4618      	mov	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr
 8006390:	20000070 	.word	0x20000070

08006394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006398:	f7ff fff2 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 800639c:	4602      	mov	r2, r0
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	0a1b      	lsrs	r3, r3, #8
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	4903      	ldr	r1, [pc, #12]	; (80063b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063aa:	5ccb      	ldrb	r3, [r1, r3]
 80063ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40021000 	.word	0x40021000
 80063b8:	0800cdec 	.word	0x0800cdec

080063bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063c0:	f7ff ffde 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 80063c4:	4602      	mov	r2, r0
 80063c6:	4b05      	ldr	r3, [pc, #20]	; (80063dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	0adb      	lsrs	r3, r3, #11
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	4903      	ldr	r1, [pc, #12]	; (80063e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063d2:	5ccb      	ldrb	r3, [r1, r3]
 80063d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40021000 	.word	0x40021000
 80063e0:	0800cdec 	.word	0x0800cdec

080063e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <RCC_Delay+0x34>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a0a      	ldr	r2, [pc, #40]	; (800641c <RCC_Delay+0x38>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	0a5b      	lsrs	r3, r3, #9
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	fb02 f303 	mul.w	r3, r2, r3
 80063fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006400:	bf00      	nop
  }
  while (Delay --);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	1e5a      	subs	r2, r3, #1
 8006406:	60fa      	str	r2, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1f9      	bne.n	8006400 <RCC_Delay+0x1c>
}
 800640c:	bf00      	nop
 800640e:	bf00      	nop
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr
 8006418:	20000070 	.word	0x20000070
 800641c:	10624dd3 	.word	0x10624dd3

08006420 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d07d      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800643c:	2300      	movs	r3, #0
 800643e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006440:	4b4f      	ldr	r3, [pc, #316]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10d      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800644c:	4b4c      	ldr	r3, [pc, #304]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	4a4b      	ldr	r2, [pc, #300]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006456:	61d3      	str	r3, [r2, #28]
 8006458:	4b49      	ldr	r3, [pc, #292]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006464:	2301      	movs	r3, #1
 8006466:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006468:	4b46      	ldr	r3, [pc, #280]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006470:	2b00      	cmp	r3, #0
 8006472:	d118      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006474:	4b43      	ldr	r3, [pc, #268]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a42      	ldr	r2, [pc, #264]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800647a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800647e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006480:	f7fd f838 	bl	80034f4 <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006486:	e008      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006488:	f7fd f834 	bl	80034f4 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b64      	cmp	r3, #100	; 0x64
 8006494:	d901      	bls.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e06d      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649a:	4b3a      	ldr	r3, [pc, #232]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f0      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064a6:	4b36      	ldr	r3, [pc, #216]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d02e      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d027      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064c4:	4b2e      	ldr	r3, [pc, #184]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064ce:	4b2e      	ldr	r3, [pc, #184]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064d4:	4b2c      	ldr	r3, [pc, #176]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80064da:	4a29      	ldr	r2, [pc, #164]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d014      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ea:	f7fd f803 	bl	80034f4 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f0:	e00a      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f2:	f7fc ffff 	bl	80034f4 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006500:	4293      	cmp	r3, r2
 8006502:	d901      	bls.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e036      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006508:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0ee      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006514:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	4917      	ldr	r1, [pc, #92]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006522:	4313      	orrs	r3, r2
 8006524:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006526:	7dfb      	ldrb	r3, [r7, #23]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d105      	bne.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800652c:	4b14      	ldr	r3, [pc, #80]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	4a13      	ldr	r2, [pc, #76]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006536:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006544:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	490b      	ldr	r1, [pc, #44]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006552:	4313      	orrs	r3, r2
 8006554:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0310 	and.w	r3, r3, #16
 800655e:	2b00      	cmp	r3, #0
 8006560:	d008      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006562:	4b07      	ldr	r3, [pc, #28]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	4904      	ldr	r1, [pc, #16]	; (8006580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006570:	4313      	orrs	r3, r2
 8006572:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	40021000 	.word	0x40021000
 8006584:	40007000 	.word	0x40007000
 8006588:	42420440 	.word	0x42420440

0800658c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e076      	b.n	800668c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d108      	bne.n	80065b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ae:	d009      	beq.n	80065c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	61da      	str	r2, [r3, #28]
 80065b6:	e005      	b.n	80065c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d106      	bne.n	80065e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7fc fcd0 	bl	8002f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006648:	ea42 0103 	orr.w	r1, r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006650:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	0c1a      	lsrs	r2, r3, #16
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f002 0204 	and.w	r2, r2, #4
 800666a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69da      	ldr	r2, [r3, #28]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800667a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d101      	bne.n	80066b6 <HAL_SPI_Transmit+0x22>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e12d      	b.n	8006912 <HAL_SPI_Transmit+0x27e>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066be:	f7fc ff19 	bl	80034f4 <HAL_GetTick>
 80066c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80066c4:	88fb      	ldrh	r3, [r7, #6]
 80066c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d002      	beq.n	80066da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80066d4:	2302      	movs	r3, #2
 80066d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066d8:	e116      	b.n	8006908 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_SPI_Transmit+0x52>
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d102      	bne.n	80066ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066ea:	e10d      	b.n	8006908 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2203      	movs	r2, #3
 80066f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	88fa      	ldrh	r2, [r7, #6]
 8006704:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	88fa      	ldrh	r2, [r7, #6]
 800670a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006732:	d10f      	bne.n	8006754 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006742:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006752:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675e:	2b40      	cmp	r3, #64	; 0x40
 8006760:	d007      	beq.n	8006772 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006770:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800677a:	d14f      	bne.n	800681c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_SPI_Transmit+0xf6>
 8006784:	8afb      	ldrh	r3, [r7, #22]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d142      	bne.n	8006810 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	881a      	ldrh	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	1c9a      	adds	r2, r3, #2
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067ae:	e02f      	b.n	8006810 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d112      	bne.n	80067e4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	881a      	ldrh	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	1c9a      	adds	r2, r3, #2
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80067e2:	e015      	b.n	8006810 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067e4:	f7fc fe86 	bl	80034f4 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d803      	bhi.n	80067fc <HAL_SPI_Transmit+0x168>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fa:	d102      	bne.n	8006802 <HAL_SPI_Transmit+0x16e>
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800680e:	e07b      	b.n	8006908 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1ca      	bne.n	80067b0 <HAL_SPI_Transmit+0x11c>
 800681a:	e050      	b.n	80068be <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <HAL_SPI_Transmit+0x196>
 8006824:	8afb      	ldrh	r3, [r7, #22]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d144      	bne.n	80068b4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	330c      	adds	r3, #12
 8006834:	7812      	ldrb	r2, [r2, #0]
 8006836:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29a      	uxth	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006850:	e030      	b.n	80068b4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b02      	cmp	r3, #2
 800685e:	d113      	bne.n	8006888 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	330c      	adds	r3, #12
 800686a:	7812      	ldrb	r2, [r2, #0]
 800686c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	86da      	strh	r2, [r3, #54]	; 0x36
 8006886:	e015      	b.n	80068b4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006888:	f7fc fe34 	bl	80034f4 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d803      	bhi.n	80068a0 <HAL_SPI_Transmit+0x20c>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689e:	d102      	bne.n	80068a6 <HAL_SPI_Transmit+0x212>
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80068b2:	e029      	b.n	8006908 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1c9      	bne.n	8006852 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 fbcc 	bl	8007060 <SPI_EndRxTxTransaction>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10a      	bne.n	80068f2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e003      	b.n	8006908 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006910:	7ffb      	ldrb	r3, [r7, #31]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b088      	sub	sp, #32
 800691e:	af02      	add	r7, sp, #8
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	4613      	mov	r3, r2
 8006928:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b01      	cmp	r3, #1
 8006938:	d002      	beq.n	8006940 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800693a:	2302      	movs	r3, #2
 800693c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800693e:	e0fb      	b.n	8006b38 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006948:	d112      	bne.n	8006970 <HAL_SPI_Receive+0x56>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10e      	bne.n	8006970 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2204      	movs	r2, #4
 8006956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800695a:	88fa      	ldrh	r2, [r7, #6]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	4613      	mov	r3, r2
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	68b9      	ldr	r1, [r7, #8]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f8ef 	bl	8006b4a <HAL_SPI_TransmitReceive>
 800696c:	4603      	mov	r3, r0
 800696e:	e0e8      	b.n	8006b42 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_SPI_Receive+0x64>
 800697a:	2302      	movs	r3, #2
 800697c:	e0e1      	b.n	8006b42 <HAL_SPI_Receive+0x228>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006986:	f7fc fdb5 	bl	80034f4 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <HAL_SPI_Receive+0x7e>
 8006992:	88fb      	ldrh	r3, [r7, #6]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d102      	bne.n	800699e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800699c:	e0cc      	b.n	8006b38 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2204      	movs	r2, #4
 80069a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	88fa      	ldrh	r2, [r7, #6]
 80069b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e4:	d10f      	bne.n	8006a06 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	d007      	beq.n	8006a24 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d16a      	bne.n	8006b02 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006a2c:	e032      	b.n	8006a94 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d115      	bne.n	8006a68 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f103 020c 	add.w	r2, r3, #12
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	7812      	ldrb	r2, [r2, #0]
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a66:	e015      	b.n	8006a94 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a68:	f7fc fd44 	bl	80034f4 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d803      	bhi.n	8006a80 <HAL_SPI_Receive+0x166>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7e:	d102      	bne.n	8006a86 <HAL_SPI_Receive+0x16c>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006a92:	e051      	b.n	8006b38 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1c7      	bne.n	8006a2e <HAL_SPI_Receive+0x114>
 8006a9e:	e035      	b.n	8006b0c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d113      	bne.n	8006ad6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	b292      	uxth	r2, r2
 8006aba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	1c9a      	adds	r2, r3, #2
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ad4:	e015      	b.n	8006b02 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ad6:	f7fc fd0d 	bl	80034f4 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d803      	bhi.n	8006aee <HAL_SPI_Receive+0x1d4>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d102      	bne.n	8006af4 <HAL_SPI_Receive+0x1da>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d106      	bne.n	8006b02 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006b00:	e01a      	b.n	8006b38 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1c9      	bne.n	8006aa0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fa53 	bl	8006fbc <SPI_EndRxTransaction>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	75fb      	strb	r3, [r7, #23]
 8006b2e:	e003      	b.n	8006b38 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b08c      	sub	sp, #48	; 0x30
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_SPI_TransmitReceive+0x26>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e198      	b.n	8006ea2 <HAL_SPI_TransmitReceive+0x358>
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b78:	f7fc fcbc 	bl	80034f4 <HAL_GetTick>
 8006b7c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006b8e:	887b      	ldrh	r3, [r7, #2]
 8006b90:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d00f      	beq.n	8006bba <HAL_SPI_TransmitReceive+0x70>
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ba0:	d107      	bne.n	8006bb2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d103      	bne.n	8006bb2 <HAL_SPI_TransmitReceive+0x68>
 8006baa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d003      	beq.n	8006bba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006bb8:	e16d      	b.n	8006e96 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_SPI_TransmitReceive+0x82>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_SPI_TransmitReceive+0x82>
 8006bc6:	887b      	ldrh	r3, [r7, #2]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006bd2:	e160      	b.n	8006e96 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d003      	beq.n	8006be8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2205      	movs	r2, #5
 8006be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	887a      	ldrh	r2, [r7, #2]
 8006bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	887a      	ldrh	r2, [r7, #2]
 8006bfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	887a      	ldrh	r2, [r7, #2]
 8006c0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	887a      	ldrh	r2, [r7, #2]
 8006c10:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d007      	beq.n	8006c3c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c44:	d17c      	bne.n	8006d40 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x10a>
 8006c4e:	8b7b      	ldrh	r3, [r7, #26]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d16a      	bne.n	8006d2a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	881a      	ldrh	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	1c9a      	adds	r2, r3, #2
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c78:	e057      	b.n	8006d2a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d11b      	bne.n	8006cc0 <HAL_SPI_TransmitReceive+0x176>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d016      	beq.n	8006cc0 <HAL_SPI_TransmitReceive+0x176>
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d113      	bne.n	8006cc0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9c:	881a      	ldrh	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca8:	1c9a      	adds	r2, r3, #2
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d119      	bne.n	8006d02 <HAL_SPI_TransmitReceive+0x1b8>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d014      	beq.n	8006d02 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68da      	ldr	r2, [r3, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	b292      	uxth	r2, r2
 8006ce4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	1c9a      	adds	r2, r3, #2
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d02:	f7fc fbf7 	bl	80034f4 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d80b      	bhi.n	8006d2a <HAL_SPI_TransmitReceive+0x1e0>
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d007      	beq.n	8006d2a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006d28:	e0b5      	b.n	8006e96 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1a2      	bne.n	8006c7a <HAL_SPI_TransmitReceive+0x130>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d19d      	bne.n	8006c7a <HAL_SPI_TransmitReceive+0x130>
 8006d3e:	e080      	b.n	8006e42 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <HAL_SPI_TransmitReceive+0x204>
 8006d48:	8b7b      	ldrh	r3, [r7, #26]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d16f      	bne.n	8006e2e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	330c      	adds	r3, #12
 8006d58:	7812      	ldrb	r2, [r2, #0]
 8006d5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d74:	e05b      	b.n	8006e2e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d11c      	bne.n	8006dbe <HAL_SPI_TransmitReceive+0x274>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d017      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0x274>
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d114      	bne.n	8006dbe <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	7812      	ldrb	r2, [r2, #0]
 8006da0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da6:	1c5a      	adds	r2, r3, #1
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d119      	bne.n	8006e00 <HAL_SPI_TransmitReceive+0x2b6>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d014      	beq.n	8006e00 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e00:	f7fc fb78 	bl	80034f4 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d803      	bhi.n	8006e18 <HAL_SPI_TransmitReceive+0x2ce>
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e16:	d102      	bne.n	8006e1e <HAL_SPI_TransmitReceive+0x2d4>
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d107      	bne.n	8006e2e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006e2c:	e033      	b.n	8006e96 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d19e      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x22c>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d199      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 f90a 	bl	8007060 <SPI_EndRxTxTransaction>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d006      	beq.n	8006e60 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006e5e:	e01a      	b.n	8006e96 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e68:	2300      	movs	r3, #0
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e8c:	e003      	b.n	8006e96 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3730      	adds	r7, #48	; 0x30
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ebc:	f7fc fb1a 	bl	80034f4 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	4413      	add	r3, r2
 8006eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ecc:	f7fc fb12 	bl	80034f4 <HAL_GetTick>
 8006ed0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ed2:	4b39      	ldr	r3, [pc, #228]	; (8006fb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	015b      	lsls	r3, r3, #5
 8006ed8:	0d1b      	lsrs	r3, r3, #20
 8006eda:	69fa      	ldr	r2, [r7, #28]
 8006edc:	fb02 f303 	mul.w	r3, r2, r3
 8006ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ee2:	e054      	b.n	8006f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d050      	beq.n	8006f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eec:	f7fc fb02 	bl	80034f4 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d902      	bls.n	8006f02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d13d      	bne.n	8006f7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f1a:	d111      	bne.n	8006f40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f24:	d004      	beq.n	8006f30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f2e:	d107      	bne.n	8006f40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f48:	d10f      	bne.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e017      	b.n	8006fae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689a      	ldr	r2, [r3, #8]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4013      	ands	r3, r2
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d19b      	bne.n	8006ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000070 	.word	0x20000070

08006fbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fd0:	d111      	bne.n	8006ff6 <SPI_EndRxTransaction+0x3a>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fda:	d004      	beq.n	8006fe6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe4:	d107      	bne.n	8006ff6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ff4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ffe:	d117      	bne.n	8007030 <SPI_EndRxTransaction+0x74>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007008:	d112      	bne.n	8007030 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2200      	movs	r2, #0
 8007012:	2101      	movs	r1, #1
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff ff49 	bl	8006eac <SPI_WaitFlagStateUntilTimeout>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01a      	beq.n	8007056 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007024:	f043 0220 	orr.w	r2, r3, #32
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e013      	b.n	8007058 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2200      	movs	r2, #0
 8007038:	2180      	movs	r1, #128	; 0x80
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff ff36 	bl	8006eac <SPI_WaitFlagStateUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	f043 0220 	orr.w	r2, r3, #32
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e000      	b.n	8007058 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	2180      	movs	r1, #128	; 0x80
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff ff18 	bl	8006eac <SPI_WaitFlagStateUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	f043 0220 	orr.w	r2, r3, #32
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e000      	b.n	8007094 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e041      	b.n	8007132 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fb ffa8 	bl	8003018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4619      	mov	r1, r3
 80070da:	4610      	mov	r0, r2
 80070dc:	f000 f992 	bl	8007404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <HAL_TIM_PWM_Start+0x24>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b01      	cmp	r3, #1
 8007156:	bf14      	ite	ne
 8007158:	2301      	movne	r3, #1
 800715a:	2300      	moveq	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	e022      	b.n	80071a6 <HAL_TIM_PWM_Start+0x6a>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2b04      	cmp	r3, #4
 8007164:	d109      	bne.n	800717a <HAL_TIM_PWM_Start+0x3e>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b01      	cmp	r3, #1
 8007170:	bf14      	ite	ne
 8007172:	2301      	movne	r3, #1
 8007174:	2300      	moveq	r3, #0
 8007176:	b2db      	uxtb	r3, r3
 8007178:	e015      	b.n	80071a6 <HAL_TIM_PWM_Start+0x6a>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b08      	cmp	r3, #8
 800717e:	d109      	bne.n	8007194 <HAL_TIM_PWM_Start+0x58>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b01      	cmp	r3, #1
 800718a:	bf14      	ite	ne
 800718c:	2301      	movne	r3, #1
 800718e:	2300      	moveq	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	e008      	b.n	80071a6 <HAL_TIM_PWM_Start+0x6a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b01      	cmp	r3, #1
 800719e:	bf14      	ite	ne
 80071a0:	2301      	movne	r3, #1
 80071a2:	2300      	moveq	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e05e      	b.n	800726c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d104      	bne.n	80071be <HAL_TIM_PWM_Start+0x82>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071bc:	e013      	b.n	80071e6 <HAL_TIM_PWM_Start+0xaa>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d104      	bne.n	80071ce <HAL_TIM_PWM_Start+0x92>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071cc:	e00b      	b.n	80071e6 <HAL_TIM_PWM_Start+0xaa>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d104      	bne.n	80071de <HAL_TIM_PWM_Start+0xa2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071dc:	e003      	b.n	80071e6 <HAL_TIM_PWM_Start+0xaa>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2201      	movs	r2, #1
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 faf2 	bl	80077d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a1e      	ldr	r2, [pc, #120]	; (8007274 <HAL_TIM_PWM_Start+0x138>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d107      	bne.n	800720e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800720c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a18      	ldr	r2, [pc, #96]	; (8007274 <HAL_TIM_PWM_Start+0x138>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00e      	beq.n	8007236 <HAL_TIM_PWM_Start+0xfa>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007220:	d009      	beq.n	8007236 <HAL_TIM_PWM_Start+0xfa>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a14      	ldr	r2, [pc, #80]	; (8007278 <HAL_TIM_PWM_Start+0x13c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d004      	beq.n	8007236 <HAL_TIM_PWM_Start+0xfa>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a12      	ldr	r2, [pc, #72]	; (800727c <HAL_TIM_PWM_Start+0x140>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d111      	bne.n	800725a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2b06      	cmp	r3, #6
 8007246:	d010      	beq.n	800726a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007258:	e007      	b.n	800726a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0201 	orr.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40012c00 	.word	0x40012c00
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800

08007280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800729a:	2302      	movs	r3, #2
 800729c:	e0ae      	b.n	80073fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b0c      	cmp	r3, #12
 80072aa:	f200 809f 	bhi.w	80073ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072ae:	a201      	add	r2, pc, #4	; (adr r2, 80072b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b4:	080072e9 	.word	0x080072e9
 80072b8:	080073ed 	.word	0x080073ed
 80072bc:	080073ed 	.word	0x080073ed
 80072c0:	080073ed 	.word	0x080073ed
 80072c4:	08007329 	.word	0x08007329
 80072c8:	080073ed 	.word	0x080073ed
 80072cc:	080073ed 	.word	0x080073ed
 80072d0:	080073ed 	.word	0x080073ed
 80072d4:	0800736b 	.word	0x0800736b
 80072d8:	080073ed 	.word	0x080073ed
 80072dc:	080073ed 	.word	0x080073ed
 80072e0:	080073ed 	.word	0x080073ed
 80072e4:	080073ab 	.word	0x080073ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 f8ea 	bl	80074c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0208 	orr.w	r2, r2, #8
 8007302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0204 	bic.w	r2, r2, #4
 8007312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6999      	ldr	r1, [r3, #24]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	691a      	ldr	r2, [r3, #16]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	619a      	str	r2, [r3, #24]
      break;
 8007326:	e064      	b.n	80073f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68b9      	ldr	r1, [r7, #8]
 800732e:	4618      	mov	r0, r3
 8007330:	f000 f930 	bl	8007594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6999      	ldr	r1, [r3, #24]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	021a      	lsls	r2, r3, #8
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	619a      	str	r2, [r3, #24]
      break;
 8007368:	e043      	b.n	80073f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	4618      	mov	r0, r3
 8007372:	f000 f979 	bl	8007668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69da      	ldr	r2, [r3, #28]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f042 0208 	orr.w	r2, r2, #8
 8007384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0204 	bic.w	r2, r2, #4
 8007394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69d9      	ldr	r1, [r3, #28]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	691a      	ldr	r2, [r3, #16]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	61da      	str	r2, [r3, #28]
      break;
 80073a8:	e023      	b.n	80073f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68b9      	ldr	r1, [r7, #8]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 f9c3 	bl	800773c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69da      	ldr	r2, [r3, #28]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69d9      	ldr	r1, [r3, #28]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	021a      	lsls	r2, r3, #8
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	61da      	str	r2, [r3, #28]
      break;
 80073ea:	e002      	b.n	80073f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	75fb      	strb	r3, [r7, #23]
      break;
 80073f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3718      	adds	r7, #24
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a29      	ldr	r2, [pc, #164]	; (80074bc <TIM_Base_SetConfig+0xb8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00b      	beq.n	8007434 <TIM_Base_SetConfig+0x30>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007422:	d007      	beq.n	8007434 <TIM_Base_SetConfig+0x30>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a26      	ldr	r2, [pc, #152]	; (80074c0 <TIM_Base_SetConfig+0xbc>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d003      	beq.n	8007434 <TIM_Base_SetConfig+0x30>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a25      	ldr	r2, [pc, #148]	; (80074c4 <TIM_Base_SetConfig+0xc0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d108      	bne.n	8007446 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a1c      	ldr	r2, [pc, #112]	; (80074bc <TIM_Base_SetConfig+0xb8>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00b      	beq.n	8007466 <TIM_Base_SetConfig+0x62>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007454:	d007      	beq.n	8007466 <TIM_Base_SetConfig+0x62>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a19      	ldr	r2, [pc, #100]	; (80074c0 <TIM_Base_SetConfig+0xbc>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <TIM_Base_SetConfig+0x62>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <TIM_Base_SetConfig+0xc0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d108      	bne.n	8007478 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800746c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a07      	ldr	r2, [pc, #28]	; (80074bc <TIM_Base_SetConfig+0xb8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d103      	bne.n	80074ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	691a      	ldr	r2, [r3, #16]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	615a      	str	r2, [r3, #20]
}
 80074b2:	bf00      	nop
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr
 80074bc:	40012c00 	.word	0x40012c00
 80074c0:	40000400 	.word	0x40000400
 80074c4:	40000800 	.word	0x40000800

080074c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f023 0201 	bic.w	r2, r3, #1
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0303 	bic.w	r3, r3, #3
 80074fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f023 0302 	bic.w	r3, r3, #2
 8007510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	4313      	orrs	r3, r2
 800751a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a1c      	ldr	r2, [pc, #112]	; (8007590 <TIM_OC1_SetConfig+0xc8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d10c      	bne.n	800753e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f023 0308 	bic.w	r3, r3, #8
 800752a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	697a      	ldr	r2, [r7, #20]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f023 0304 	bic.w	r3, r3, #4
 800753c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a13      	ldr	r2, [pc, #76]	; (8007590 <TIM_OC1_SetConfig+0xc8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d111      	bne.n	800756a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800754c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4313      	orrs	r3, r2
 800755e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4313      	orrs	r3, r2
 8007568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	621a      	str	r2, [r3, #32]
}
 8007584:	bf00      	nop
 8007586:	371c      	adds	r7, #28
 8007588:	46bd      	mov	sp, r7
 800758a:	bc80      	pop	{r7}
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40012c00 	.word	0x40012c00

08007594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	f023 0210 	bic.w	r2, r3, #16
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0320 	bic.w	r3, r3, #32
 80075de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <TIM_OC2_SetConfig+0xd0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d10d      	bne.n	8007610 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4313      	orrs	r3, r2
 8007606:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a14      	ldr	r2, [pc, #80]	; (8007664 <TIM_OC2_SetConfig+0xd0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d113      	bne.n	8007640 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800761e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	4313      	orrs	r3, r2
 8007632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	4313      	orrs	r3, r2
 800763e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	621a      	str	r2, [r3, #32]
}
 800765a:	bf00      	nop
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr
 8007664:	40012c00 	.word	0x40012c00

08007668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f023 0303 	bic.w	r3, r3, #3
 800769e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	021b      	lsls	r3, r3, #8
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a1d      	ldr	r2, [pc, #116]	; (8007738 <TIM_OC3_SetConfig+0xd0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d10d      	bne.n	80076e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a14      	ldr	r2, [pc, #80]	; (8007738 <TIM_OC3_SetConfig+0xd0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d113      	bne.n	8007712 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	4313      	orrs	r3, r2
 8007704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	621a      	str	r2, [r3, #32]
}
 800772c:	bf00      	nop
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40012c00 	.word	0x40012c00

0800773c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	021b      	lsls	r3, r3, #8
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	4313      	orrs	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	031b      	lsls	r3, r3, #12
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4313      	orrs	r3, r2
 8007792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a0f      	ldr	r2, [pc, #60]	; (80077d4 <TIM_OC4_SetConfig+0x98>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d109      	bne.n	80077b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	019b      	lsls	r3, r3, #6
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr
 80077d4:	40012c00 	.word	0x40012c00

080077d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f003 031f 	and.w	r3, r3, #31
 80077ea:	2201      	movs	r2, #1
 80077ec:	fa02 f303 	lsl.w	r3, r2, r3
 80077f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6a1a      	ldr	r2, [r3, #32]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	43db      	mvns	r3, r3
 80077fa:	401a      	ands	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6a1a      	ldr	r2, [r3, #32]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	fa01 f303 	lsl.w	r3, r1, r3
 8007810:	431a      	orrs	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	621a      	str	r2, [r3, #32]
}
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007834:	2302      	movs	r3, #2
 8007836:	e046      	b.n	80078c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a16      	ldr	r2, [pc, #88]	; (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00e      	beq.n	800789a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007884:	d009      	beq.n	800789a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a12      	ldr	r2, [pc, #72]	; (80078d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d004      	beq.n	800789a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a10      	ldr	r2, [pc, #64]	; (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d10c      	bne.n	80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr
 80078d0:	40012c00 	.word	0x40012c00
 80078d4:	40000400 	.word	0x40000400
 80078d8:	40000800 	.word	0x40000800

080078dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e03d      	b.n	8007974 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4313      	orrs	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr

0800797e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e042      	b.n	8007a16 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d106      	bne.n	80079aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7fb fbcf 	bl	8003148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2224      	movs	r2, #36	; 0x24
 80079ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fd70 	bl	80084a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	691a      	ldr	r2, [r3, #16]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695a      	ldr	r2, [r3, #20]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68da      	ldr	r2, [r3, #12]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b08a      	sub	sp, #40	; 0x28
 8007a22:	af02      	add	r7, sp, #8
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	603b      	str	r3, [r7, #0]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d16d      	bne.n	8007b1a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_UART_Transmit+0x2c>
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e066      	b.n	8007b1c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2221      	movs	r2, #33	; 0x21
 8007a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a5c:	f7fb fd4a 	bl	80034f4 <HAL_GetTick>
 8007a60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	88fa      	ldrh	r2, [r7, #6]
 8007a66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	88fa      	ldrh	r2, [r7, #6]
 8007a6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a76:	d108      	bne.n	8007a8a <HAL_UART_Transmit+0x6c>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a80:	2300      	movs	r3, #0
 8007a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	61bb      	str	r3, [r7, #24]
 8007a88:	e003      	b.n	8007a92 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a92:	e02a      	b.n	8007aea <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2180      	movs	r1, #128	; 0x80
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 faf8 	bl	8008094 <UART_WaitOnFlagUntilTimeout>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e036      	b.n	8007b1c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10b      	bne.n	8007acc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	881b      	ldrh	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ac2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	3302      	adds	r3, #2
 8007ac8:	61bb      	str	r3, [r7, #24]
 8007aca:	e007      	b.n	8007adc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	781a      	ldrb	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1cf      	bne.n	8007a94 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2200      	movs	r2, #0
 8007afc:	2140      	movs	r1, #64	; 0x40
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 fac8 	bl	8008094 <UART_WaitOnFlagUntilTimeout>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e006      	b.n	8007b1c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	e000      	b.n	8007b1c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007b1a:	2302      	movs	r3, #2
  }
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3720      	adds	r7, #32
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b0ba      	sub	sp, #232	; 0xe8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10f      	bne.n	8007b8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <HAL_UART_IRQHandler+0x66>
 8007b76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fbd1 	bl	800832a <UART_Receive_IT>
      return;
 8007b88:	e25b      	b.n	8008042 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 80de 	beq.w	8007d50 <HAL_UART_IRQHandler+0x22c>
 8007b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d106      	bne.n	8007bae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 80d1 	beq.w	8007d50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00b      	beq.n	8007bd2 <HAL_UART_IRQHandler+0xae>
 8007bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bca:	f043 0201 	orr.w	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd6:	f003 0304 	and.w	r3, r3, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <HAL_UART_IRQHandler+0xd2>
 8007bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d005      	beq.n	8007bf6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bee:	f043 0202 	orr.w	r2, r3, #2
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00b      	beq.n	8007c1a <HAL_UART_IRQHandler+0xf6>
 8007c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d005      	beq.n	8007c1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c12:	f043 0204 	orr.w	r2, r3, #4
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d011      	beq.n	8007c4a <HAL_UART_IRQHandler+0x126>
 8007c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d105      	bne.n	8007c3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d005      	beq.n	8007c4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c42:	f043 0208 	orr.w	r2, r3, #8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 81f2 	beq.w	8008038 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c58:	f003 0320 	and.w	r3, r3, #32
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d008      	beq.n	8007c72 <HAL_UART_IRQHandler+0x14e>
 8007c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c64:	f003 0320 	and.w	r3, r3, #32
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fb5c 	bl	800832a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bf14      	ite	ne
 8007c80:	2301      	movne	r3, #1
 8007c82:	2300      	moveq	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8e:	f003 0308 	and.w	r3, r3, #8
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d103      	bne.n	8007c9e <HAL_UART_IRQHandler+0x17a>
 8007c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d04f      	beq.n	8007d3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa66 	bl	8008170 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d041      	beq.n	8007d36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3314      	adds	r3, #20
 8007cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3314      	adds	r3, #20
 8007cda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1d9      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d013      	beq.n	8007d2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0a:	4a7e      	ldr	r2, [pc, #504]	; (8007f04 <HAL_UART_IRQHandler+0x3e0>)
 8007d0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fc fa38 	bl	8004188 <HAL_DMA_Abort_IT>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d016      	beq.n	8007d4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d2c:	e00e      	b.n	8007d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f99c 	bl	800806c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d34:	e00a      	b.n	8007d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f998 	bl	800806c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d3c:	e006      	b.n	8007d4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f994 	bl	800806c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007d4a:	e175      	b.n	8008038 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d4c:	bf00      	nop
    return;
 8007d4e:	e173      	b.n	8008038 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	f040 814f 	bne.w	8007ff8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d5e:	f003 0310 	and.w	r3, r3, #16
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 8148 	beq.w	8007ff8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d6c:	f003 0310 	and.w	r3, r3, #16
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 8141 	beq.w	8007ff8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d76:	2300      	movs	r3, #0
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60bb      	str	r3, [r7, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	60bb      	str	r3, [r7, #8]
 8007d8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 80b6 	beq.w	8007f08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007da8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 8145 	beq.w	800803c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	f080 813e 	bcs.w	800803c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	f000 8088 	beq.w	8007ee4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	330c      	adds	r3, #12
 8007dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007df2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	330c      	adds	r3, #12
 8007dfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007e00:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e10:	e841 2300 	strex	r3, r2, [r1]
 8007e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1d9      	bne.n	8007dd4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3314      	adds	r3, #20
 8007e26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e32:	f023 0301 	bic.w	r3, r3, #1
 8007e36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3314      	adds	r3, #20
 8007e40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e1      	bne.n	8007e20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3314      	adds	r3, #20
 8007e62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e66:	e853 3f00 	ldrex	r3, [r3]
 8007e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3314      	adds	r3, #20
 8007e7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e3      	bne.n	8007e5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	330c      	adds	r3, #12
 8007ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eb4:	f023 0310 	bic.w	r3, r3, #16
 8007eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	330c      	adds	r3, #12
 8007ec2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ec6:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ec8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ecc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e3      	bne.n	8007ea2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fc f916 	bl	8004110 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f8bf 	bl	800807e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f00:	e09c      	b.n	800803c <HAL_UART_IRQHandler+0x518>
 8007f02:	bf00      	nop
 8007f04:	08008235 	.word	0x08008235
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 808e 	beq.w	8008040 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007f24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 8089 	beq.w	8008040 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	330c      	adds	r3, #12
 8007f34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	330c      	adds	r3, #12
 8007f4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f52:	647a      	str	r2, [r7, #68]	; 0x44
 8007f54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e3      	bne.n	8007f2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3314      	adds	r3, #20
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	623b      	str	r3, [r7, #32]
   return(result);
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	f023 0301 	bic.w	r3, r3, #1
 8007f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3314      	adds	r3, #20
 8007f86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f8a:	633a      	str	r2, [r7, #48]	; 0x30
 8007f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e3      	bne.n	8007f66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	330c      	adds	r3, #12
 8007fb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f023 0310 	bic.w	r3, r3, #16
 8007fc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	330c      	adds	r3, #12
 8007fcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007fd0:	61fa      	str	r2, [r7, #28]
 8007fd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	69b9      	ldr	r1, [r7, #24]
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e3      	bne.n	8007fac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f844 	bl	800807e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ff6:	e023      	b.n	8008040 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008000:	2b00      	cmp	r3, #0
 8008002:	d009      	beq.n	8008018 <HAL_UART_IRQHandler+0x4f4>
 8008004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f923 	bl	800825c <UART_Transmit_IT>
    return;
 8008016:	e014      	b.n	8008042 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00e      	beq.n	8008042 <HAL_UART_IRQHandler+0x51e>
 8008024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	d008      	beq.n	8008042 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f962 	bl	80082fa <UART_EndTransmit_IT>
    return;
 8008036:	e004      	b.n	8008042 <HAL_UART_IRQHandler+0x51e>
    return;
 8008038:	bf00      	nop
 800803a:	e002      	b.n	8008042 <HAL_UART_IRQHandler+0x51e>
      return;
 800803c:	bf00      	nop
 800803e:	e000      	b.n	8008042 <HAL_UART_IRQHandler+0x51e>
      return;
 8008040:	bf00      	nop
  }
}
 8008042:	37e8      	adds	r7, #232	; 0xe8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr

0800805a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008062:	bf00      	nop
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	bc80      	pop	{r7}
 800806a:	4770      	bx	lr

0800806c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr

0800807e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr

08008094 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b090      	sub	sp, #64	; 0x40
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	4613      	mov	r3, r2
 80080a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a4:	e050      	b.n	8008148 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ac:	d04c      	beq.n	8008148 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d007      	beq.n	80080c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80080b4:	f7fb fa1e 	bl	80034f4 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d241      	bcs.n	8008148 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	330c      	adds	r3, #12
 80080ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	330c      	adds	r3, #12
 80080e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080e4:	637a      	str	r2, [r7, #52]	; 0x34
 80080e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e5      	bne.n	80080c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3314      	adds	r3, #20
 80080fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	e853 3f00 	ldrex	r3, [r3]
 8008106:	613b      	str	r3, [r7, #16]
   return(result);
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f023 0301 	bic.w	r3, r3, #1
 800810e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3314      	adds	r3, #20
 8008116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008118:	623a      	str	r2, [r7, #32]
 800811a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	69f9      	ldr	r1, [r7, #28]
 800811e:	6a3a      	ldr	r2, [r7, #32]
 8008120:	e841 2300 	strex	r3, r2, [r1]
 8008124:	61bb      	str	r3, [r7, #24]
   return(result);
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e5      	bne.n	80080f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2220      	movs	r2, #32
 8008130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e00f      	b.n	8008168 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	4013      	ands	r3, r2
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	429a      	cmp	r2, r3
 8008156:	bf0c      	ite	eq
 8008158:	2301      	moveq	r3, #1
 800815a:	2300      	movne	r3, #0
 800815c:	b2db      	uxtb	r3, r3
 800815e:	461a      	mov	r2, r3
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	429a      	cmp	r2, r3
 8008164:	d09f      	beq.n	80080a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3740      	adds	r7, #64	; 0x40
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008170:	b480      	push	{r7}
 8008172:	b095      	sub	sp, #84	; 0x54
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	330c      	adds	r3, #12
 800817e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800818e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	330c      	adds	r3, #12
 8008196:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008198:	643a      	str	r2, [r7, #64]	; 0x40
 800819a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800819e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e5      	bne.n	8008178 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	3314      	adds	r3, #20
 80081b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	e853 3f00 	ldrex	r3, [r3]
 80081ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f023 0301 	bic.w	r3, r3, #1
 80081c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3314      	adds	r3, #20
 80081ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d4:	e841 2300 	strex	r3, r2, [r1]
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e5      	bne.n	80081ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d119      	bne.n	800821c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	330c      	adds	r3, #12
 80081ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	e853 3f00 	ldrex	r3, [r3]
 80081f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f023 0310 	bic.w	r3, r3, #16
 80081fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	330c      	adds	r3, #12
 8008206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008208:	61ba      	str	r2, [r7, #24]
 800820a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	6979      	ldr	r1, [r7, #20]
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	613b      	str	r3, [r7, #16]
   return(result);
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e5      	bne.n	80081e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	631a      	str	r2, [r3, #48]	; 0x30
}
 800822a:	bf00      	nop
 800822c:	3754      	adds	r7, #84	; 0x54
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr

08008234 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff ff0c 	bl	800806c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b21      	cmp	r3, #33	; 0x21
 800826e:	d13e      	bne.n	80082ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008278:	d114      	bne.n	80082a4 <UART_Transmit_IT+0x48>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d110      	bne.n	80082a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008296:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	1c9a      	adds	r2, r3, #2
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	621a      	str	r2, [r3, #32]
 80082a2:	e008      	b.n	80082b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	1c59      	adds	r1, r3, #1
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6211      	str	r1, [r2, #32]
 80082ae:	781a      	ldrb	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	3b01      	subs	r3, #1
 80082be:	b29b      	uxth	r3, r3
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	4619      	mov	r1, r3
 80082c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10f      	bne.n	80082ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68da      	ldr	r2, [r3, #12]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	e000      	b.n	80082f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082ee:	2302      	movs	r3, #2
  }
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bc80      	pop	{r7}
 80082f8:	4770      	bx	lr

080082fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b082      	sub	sp, #8
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008310:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2220      	movs	r2, #32
 8008316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f7ff fe94 	bl	8008048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b08c      	sub	sp, #48	; 0x30
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b22      	cmp	r3, #34	; 0x22
 800833c:	f040 80ae 	bne.w	800849c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008348:	d117      	bne.n	800837a <UART_Receive_IT+0x50>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d113      	bne.n	800837a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008352:	2300      	movs	r3, #0
 8008354:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	b29b      	uxth	r3, r3
 8008364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008368:	b29a      	uxth	r2, r3
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008372:	1c9a      	adds	r2, r3, #2
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	629a      	str	r2, [r3, #40]	; 0x28
 8008378:	e026      	b.n	80083c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008380:	2300      	movs	r3, #0
 8008382:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800838c:	d007      	beq.n	800839e <UART_Receive_IT+0x74>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10a      	bne.n	80083ac <UART_Receive_IT+0x82>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	e008      	b.n	80083be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	3b01      	subs	r3, #1
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	4619      	mov	r1, r3
 80083d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d15d      	bne.n	8008498 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68da      	ldr	r2, [r3, #12]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0220 	bic.w	r2, r2, #32
 80083ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	695a      	ldr	r2, [r3, #20]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0201 	bic.w	r2, r2, #1
 800840a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2220      	movs	r2, #32
 8008410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841e:	2b01      	cmp	r3, #1
 8008420:	d135      	bne.n	800848e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	330c      	adds	r3, #12
 800842e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	613b      	str	r3, [r7, #16]
   return(result);
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f023 0310 	bic.w	r3, r3, #16
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	330c      	adds	r3, #12
 8008446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008448:	623a      	str	r2, [r7, #32]
 800844a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	69f9      	ldr	r1, [r7, #28]
 800844e:	6a3a      	ldr	r2, [r7, #32]
 8008450:	e841 2300 	strex	r3, r2, [r1]
 8008454:	61bb      	str	r3, [r7, #24]
   return(result);
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e5      	bne.n	8008428 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0310 	and.w	r3, r3, #16
 8008466:	2b10      	cmp	r3, #16
 8008468:	d10a      	bne.n	8008480 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7ff fdf9 	bl	800807e <HAL_UARTEx_RxEventCallback>
 800848c:	e002      	b.n	8008494 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7ff fde3 	bl	800805a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	e002      	b.n	800849e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	e000      	b.n	800849e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800849c:	2302      	movs	r3, #2
  }
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3730      	adds	r7, #48	; 0x30
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689a      	ldr	r2, [r3, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	431a      	orrs	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80084e2:	f023 030c 	bic.w	r3, r3, #12
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	68b9      	ldr	r1, [r7, #8]
 80084ec:	430b      	orrs	r3, r1
 80084ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699a      	ldr	r2, [r3, #24]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a2c      	ldr	r2, [pc, #176]	; (80085bc <UART_SetConfig+0x114>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d103      	bne.n	8008518 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008510:	f7fd ff54 	bl	80063bc <HAL_RCC_GetPCLK2Freq>
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	e002      	b.n	800851e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008518:	f7fd ff3c 	bl	8006394 <HAL_RCC_GetPCLK1Freq>
 800851c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009a      	lsls	r2, r3, #2
 8008528:	441a      	add	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	fbb2 f3f3 	udiv	r3, r2, r3
 8008534:	4a22      	ldr	r2, [pc, #136]	; (80085c0 <UART_SetConfig+0x118>)
 8008536:	fba2 2303 	umull	r2, r3, r2, r3
 800853a:	095b      	lsrs	r3, r3, #5
 800853c:	0119      	lsls	r1, r3, #4
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	4613      	mov	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	009a      	lsls	r2, r3, #2
 8008548:	441a      	add	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	fbb2 f2f3 	udiv	r2, r2, r3
 8008554:	4b1a      	ldr	r3, [pc, #104]	; (80085c0 <UART_SetConfig+0x118>)
 8008556:	fba3 0302 	umull	r0, r3, r3, r2
 800855a:	095b      	lsrs	r3, r3, #5
 800855c:	2064      	movs	r0, #100	; 0x64
 800855e:	fb00 f303 	mul.w	r3, r0, r3
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	3332      	adds	r3, #50	; 0x32
 8008568:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <UART_SetConfig+0x118>)
 800856a:	fba2 2303 	umull	r2, r3, r2, r3
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008574:	4419      	add	r1, r3
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009a      	lsls	r2, r3, #2
 8008580:	441a      	add	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	fbb2 f2f3 	udiv	r2, r2, r3
 800858c:	4b0c      	ldr	r3, [pc, #48]	; (80085c0 <UART_SetConfig+0x118>)
 800858e:	fba3 0302 	umull	r0, r3, r3, r2
 8008592:	095b      	lsrs	r3, r3, #5
 8008594:	2064      	movs	r0, #100	; 0x64
 8008596:	fb00 f303 	mul.w	r3, r0, r3
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	011b      	lsls	r3, r3, #4
 800859e:	3332      	adds	r3, #50	; 0x32
 80085a0:	4a07      	ldr	r2, [pc, #28]	; (80085c0 <UART_SetConfig+0x118>)
 80085a2:	fba2 2303 	umull	r2, r3, r2, r3
 80085a6:	095b      	lsrs	r3, r3, #5
 80085a8:	f003 020f 	and.w	r2, r3, #15
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	440a      	add	r2, r1
 80085b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80085b4:	bf00      	nop
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	40013800 	.word	0x40013800
 80085c0:	51eb851f 	.word	0x51eb851f

080085c4 <atoi>:
 80085c4:	220a      	movs	r2, #10
 80085c6:	2100      	movs	r1, #0
 80085c8:	f000 b87e 	b.w	80086c8 <strtol>

080085cc <_strtol_l.constprop.0>:
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085d2:	4686      	mov	lr, r0
 80085d4:	4690      	mov	r8, r2
 80085d6:	d001      	beq.n	80085dc <_strtol_l.constprop.0+0x10>
 80085d8:	2b24      	cmp	r3, #36	; 0x24
 80085da:	d906      	bls.n	80085ea <_strtol_l.constprop.0+0x1e>
 80085dc:	f000 fe54 	bl	8009288 <__errno>
 80085e0:	2316      	movs	r3, #22
 80085e2:	6003      	str	r3, [r0, #0]
 80085e4:	2000      	movs	r0, #0
 80085e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ea:	460d      	mov	r5, r1
 80085ec:	4835      	ldr	r0, [pc, #212]	; (80086c4 <_strtol_l.constprop.0+0xf8>)
 80085ee:	462a      	mov	r2, r5
 80085f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085f4:	5d06      	ldrb	r6, [r0, r4]
 80085f6:	f016 0608 	ands.w	r6, r6, #8
 80085fa:	d1f8      	bne.n	80085ee <_strtol_l.constprop.0+0x22>
 80085fc:	2c2d      	cmp	r4, #45	; 0x2d
 80085fe:	d12e      	bne.n	800865e <_strtol_l.constprop.0+0x92>
 8008600:	2601      	movs	r6, #1
 8008602:	782c      	ldrb	r4, [r5, #0]
 8008604:	1c95      	adds	r5, r2, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d057      	beq.n	80086ba <_strtol_l.constprop.0+0xee>
 800860a:	2b10      	cmp	r3, #16
 800860c:	d109      	bne.n	8008622 <_strtol_l.constprop.0+0x56>
 800860e:	2c30      	cmp	r4, #48	; 0x30
 8008610:	d107      	bne.n	8008622 <_strtol_l.constprop.0+0x56>
 8008612:	782a      	ldrb	r2, [r5, #0]
 8008614:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008618:	2a58      	cmp	r2, #88	; 0x58
 800861a:	d149      	bne.n	80086b0 <_strtol_l.constprop.0+0xe4>
 800861c:	2310      	movs	r3, #16
 800861e:	786c      	ldrb	r4, [r5, #1]
 8008620:	3502      	adds	r5, #2
 8008622:	2200      	movs	r2, #0
 8008624:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008628:	f10c 3cff 	add.w	ip, ip, #4294967295
 800862c:	fbbc f9f3 	udiv	r9, ip, r3
 8008630:	4610      	mov	r0, r2
 8008632:	fb03 ca19 	mls	sl, r3, r9, ip
 8008636:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800863a:	2f09      	cmp	r7, #9
 800863c:	d814      	bhi.n	8008668 <_strtol_l.constprop.0+0x9c>
 800863e:	463c      	mov	r4, r7
 8008640:	42a3      	cmp	r3, r4
 8008642:	dd20      	ble.n	8008686 <_strtol_l.constprop.0+0xba>
 8008644:	1c57      	adds	r7, r2, #1
 8008646:	d007      	beq.n	8008658 <_strtol_l.constprop.0+0x8c>
 8008648:	4581      	cmp	r9, r0
 800864a:	d319      	bcc.n	8008680 <_strtol_l.constprop.0+0xb4>
 800864c:	d101      	bne.n	8008652 <_strtol_l.constprop.0+0x86>
 800864e:	45a2      	cmp	sl, r4
 8008650:	db16      	blt.n	8008680 <_strtol_l.constprop.0+0xb4>
 8008652:	2201      	movs	r2, #1
 8008654:	fb00 4003 	mla	r0, r0, r3, r4
 8008658:	f815 4b01 	ldrb.w	r4, [r5], #1
 800865c:	e7eb      	b.n	8008636 <_strtol_l.constprop.0+0x6a>
 800865e:	2c2b      	cmp	r4, #43	; 0x2b
 8008660:	bf04      	itt	eq
 8008662:	782c      	ldrbeq	r4, [r5, #0]
 8008664:	1c95      	addeq	r5, r2, #2
 8008666:	e7ce      	b.n	8008606 <_strtol_l.constprop.0+0x3a>
 8008668:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800866c:	2f19      	cmp	r7, #25
 800866e:	d801      	bhi.n	8008674 <_strtol_l.constprop.0+0xa8>
 8008670:	3c37      	subs	r4, #55	; 0x37
 8008672:	e7e5      	b.n	8008640 <_strtol_l.constprop.0+0x74>
 8008674:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008678:	2f19      	cmp	r7, #25
 800867a:	d804      	bhi.n	8008686 <_strtol_l.constprop.0+0xba>
 800867c:	3c57      	subs	r4, #87	; 0x57
 800867e:	e7df      	b.n	8008640 <_strtol_l.constprop.0+0x74>
 8008680:	f04f 32ff 	mov.w	r2, #4294967295
 8008684:	e7e8      	b.n	8008658 <_strtol_l.constprop.0+0x8c>
 8008686:	1c53      	adds	r3, r2, #1
 8008688:	d108      	bne.n	800869c <_strtol_l.constprop.0+0xd0>
 800868a:	2322      	movs	r3, #34	; 0x22
 800868c:	4660      	mov	r0, ip
 800868e:	f8ce 3000 	str.w	r3, [lr]
 8008692:	f1b8 0f00 	cmp.w	r8, #0
 8008696:	d0a6      	beq.n	80085e6 <_strtol_l.constprop.0+0x1a>
 8008698:	1e69      	subs	r1, r5, #1
 800869a:	e006      	b.n	80086aa <_strtol_l.constprop.0+0xde>
 800869c:	b106      	cbz	r6, 80086a0 <_strtol_l.constprop.0+0xd4>
 800869e:	4240      	negs	r0, r0
 80086a0:	f1b8 0f00 	cmp.w	r8, #0
 80086a4:	d09f      	beq.n	80085e6 <_strtol_l.constprop.0+0x1a>
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	d1f6      	bne.n	8008698 <_strtol_l.constprop.0+0xcc>
 80086aa:	f8c8 1000 	str.w	r1, [r8]
 80086ae:	e79a      	b.n	80085e6 <_strtol_l.constprop.0+0x1a>
 80086b0:	2430      	movs	r4, #48	; 0x30
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1b5      	bne.n	8008622 <_strtol_l.constprop.0+0x56>
 80086b6:	2308      	movs	r3, #8
 80086b8:	e7b3      	b.n	8008622 <_strtol_l.constprop.0+0x56>
 80086ba:	2c30      	cmp	r4, #48	; 0x30
 80086bc:	d0a9      	beq.n	8008612 <_strtol_l.constprop.0+0x46>
 80086be:	230a      	movs	r3, #10
 80086c0:	e7af      	b.n	8008622 <_strtol_l.constprop.0+0x56>
 80086c2:	bf00      	nop
 80086c4:	0800ce07 	.word	0x0800ce07

080086c8 <strtol>:
 80086c8:	4613      	mov	r3, r2
 80086ca:	460a      	mov	r2, r1
 80086cc:	4601      	mov	r1, r0
 80086ce:	4802      	ldr	r0, [pc, #8]	; (80086d8 <strtol+0x10>)
 80086d0:	6800      	ldr	r0, [r0, #0]
 80086d2:	f7ff bf7b 	b.w	80085cc <_strtol_l.constprop.0>
 80086d6:	bf00      	nop
 80086d8:	200000d4 	.word	0x200000d4

080086dc <__cvt>:
 80086dc:	2b00      	cmp	r3, #0
 80086de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e2:	461f      	mov	r7, r3
 80086e4:	bfbb      	ittet	lt
 80086e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80086ea:	461f      	movlt	r7, r3
 80086ec:	2300      	movge	r3, #0
 80086ee:	232d      	movlt	r3, #45	; 0x2d
 80086f0:	b088      	sub	sp, #32
 80086f2:	4614      	mov	r4, r2
 80086f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80086f8:	7013      	strb	r3, [r2, #0]
 80086fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008700:	f023 0820 	bic.w	r8, r3, #32
 8008704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008708:	d005      	beq.n	8008716 <__cvt+0x3a>
 800870a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800870e:	d100      	bne.n	8008712 <__cvt+0x36>
 8008710:	3501      	adds	r5, #1
 8008712:	2302      	movs	r3, #2
 8008714:	e000      	b.n	8008718 <__cvt+0x3c>
 8008716:	2303      	movs	r3, #3
 8008718:	aa07      	add	r2, sp, #28
 800871a:	9204      	str	r2, [sp, #16]
 800871c:	aa06      	add	r2, sp, #24
 800871e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008722:	e9cd 3500 	strd	r3, r5, [sp]
 8008726:	4622      	mov	r2, r4
 8008728:	463b      	mov	r3, r7
 800872a:	f000 fe81 	bl	8009430 <_dtoa_r>
 800872e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008732:	4606      	mov	r6, r0
 8008734:	d102      	bne.n	800873c <__cvt+0x60>
 8008736:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008738:	07db      	lsls	r3, r3, #31
 800873a:	d522      	bpl.n	8008782 <__cvt+0xa6>
 800873c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008740:	eb06 0905 	add.w	r9, r6, r5
 8008744:	d110      	bne.n	8008768 <__cvt+0x8c>
 8008746:	7833      	ldrb	r3, [r6, #0]
 8008748:	2b30      	cmp	r3, #48	; 0x30
 800874a:	d10a      	bne.n	8008762 <__cvt+0x86>
 800874c:	2200      	movs	r2, #0
 800874e:	2300      	movs	r3, #0
 8008750:	4620      	mov	r0, r4
 8008752:	4639      	mov	r1, r7
 8008754:	f7f8 f928 	bl	80009a8 <__aeabi_dcmpeq>
 8008758:	b918      	cbnz	r0, 8008762 <__cvt+0x86>
 800875a:	f1c5 0501 	rsb	r5, r5, #1
 800875e:	f8ca 5000 	str.w	r5, [sl]
 8008762:	f8da 3000 	ldr.w	r3, [sl]
 8008766:	4499      	add	r9, r3
 8008768:	2200      	movs	r2, #0
 800876a:	2300      	movs	r3, #0
 800876c:	4620      	mov	r0, r4
 800876e:	4639      	mov	r1, r7
 8008770:	f7f8 f91a 	bl	80009a8 <__aeabi_dcmpeq>
 8008774:	b108      	cbz	r0, 800877a <__cvt+0x9e>
 8008776:	f8cd 901c 	str.w	r9, [sp, #28]
 800877a:	2230      	movs	r2, #48	; 0x30
 800877c:	9b07      	ldr	r3, [sp, #28]
 800877e:	454b      	cmp	r3, r9
 8008780:	d307      	bcc.n	8008792 <__cvt+0xb6>
 8008782:	4630      	mov	r0, r6
 8008784:	9b07      	ldr	r3, [sp, #28]
 8008786:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008788:	1b9b      	subs	r3, r3, r6
 800878a:	6013      	str	r3, [r2, #0]
 800878c:	b008      	add	sp, #32
 800878e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008792:	1c59      	adds	r1, r3, #1
 8008794:	9107      	str	r1, [sp, #28]
 8008796:	701a      	strb	r2, [r3, #0]
 8008798:	e7f0      	b.n	800877c <__cvt+0xa0>

0800879a <__exponent>:
 800879a:	4603      	mov	r3, r0
 800879c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800879e:	2900      	cmp	r1, #0
 80087a0:	f803 2b02 	strb.w	r2, [r3], #2
 80087a4:	bfb6      	itet	lt
 80087a6:	222d      	movlt	r2, #45	; 0x2d
 80087a8:	222b      	movge	r2, #43	; 0x2b
 80087aa:	4249      	neglt	r1, r1
 80087ac:	2909      	cmp	r1, #9
 80087ae:	7042      	strb	r2, [r0, #1]
 80087b0:	dd2a      	ble.n	8008808 <__exponent+0x6e>
 80087b2:	f10d 0207 	add.w	r2, sp, #7
 80087b6:	4617      	mov	r7, r2
 80087b8:	260a      	movs	r6, #10
 80087ba:	fb91 f5f6 	sdiv	r5, r1, r6
 80087be:	4694      	mov	ip, r2
 80087c0:	fb06 1415 	mls	r4, r6, r5, r1
 80087c4:	3430      	adds	r4, #48	; 0x30
 80087c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80087ca:	460c      	mov	r4, r1
 80087cc:	2c63      	cmp	r4, #99	; 0x63
 80087ce:	4629      	mov	r1, r5
 80087d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80087d4:	dcf1      	bgt.n	80087ba <__exponent+0x20>
 80087d6:	3130      	adds	r1, #48	; 0x30
 80087d8:	f1ac 0402 	sub.w	r4, ip, #2
 80087dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80087e0:	4622      	mov	r2, r4
 80087e2:	1c41      	adds	r1, r0, #1
 80087e4:	42ba      	cmp	r2, r7
 80087e6:	d30a      	bcc.n	80087fe <__exponent+0x64>
 80087e8:	f10d 0209 	add.w	r2, sp, #9
 80087ec:	eba2 020c 	sub.w	r2, r2, ip
 80087f0:	42bc      	cmp	r4, r7
 80087f2:	bf88      	it	hi
 80087f4:	2200      	movhi	r2, #0
 80087f6:	4413      	add	r3, r2
 80087f8:	1a18      	subs	r0, r3, r0
 80087fa:	b003      	add	sp, #12
 80087fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008802:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008806:	e7ed      	b.n	80087e4 <__exponent+0x4a>
 8008808:	2330      	movs	r3, #48	; 0x30
 800880a:	3130      	adds	r1, #48	; 0x30
 800880c:	7083      	strb	r3, [r0, #2]
 800880e:	70c1      	strb	r1, [r0, #3]
 8008810:	1d03      	adds	r3, r0, #4
 8008812:	e7f1      	b.n	80087f8 <__exponent+0x5e>

08008814 <_printf_float>:
 8008814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	b091      	sub	sp, #68	; 0x44
 800881a:	460c      	mov	r4, r1
 800881c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008820:	4616      	mov	r6, r2
 8008822:	461f      	mov	r7, r3
 8008824:	4605      	mov	r5, r0
 8008826:	f000 fce5 	bl	80091f4 <_localeconv_r>
 800882a:	6803      	ldr	r3, [r0, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	9309      	str	r3, [sp, #36]	; 0x24
 8008830:	f7f7 fc8e 	bl	8000150 <strlen>
 8008834:	2300      	movs	r3, #0
 8008836:	930e      	str	r3, [sp, #56]	; 0x38
 8008838:	f8d8 3000 	ldr.w	r3, [r8]
 800883c:	900a      	str	r0, [sp, #40]	; 0x28
 800883e:	3307      	adds	r3, #7
 8008840:	f023 0307 	bic.w	r3, r3, #7
 8008844:	f103 0208 	add.w	r2, r3, #8
 8008848:	f894 9018 	ldrb.w	r9, [r4, #24]
 800884c:	f8d4 b000 	ldr.w	fp, [r4]
 8008850:	f8c8 2000 	str.w	r2, [r8]
 8008854:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008858:	4652      	mov	r2, sl
 800885a:	4643      	mov	r3, r8
 800885c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008860:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008864:	930b      	str	r3, [sp, #44]	; 0x2c
 8008866:	f04f 32ff 	mov.w	r2, #4294967295
 800886a:	4650      	mov	r0, sl
 800886c:	4b9c      	ldr	r3, [pc, #624]	; (8008ae0 <_printf_float+0x2cc>)
 800886e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008870:	f7f8 f8cc 	bl	8000a0c <__aeabi_dcmpun>
 8008874:	bb70      	cbnz	r0, 80088d4 <_printf_float+0xc0>
 8008876:	f04f 32ff 	mov.w	r2, #4294967295
 800887a:	4650      	mov	r0, sl
 800887c:	4b98      	ldr	r3, [pc, #608]	; (8008ae0 <_printf_float+0x2cc>)
 800887e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008880:	f7f8 f8a6 	bl	80009d0 <__aeabi_dcmple>
 8008884:	bb30      	cbnz	r0, 80088d4 <_printf_float+0xc0>
 8008886:	2200      	movs	r2, #0
 8008888:	2300      	movs	r3, #0
 800888a:	4650      	mov	r0, sl
 800888c:	4641      	mov	r1, r8
 800888e:	f7f8 f895 	bl	80009bc <__aeabi_dcmplt>
 8008892:	b110      	cbz	r0, 800889a <_printf_float+0x86>
 8008894:	232d      	movs	r3, #45	; 0x2d
 8008896:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800889a:	4a92      	ldr	r2, [pc, #584]	; (8008ae4 <_printf_float+0x2d0>)
 800889c:	4b92      	ldr	r3, [pc, #584]	; (8008ae8 <_printf_float+0x2d4>)
 800889e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80088a2:	bf94      	ite	ls
 80088a4:	4690      	movls	r8, r2
 80088a6:	4698      	movhi	r8, r3
 80088a8:	2303      	movs	r3, #3
 80088aa:	f04f 0a00 	mov.w	sl, #0
 80088ae:	6123      	str	r3, [r4, #16]
 80088b0:	f02b 0304 	bic.w	r3, fp, #4
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	4633      	mov	r3, r6
 80088b8:	4621      	mov	r1, r4
 80088ba:	4628      	mov	r0, r5
 80088bc:	9700      	str	r7, [sp, #0]
 80088be:	aa0f      	add	r2, sp, #60	; 0x3c
 80088c0:	f000 f9d6 	bl	8008c70 <_printf_common>
 80088c4:	3001      	adds	r0, #1
 80088c6:	f040 8090 	bne.w	80089ea <_printf_float+0x1d6>
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295
 80088ce:	b011      	add	sp, #68	; 0x44
 80088d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d4:	4652      	mov	r2, sl
 80088d6:	4643      	mov	r3, r8
 80088d8:	4650      	mov	r0, sl
 80088da:	4641      	mov	r1, r8
 80088dc:	f7f8 f896 	bl	8000a0c <__aeabi_dcmpun>
 80088e0:	b148      	cbz	r0, 80088f6 <_printf_float+0xe2>
 80088e2:	f1b8 0f00 	cmp.w	r8, #0
 80088e6:	bfb8      	it	lt
 80088e8:	232d      	movlt	r3, #45	; 0x2d
 80088ea:	4a80      	ldr	r2, [pc, #512]	; (8008aec <_printf_float+0x2d8>)
 80088ec:	bfb8      	it	lt
 80088ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80088f2:	4b7f      	ldr	r3, [pc, #508]	; (8008af0 <_printf_float+0x2dc>)
 80088f4:	e7d3      	b.n	800889e <_printf_float+0x8a>
 80088f6:	6863      	ldr	r3, [r4, #4]
 80088f8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	d142      	bne.n	8008986 <_printf_float+0x172>
 8008900:	2306      	movs	r3, #6
 8008902:	6063      	str	r3, [r4, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	9206      	str	r2, [sp, #24]
 8008908:	aa0e      	add	r2, sp, #56	; 0x38
 800890a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800890e:	aa0d      	add	r2, sp, #52	; 0x34
 8008910:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008914:	9203      	str	r2, [sp, #12]
 8008916:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800891a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800891e:	6023      	str	r3, [r4, #0]
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	4652      	mov	r2, sl
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	4628      	mov	r0, r5
 8008928:	4643      	mov	r3, r8
 800892a:	910b      	str	r1, [sp, #44]	; 0x2c
 800892c:	f7ff fed6 	bl	80086dc <__cvt>
 8008930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008932:	4680      	mov	r8, r0
 8008934:	2947      	cmp	r1, #71	; 0x47
 8008936:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008938:	d108      	bne.n	800894c <_printf_float+0x138>
 800893a:	1cc8      	adds	r0, r1, #3
 800893c:	db02      	blt.n	8008944 <_printf_float+0x130>
 800893e:	6863      	ldr	r3, [r4, #4]
 8008940:	4299      	cmp	r1, r3
 8008942:	dd40      	ble.n	80089c6 <_printf_float+0x1b2>
 8008944:	f1a9 0902 	sub.w	r9, r9, #2
 8008948:	fa5f f989 	uxtb.w	r9, r9
 800894c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008950:	d81f      	bhi.n	8008992 <_printf_float+0x17e>
 8008952:	464a      	mov	r2, r9
 8008954:	3901      	subs	r1, #1
 8008956:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800895a:	910d      	str	r1, [sp, #52]	; 0x34
 800895c:	f7ff ff1d 	bl	800879a <__exponent>
 8008960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008962:	4682      	mov	sl, r0
 8008964:	1813      	adds	r3, r2, r0
 8008966:	2a01      	cmp	r2, #1
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	dc02      	bgt.n	8008972 <_printf_float+0x15e>
 800896c:	6822      	ldr	r2, [r4, #0]
 800896e:	07d2      	lsls	r2, r2, #31
 8008970:	d501      	bpl.n	8008976 <_printf_float+0x162>
 8008972:	3301      	adds	r3, #1
 8008974:	6123      	str	r3, [r4, #16]
 8008976:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800897a:	2b00      	cmp	r3, #0
 800897c:	d09b      	beq.n	80088b6 <_printf_float+0xa2>
 800897e:	232d      	movs	r3, #45	; 0x2d
 8008980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008984:	e797      	b.n	80088b6 <_printf_float+0xa2>
 8008986:	2947      	cmp	r1, #71	; 0x47
 8008988:	d1bc      	bne.n	8008904 <_printf_float+0xf0>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1ba      	bne.n	8008904 <_printf_float+0xf0>
 800898e:	2301      	movs	r3, #1
 8008990:	e7b7      	b.n	8008902 <_printf_float+0xee>
 8008992:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008996:	d118      	bne.n	80089ca <_printf_float+0x1b6>
 8008998:	2900      	cmp	r1, #0
 800899a:	6863      	ldr	r3, [r4, #4]
 800899c:	dd0b      	ble.n	80089b6 <_printf_float+0x1a2>
 800899e:	6121      	str	r1, [r4, #16]
 80089a0:	b913      	cbnz	r3, 80089a8 <_printf_float+0x194>
 80089a2:	6822      	ldr	r2, [r4, #0]
 80089a4:	07d0      	lsls	r0, r2, #31
 80089a6:	d502      	bpl.n	80089ae <_printf_float+0x19a>
 80089a8:	3301      	adds	r3, #1
 80089aa:	440b      	add	r3, r1
 80089ac:	6123      	str	r3, [r4, #16]
 80089ae:	f04f 0a00 	mov.w	sl, #0
 80089b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80089b4:	e7df      	b.n	8008976 <_printf_float+0x162>
 80089b6:	b913      	cbnz	r3, 80089be <_printf_float+0x1aa>
 80089b8:	6822      	ldr	r2, [r4, #0]
 80089ba:	07d2      	lsls	r2, r2, #31
 80089bc:	d501      	bpl.n	80089c2 <_printf_float+0x1ae>
 80089be:	3302      	adds	r3, #2
 80089c0:	e7f4      	b.n	80089ac <_printf_float+0x198>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e7f2      	b.n	80089ac <_printf_float+0x198>
 80089c6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80089ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089cc:	4299      	cmp	r1, r3
 80089ce:	db05      	blt.n	80089dc <_printf_float+0x1c8>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	6121      	str	r1, [r4, #16]
 80089d4:	07d8      	lsls	r0, r3, #31
 80089d6:	d5ea      	bpl.n	80089ae <_printf_float+0x19a>
 80089d8:	1c4b      	adds	r3, r1, #1
 80089da:	e7e7      	b.n	80089ac <_printf_float+0x198>
 80089dc:	2900      	cmp	r1, #0
 80089de:	bfcc      	ite	gt
 80089e0:	2201      	movgt	r2, #1
 80089e2:	f1c1 0202 	rsble	r2, r1, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	e7e0      	b.n	80089ac <_printf_float+0x198>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	055a      	lsls	r2, r3, #21
 80089ee:	d407      	bmi.n	8008a00 <_printf_float+0x1ec>
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	4642      	mov	r2, r8
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	d12b      	bne.n	8008a56 <_printf_float+0x242>
 80089fe:	e764      	b.n	80088ca <_printf_float+0xb6>
 8008a00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a04:	f240 80dd 	bls.w	8008bc2 <_printf_float+0x3ae>
 8008a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f7f7 ffca 	bl	80009a8 <__aeabi_dcmpeq>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d033      	beq.n	8008a80 <_printf_float+0x26c>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	4a35      	ldr	r2, [pc, #212]	; (8008af4 <_printf_float+0x2e0>)
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	f43f af51 	beq.w	80088ca <_printf_float+0xb6>
 8008a28:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	db02      	blt.n	8008a36 <_printf_float+0x222>
 8008a30:	6823      	ldr	r3, [r4, #0]
 8008a32:	07d8      	lsls	r0, r3, #31
 8008a34:	d50f      	bpl.n	8008a56 <_printf_float+0x242>
 8008a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	47b8      	blx	r7
 8008a40:	3001      	adds	r0, #1
 8008a42:	f43f af42 	beq.w	80088ca <_printf_float+0xb6>
 8008a46:	f04f 0800 	mov.w	r8, #0
 8008a4a:	f104 091a 	add.w	r9, r4, #26
 8008a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a50:	3b01      	subs	r3, #1
 8008a52:	4543      	cmp	r3, r8
 8008a54:	dc09      	bgt.n	8008a6a <_printf_float+0x256>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	079b      	lsls	r3, r3, #30
 8008a5a:	f100 8104 	bmi.w	8008c66 <_printf_float+0x452>
 8008a5e:	68e0      	ldr	r0, [r4, #12]
 8008a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a62:	4298      	cmp	r0, r3
 8008a64:	bfb8      	it	lt
 8008a66:	4618      	movlt	r0, r3
 8008a68:	e731      	b.n	80088ce <_printf_float+0xba>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	464a      	mov	r2, r9
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b8      	blx	r7
 8008a74:	3001      	adds	r0, #1
 8008a76:	f43f af28 	beq.w	80088ca <_printf_float+0xb6>
 8008a7a:	f108 0801 	add.w	r8, r8, #1
 8008a7e:	e7e6      	b.n	8008a4e <_printf_float+0x23a>
 8008a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dc38      	bgt.n	8008af8 <_printf_float+0x2e4>
 8008a86:	2301      	movs	r3, #1
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	4a19      	ldr	r2, [pc, #100]	; (8008af4 <_printf_float+0x2e0>)
 8008a8e:	47b8      	blx	r7
 8008a90:	3001      	adds	r0, #1
 8008a92:	f43f af1a 	beq.w	80088ca <_printf_float+0xb6>
 8008a96:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	d102      	bne.n	8008aa4 <_printf_float+0x290>
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	07d9      	lsls	r1, r3, #31
 8008aa2:	d5d8      	bpl.n	8008a56 <_printf_float+0x242>
 8008aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	f43f af0b 	beq.w	80088ca <_printf_float+0xb6>
 8008ab4:	f04f 0900 	mov.w	r9, #0
 8008ab8:	f104 0a1a 	add.w	sl, r4, #26
 8008abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008abe:	425b      	negs	r3, r3
 8008ac0:	454b      	cmp	r3, r9
 8008ac2:	dc01      	bgt.n	8008ac8 <_printf_float+0x2b4>
 8008ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ac6:	e794      	b.n	80089f2 <_printf_float+0x1de>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4652      	mov	r2, sl
 8008acc:	4631      	mov	r1, r6
 8008ace:	4628      	mov	r0, r5
 8008ad0:	47b8      	blx	r7
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	f43f aef9 	beq.w	80088ca <_printf_float+0xb6>
 8008ad8:	f109 0901 	add.w	r9, r9, #1
 8008adc:	e7ee      	b.n	8008abc <_printf_float+0x2a8>
 8008ade:	bf00      	nop
 8008ae0:	7fefffff 	.word	0x7fefffff
 8008ae4:	0800cf07 	.word	0x0800cf07
 8008ae8:	0800cf0b 	.word	0x0800cf0b
 8008aec:	0800cf0f 	.word	0x0800cf0f
 8008af0:	0800cf13 	.word	0x0800cf13
 8008af4:	0800cf17 	.word	0x0800cf17
 8008af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008afa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008afc:	429a      	cmp	r2, r3
 8008afe:	bfa8      	it	ge
 8008b00:	461a      	movge	r2, r3
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	4691      	mov	r9, r2
 8008b06:	dc37      	bgt.n	8008b78 <_printf_float+0x364>
 8008b08:	f04f 0b00 	mov.w	fp, #0
 8008b0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b10:	f104 021a 	add.w	r2, r4, #26
 8008b14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008b18:	ebaa 0309 	sub.w	r3, sl, r9
 8008b1c:	455b      	cmp	r3, fp
 8008b1e:	dc33      	bgt.n	8008b88 <_printf_float+0x374>
 8008b20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b24:	429a      	cmp	r2, r3
 8008b26:	db3b      	blt.n	8008ba0 <_printf_float+0x38c>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	07da      	lsls	r2, r3, #31
 8008b2c:	d438      	bmi.n	8008ba0 <_printf_float+0x38c>
 8008b2e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008b32:	eba2 0903 	sub.w	r9, r2, r3
 8008b36:	eba2 020a 	sub.w	r2, r2, sl
 8008b3a:	4591      	cmp	r9, r2
 8008b3c:	bfa8      	it	ge
 8008b3e:	4691      	movge	r9, r2
 8008b40:	f1b9 0f00 	cmp.w	r9, #0
 8008b44:	dc34      	bgt.n	8008bb0 <_printf_float+0x39c>
 8008b46:	f04f 0800 	mov.w	r8, #0
 8008b4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b4e:	f104 0a1a 	add.w	sl, r4, #26
 8008b52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b56:	1a9b      	subs	r3, r3, r2
 8008b58:	eba3 0309 	sub.w	r3, r3, r9
 8008b5c:	4543      	cmp	r3, r8
 8008b5e:	f77f af7a 	ble.w	8008a56 <_printf_float+0x242>
 8008b62:	2301      	movs	r3, #1
 8008b64:	4652      	mov	r2, sl
 8008b66:	4631      	mov	r1, r6
 8008b68:	4628      	mov	r0, r5
 8008b6a:	47b8      	blx	r7
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f43f aeac 	beq.w	80088ca <_printf_float+0xb6>
 8008b72:	f108 0801 	add.w	r8, r8, #1
 8008b76:	e7ec      	b.n	8008b52 <_printf_float+0x33e>
 8008b78:	4613      	mov	r3, r2
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	4642      	mov	r2, r8
 8008b7e:	4628      	mov	r0, r5
 8008b80:	47b8      	blx	r7
 8008b82:	3001      	adds	r0, #1
 8008b84:	d1c0      	bne.n	8008b08 <_printf_float+0x2f4>
 8008b86:	e6a0      	b.n	80088ca <_printf_float+0xb6>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b90:	47b8      	blx	r7
 8008b92:	3001      	adds	r0, #1
 8008b94:	f43f ae99 	beq.w	80088ca <_printf_float+0xb6>
 8008b98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b9a:	f10b 0b01 	add.w	fp, fp, #1
 8008b9e:	e7b9      	b.n	8008b14 <_printf_float+0x300>
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	47b8      	blx	r7
 8008baa:	3001      	adds	r0, #1
 8008bac:	d1bf      	bne.n	8008b2e <_printf_float+0x31a>
 8008bae:	e68c      	b.n	80088ca <_printf_float+0xb6>
 8008bb0:	464b      	mov	r3, r9
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	eb08 020a 	add.w	r2, r8, sl
 8008bba:	47b8      	blx	r7
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d1c2      	bne.n	8008b46 <_printf_float+0x332>
 8008bc0:	e683      	b.n	80088ca <_printf_float+0xb6>
 8008bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bc4:	2a01      	cmp	r2, #1
 8008bc6:	dc01      	bgt.n	8008bcc <_printf_float+0x3b8>
 8008bc8:	07db      	lsls	r3, r3, #31
 8008bca:	d539      	bpl.n	8008c40 <_printf_float+0x42c>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	4642      	mov	r2, r8
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	47b8      	blx	r7
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	f43f ae77 	beq.w	80088ca <_printf_float+0xb6>
 8008bdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008be0:	4631      	mov	r1, r6
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	f43f ae6f 	beq.w	80088ca <_printf_float+0xb6>
 8008bec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008bf8:	f7f7 fed6 	bl	80009a8 <__aeabi_dcmpeq>
 8008bfc:	b9d8      	cbnz	r0, 8008c36 <_printf_float+0x422>
 8008bfe:	f109 33ff 	add.w	r3, r9, #4294967295
 8008c02:	f108 0201 	add.w	r2, r8, #1
 8008c06:	4631      	mov	r1, r6
 8008c08:	4628      	mov	r0, r5
 8008c0a:	47b8      	blx	r7
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d10e      	bne.n	8008c2e <_printf_float+0x41a>
 8008c10:	e65b      	b.n	80088ca <_printf_float+0xb6>
 8008c12:	2301      	movs	r3, #1
 8008c14:	464a      	mov	r2, r9
 8008c16:	4631      	mov	r1, r6
 8008c18:	4628      	mov	r0, r5
 8008c1a:	47b8      	blx	r7
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	f43f ae54 	beq.w	80088ca <_printf_float+0xb6>
 8008c22:	f108 0801 	add.w	r8, r8, #1
 8008c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	4543      	cmp	r3, r8
 8008c2c:	dcf1      	bgt.n	8008c12 <_printf_float+0x3fe>
 8008c2e:	4653      	mov	r3, sl
 8008c30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c34:	e6de      	b.n	80089f4 <_printf_float+0x1e0>
 8008c36:	f04f 0800 	mov.w	r8, #0
 8008c3a:	f104 091a 	add.w	r9, r4, #26
 8008c3e:	e7f2      	b.n	8008c26 <_printf_float+0x412>
 8008c40:	2301      	movs	r3, #1
 8008c42:	4642      	mov	r2, r8
 8008c44:	e7df      	b.n	8008c06 <_printf_float+0x3f2>
 8008c46:	2301      	movs	r3, #1
 8008c48:	464a      	mov	r2, r9
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	47b8      	blx	r7
 8008c50:	3001      	adds	r0, #1
 8008c52:	f43f ae3a 	beq.w	80088ca <_printf_float+0xb6>
 8008c56:	f108 0801 	add.w	r8, r8, #1
 8008c5a:	68e3      	ldr	r3, [r4, #12]
 8008c5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008c5e:	1a5b      	subs	r3, r3, r1
 8008c60:	4543      	cmp	r3, r8
 8008c62:	dcf0      	bgt.n	8008c46 <_printf_float+0x432>
 8008c64:	e6fb      	b.n	8008a5e <_printf_float+0x24a>
 8008c66:	f04f 0800 	mov.w	r8, #0
 8008c6a:	f104 0919 	add.w	r9, r4, #25
 8008c6e:	e7f4      	b.n	8008c5a <_printf_float+0x446>

08008c70 <_printf_common>:
 8008c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c74:	4616      	mov	r6, r2
 8008c76:	4699      	mov	r9, r3
 8008c78:	688a      	ldr	r2, [r1, #8]
 8008c7a:	690b      	ldr	r3, [r1, #16]
 8008c7c:	4607      	mov	r7, r0
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	bfb8      	it	lt
 8008c82:	4613      	movlt	r3, r2
 8008c84:	6033      	str	r3, [r6, #0]
 8008c86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c90:	b10a      	cbz	r2, 8008c96 <_printf_common+0x26>
 8008c92:	3301      	adds	r3, #1
 8008c94:	6033      	str	r3, [r6, #0]
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	0699      	lsls	r1, r3, #26
 8008c9a:	bf42      	ittt	mi
 8008c9c:	6833      	ldrmi	r3, [r6, #0]
 8008c9e:	3302      	addmi	r3, #2
 8008ca0:	6033      	strmi	r3, [r6, #0]
 8008ca2:	6825      	ldr	r5, [r4, #0]
 8008ca4:	f015 0506 	ands.w	r5, r5, #6
 8008ca8:	d106      	bne.n	8008cb8 <_printf_common+0x48>
 8008caa:	f104 0a19 	add.w	sl, r4, #25
 8008cae:	68e3      	ldr	r3, [r4, #12]
 8008cb0:	6832      	ldr	r2, [r6, #0]
 8008cb2:	1a9b      	subs	r3, r3, r2
 8008cb4:	42ab      	cmp	r3, r5
 8008cb6:	dc2b      	bgt.n	8008d10 <_printf_common+0xa0>
 8008cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cbc:	1e13      	subs	r3, r2, #0
 8008cbe:	6822      	ldr	r2, [r4, #0]
 8008cc0:	bf18      	it	ne
 8008cc2:	2301      	movne	r3, #1
 8008cc4:	0692      	lsls	r2, r2, #26
 8008cc6:	d430      	bmi.n	8008d2a <_printf_common+0xba>
 8008cc8:	4649      	mov	r1, r9
 8008cca:	4638      	mov	r0, r7
 8008ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cd0:	47c0      	blx	r8
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	d023      	beq.n	8008d1e <_printf_common+0xae>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	6922      	ldr	r2, [r4, #16]
 8008cda:	f003 0306 	and.w	r3, r3, #6
 8008cde:	2b04      	cmp	r3, #4
 8008ce0:	bf14      	ite	ne
 8008ce2:	2500      	movne	r5, #0
 8008ce4:	6833      	ldreq	r3, [r6, #0]
 8008ce6:	f04f 0600 	mov.w	r6, #0
 8008cea:	bf08      	it	eq
 8008cec:	68e5      	ldreq	r5, [r4, #12]
 8008cee:	f104 041a 	add.w	r4, r4, #26
 8008cf2:	bf08      	it	eq
 8008cf4:	1aed      	subeq	r5, r5, r3
 8008cf6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008cfa:	bf08      	it	eq
 8008cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d00:	4293      	cmp	r3, r2
 8008d02:	bfc4      	itt	gt
 8008d04:	1a9b      	subgt	r3, r3, r2
 8008d06:	18ed      	addgt	r5, r5, r3
 8008d08:	42b5      	cmp	r5, r6
 8008d0a:	d11a      	bne.n	8008d42 <_printf_common+0xd2>
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e008      	b.n	8008d22 <_printf_common+0xb2>
 8008d10:	2301      	movs	r3, #1
 8008d12:	4652      	mov	r2, sl
 8008d14:	4649      	mov	r1, r9
 8008d16:	4638      	mov	r0, r7
 8008d18:	47c0      	blx	r8
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d103      	bne.n	8008d26 <_printf_common+0xb6>
 8008d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d26:	3501      	adds	r5, #1
 8008d28:	e7c1      	b.n	8008cae <_printf_common+0x3e>
 8008d2a:	2030      	movs	r0, #48	; 0x30
 8008d2c:	18e1      	adds	r1, r4, r3
 8008d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d38:	4422      	add	r2, r4
 8008d3a:	3302      	adds	r3, #2
 8008d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d40:	e7c2      	b.n	8008cc8 <_printf_common+0x58>
 8008d42:	2301      	movs	r3, #1
 8008d44:	4622      	mov	r2, r4
 8008d46:	4649      	mov	r1, r9
 8008d48:	4638      	mov	r0, r7
 8008d4a:	47c0      	blx	r8
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d0e6      	beq.n	8008d1e <_printf_common+0xae>
 8008d50:	3601      	adds	r6, #1
 8008d52:	e7d9      	b.n	8008d08 <_printf_common+0x98>

08008d54 <_printf_i>:
 8008d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d58:	7e0f      	ldrb	r7, [r1, #24]
 8008d5a:	4691      	mov	r9, r2
 8008d5c:	2f78      	cmp	r7, #120	; 0x78
 8008d5e:	4680      	mov	r8, r0
 8008d60:	460c      	mov	r4, r1
 8008d62:	469a      	mov	sl, r3
 8008d64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d6a:	d807      	bhi.n	8008d7c <_printf_i+0x28>
 8008d6c:	2f62      	cmp	r7, #98	; 0x62
 8008d6e:	d80a      	bhi.n	8008d86 <_printf_i+0x32>
 8008d70:	2f00      	cmp	r7, #0
 8008d72:	f000 80d5 	beq.w	8008f20 <_printf_i+0x1cc>
 8008d76:	2f58      	cmp	r7, #88	; 0x58
 8008d78:	f000 80c1 	beq.w	8008efe <_printf_i+0x1aa>
 8008d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d84:	e03a      	b.n	8008dfc <_printf_i+0xa8>
 8008d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d8a:	2b15      	cmp	r3, #21
 8008d8c:	d8f6      	bhi.n	8008d7c <_printf_i+0x28>
 8008d8e:	a101      	add	r1, pc, #4	; (adr r1, 8008d94 <_printf_i+0x40>)
 8008d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d94:	08008ded 	.word	0x08008ded
 8008d98:	08008e01 	.word	0x08008e01
 8008d9c:	08008d7d 	.word	0x08008d7d
 8008da0:	08008d7d 	.word	0x08008d7d
 8008da4:	08008d7d 	.word	0x08008d7d
 8008da8:	08008d7d 	.word	0x08008d7d
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008d7d 	.word	0x08008d7d
 8008db4:	08008d7d 	.word	0x08008d7d
 8008db8:	08008d7d 	.word	0x08008d7d
 8008dbc:	08008d7d 	.word	0x08008d7d
 8008dc0:	08008f07 	.word	0x08008f07
 8008dc4:	08008e2d 	.word	0x08008e2d
 8008dc8:	08008ec1 	.word	0x08008ec1
 8008dcc:	08008d7d 	.word	0x08008d7d
 8008dd0:	08008d7d 	.word	0x08008d7d
 8008dd4:	08008f29 	.word	0x08008f29
 8008dd8:	08008d7d 	.word	0x08008d7d
 8008ddc:	08008e2d 	.word	0x08008e2d
 8008de0:	08008d7d 	.word	0x08008d7d
 8008de4:	08008d7d 	.word	0x08008d7d
 8008de8:	08008ec9 	.word	0x08008ec9
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	1d1a      	adds	r2, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	602a      	str	r2, [r5, #0]
 8008df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e0a0      	b.n	8008f42 <_printf_i+0x1ee>
 8008e00:	6820      	ldr	r0, [r4, #0]
 8008e02:	682b      	ldr	r3, [r5, #0]
 8008e04:	0607      	lsls	r7, r0, #24
 8008e06:	f103 0104 	add.w	r1, r3, #4
 8008e0a:	6029      	str	r1, [r5, #0]
 8008e0c:	d501      	bpl.n	8008e12 <_printf_i+0xbe>
 8008e0e:	681e      	ldr	r6, [r3, #0]
 8008e10:	e003      	b.n	8008e1a <_printf_i+0xc6>
 8008e12:	0646      	lsls	r6, r0, #25
 8008e14:	d5fb      	bpl.n	8008e0e <_printf_i+0xba>
 8008e16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008e1a:	2e00      	cmp	r6, #0
 8008e1c:	da03      	bge.n	8008e26 <_printf_i+0xd2>
 8008e1e:	232d      	movs	r3, #45	; 0x2d
 8008e20:	4276      	negs	r6, r6
 8008e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e26:	230a      	movs	r3, #10
 8008e28:	4859      	ldr	r0, [pc, #356]	; (8008f90 <_printf_i+0x23c>)
 8008e2a:	e012      	b.n	8008e52 <_printf_i+0xfe>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	6820      	ldr	r0, [r4, #0]
 8008e30:	1d19      	adds	r1, r3, #4
 8008e32:	6029      	str	r1, [r5, #0]
 8008e34:	0605      	lsls	r5, r0, #24
 8008e36:	d501      	bpl.n	8008e3c <_printf_i+0xe8>
 8008e38:	681e      	ldr	r6, [r3, #0]
 8008e3a:	e002      	b.n	8008e42 <_printf_i+0xee>
 8008e3c:	0641      	lsls	r1, r0, #25
 8008e3e:	d5fb      	bpl.n	8008e38 <_printf_i+0xe4>
 8008e40:	881e      	ldrh	r6, [r3, #0]
 8008e42:	2f6f      	cmp	r7, #111	; 0x6f
 8008e44:	bf0c      	ite	eq
 8008e46:	2308      	moveq	r3, #8
 8008e48:	230a      	movne	r3, #10
 8008e4a:	4851      	ldr	r0, [pc, #324]	; (8008f90 <_printf_i+0x23c>)
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e52:	6865      	ldr	r5, [r4, #4]
 8008e54:	2d00      	cmp	r5, #0
 8008e56:	bfa8      	it	ge
 8008e58:	6821      	ldrge	r1, [r4, #0]
 8008e5a:	60a5      	str	r5, [r4, #8]
 8008e5c:	bfa4      	itt	ge
 8008e5e:	f021 0104 	bicge.w	r1, r1, #4
 8008e62:	6021      	strge	r1, [r4, #0]
 8008e64:	b90e      	cbnz	r6, 8008e6a <_printf_i+0x116>
 8008e66:	2d00      	cmp	r5, #0
 8008e68:	d04b      	beq.n	8008f02 <_printf_i+0x1ae>
 8008e6a:	4615      	mov	r5, r2
 8008e6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e70:	fb03 6711 	mls	r7, r3, r1, r6
 8008e74:	5dc7      	ldrb	r7, [r0, r7]
 8008e76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e7a:	4637      	mov	r7, r6
 8008e7c:	42bb      	cmp	r3, r7
 8008e7e:	460e      	mov	r6, r1
 8008e80:	d9f4      	bls.n	8008e6c <_printf_i+0x118>
 8008e82:	2b08      	cmp	r3, #8
 8008e84:	d10b      	bne.n	8008e9e <_printf_i+0x14a>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	07de      	lsls	r6, r3, #31
 8008e8a:	d508      	bpl.n	8008e9e <_printf_i+0x14a>
 8008e8c:	6923      	ldr	r3, [r4, #16]
 8008e8e:	6861      	ldr	r1, [r4, #4]
 8008e90:	4299      	cmp	r1, r3
 8008e92:	bfde      	ittt	le
 8008e94:	2330      	movle	r3, #48	; 0x30
 8008e96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e9e:	1b52      	subs	r2, r2, r5
 8008ea0:	6122      	str	r2, [r4, #16]
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	f8cd a000 	str.w	sl, [sp]
 8008eac:	aa03      	add	r2, sp, #12
 8008eae:	f7ff fedf 	bl	8008c70 <_printf_common>
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	d14a      	bne.n	8008f4c <_printf_i+0x1f8>
 8008eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eba:	b004      	add	sp, #16
 8008ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	f043 0320 	orr.w	r3, r3, #32
 8008ec6:	6023      	str	r3, [r4, #0]
 8008ec8:	2778      	movs	r7, #120	; 0x78
 8008eca:	4832      	ldr	r0, [pc, #200]	; (8008f94 <_printf_i+0x240>)
 8008ecc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	6829      	ldr	r1, [r5, #0]
 8008ed4:	061f      	lsls	r7, r3, #24
 8008ed6:	f851 6b04 	ldr.w	r6, [r1], #4
 8008eda:	d402      	bmi.n	8008ee2 <_printf_i+0x18e>
 8008edc:	065f      	lsls	r7, r3, #25
 8008ede:	bf48      	it	mi
 8008ee0:	b2b6      	uxthmi	r6, r6
 8008ee2:	07df      	lsls	r7, r3, #31
 8008ee4:	bf48      	it	mi
 8008ee6:	f043 0320 	orrmi.w	r3, r3, #32
 8008eea:	6029      	str	r1, [r5, #0]
 8008eec:	bf48      	it	mi
 8008eee:	6023      	strmi	r3, [r4, #0]
 8008ef0:	b91e      	cbnz	r6, 8008efa <_printf_i+0x1a6>
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	f023 0320 	bic.w	r3, r3, #32
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	2310      	movs	r3, #16
 8008efc:	e7a6      	b.n	8008e4c <_printf_i+0xf8>
 8008efe:	4824      	ldr	r0, [pc, #144]	; (8008f90 <_printf_i+0x23c>)
 8008f00:	e7e4      	b.n	8008ecc <_printf_i+0x178>
 8008f02:	4615      	mov	r5, r2
 8008f04:	e7bd      	b.n	8008e82 <_printf_i+0x12e>
 8008f06:	682b      	ldr	r3, [r5, #0]
 8008f08:	6826      	ldr	r6, [r4, #0]
 8008f0a:	1d18      	adds	r0, r3, #4
 8008f0c:	6961      	ldr	r1, [r4, #20]
 8008f0e:	6028      	str	r0, [r5, #0]
 8008f10:	0635      	lsls	r5, r6, #24
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	d501      	bpl.n	8008f1a <_printf_i+0x1c6>
 8008f16:	6019      	str	r1, [r3, #0]
 8008f18:	e002      	b.n	8008f20 <_printf_i+0x1cc>
 8008f1a:	0670      	lsls	r0, r6, #25
 8008f1c:	d5fb      	bpl.n	8008f16 <_printf_i+0x1c2>
 8008f1e:	8019      	strh	r1, [r3, #0]
 8008f20:	2300      	movs	r3, #0
 8008f22:	4615      	mov	r5, r2
 8008f24:	6123      	str	r3, [r4, #16]
 8008f26:	e7bc      	b.n	8008ea2 <_printf_i+0x14e>
 8008f28:	682b      	ldr	r3, [r5, #0]
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	1d1a      	adds	r2, r3, #4
 8008f2e:	602a      	str	r2, [r5, #0]
 8008f30:	681d      	ldr	r5, [r3, #0]
 8008f32:	6862      	ldr	r2, [r4, #4]
 8008f34:	4628      	mov	r0, r5
 8008f36:	f000 f9d4 	bl	80092e2 <memchr>
 8008f3a:	b108      	cbz	r0, 8008f40 <_printf_i+0x1ec>
 8008f3c:	1b40      	subs	r0, r0, r5
 8008f3e:	6060      	str	r0, [r4, #4]
 8008f40:	6863      	ldr	r3, [r4, #4]
 8008f42:	6123      	str	r3, [r4, #16]
 8008f44:	2300      	movs	r3, #0
 8008f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f4a:	e7aa      	b.n	8008ea2 <_printf_i+0x14e>
 8008f4c:	462a      	mov	r2, r5
 8008f4e:	4649      	mov	r1, r9
 8008f50:	4640      	mov	r0, r8
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	47d0      	blx	sl
 8008f56:	3001      	adds	r0, #1
 8008f58:	d0ad      	beq.n	8008eb6 <_printf_i+0x162>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	079b      	lsls	r3, r3, #30
 8008f5e:	d413      	bmi.n	8008f88 <_printf_i+0x234>
 8008f60:	68e0      	ldr	r0, [r4, #12]
 8008f62:	9b03      	ldr	r3, [sp, #12]
 8008f64:	4298      	cmp	r0, r3
 8008f66:	bfb8      	it	lt
 8008f68:	4618      	movlt	r0, r3
 8008f6a:	e7a6      	b.n	8008eba <_printf_i+0x166>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	4632      	mov	r2, r6
 8008f70:	4649      	mov	r1, r9
 8008f72:	4640      	mov	r0, r8
 8008f74:	47d0      	blx	sl
 8008f76:	3001      	adds	r0, #1
 8008f78:	d09d      	beq.n	8008eb6 <_printf_i+0x162>
 8008f7a:	3501      	adds	r5, #1
 8008f7c:	68e3      	ldr	r3, [r4, #12]
 8008f7e:	9903      	ldr	r1, [sp, #12]
 8008f80:	1a5b      	subs	r3, r3, r1
 8008f82:	42ab      	cmp	r3, r5
 8008f84:	dcf2      	bgt.n	8008f6c <_printf_i+0x218>
 8008f86:	e7eb      	b.n	8008f60 <_printf_i+0x20c>
 8008f88:	2500      	movs	r5, #0
 8008f8a:	f104 0619 	add.w	r6, r4, #25
 8008f8e:	e7f5      	b.n	8008f7c <_printf_i+0x228>
 8008f90:	0800cf19 	.word	0x0800cf19
 8008f94:	0800cf2a 	.word	0x0800cf2a

08008f98 <std>:
 8008f98:	2300      	movs	r3, #0
 8008f9a:	b510      	push	{r4, lr}
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008fa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fa6:	6083      	str	r3, [r0, #8]
 8008fa8:	8181      	strh	r1, [r0, #12]
 8008faa:	6643      	str	r3, [r0, #100]	; 0x64
 8008fac:	81c2      	strh	r2, [r0, #14]
 8008fae:	6183      	str	r3, [r0, #24]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	2208      	movs	r2, #8
 8008fb4:	305c      	adds	r0, #92	; 0x5c
 8008fb6:	f000 f914 	bl	80091e2 <memset>
 8008fba:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <std+0x58>)
 8008fbc:	6224      	str	r4, [r4, #32]
 8008fbe:	6263      	str	r3, [r4, #36]	; 0x24
 8008fc0:	4b0c      	ldr	r3, [pc, #48]	; (8008ff4 <std+0x5c>)
 8008fc2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fc4:	4b0c      	ldr	r3, [pc, #48]	; (8008ff8 <std+0x60>)
 8008fc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fc8:	4b0c      	ldr	r3, [pc, #48]	; (8008ffc <std+0x64>)
 8008fca:	6323      	str	r3, [r4, #48]	; 0x30
 8008fcc:	4b0c      	ldr	r3, [pc, #48]	; (8009000 <std+0x68>)
 8008fce:	429c      	cmp	r4, r3
 8008fd0:	d006      	beq.n	8008fe0 <std+0x48>
 8008fd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008fd6:	4294      	cmp	r4, r2
 8008fd8:	d002      	beq.n	8008fe0 <std+0x48>
 8008fda:	33d0      	adds	r3, #208	; 0xd0
 8008fdc:	429c      	cmp	r4, r3
 8008fde:	d105      	bne.n	8008fec <std+0x54>
 8008fe0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe8:	f000 b978 	b.w	80092dc <__retarget_lock_init_recursive>
 8008fec:	bd10      	pop	{r4, pc}
 8008fee:	bf00      	nop
 8008ff0:	0800915d 	.word	0x0800915d
 8008ff4:	0800917f 	.word	0x0800917f
 8008ff8:	080091b7 	.word	0x080091b7
 8008ffc:	080091db 	.word	0x080091db
 8009000:	20000f44 	.word	0x20000f44

08009004 <stdio_exit_handler>:
 8009004:	4a02      	ldr	r2, [pc, #8]	; (8009010 <stdio_exit_handler+0xc>)
 8009006:	4903      	ldr	r1, [pc, #12]	; (8009014 <stdio_exit_handler+0x10>)
 8009008:	4803      	ldr	r0, [pc, #12]	; (8009018 <stdio_exit_handler+0x14>)
 800900a:	f000 b869 	b.w	80090e0 <_fwalk_sglue>
 800900e:	bf00      	nop
 8009010:	2000007c 	.word	0x2000007c
 8009014:	0800ac95 	.word	0x0800ac95
 8009018:	20000088 	.word	0x20000088

0800901c <cleanup_stdio>:
 800901c:	6841      	ldr	r1, [r0, #4]
 800901e:	4b0c      	ldr	r3, [pc, #48]	; (8009050 <cleanup_stdio+0x34>)
 8009020:	b510      	push	{r4, lr}
 8009022:	4299      	cmp	r1, r3
 8009024:	4604      	mov	r4, r0
 8009026:	d001      	beq.n	800902c <cleanup_stdio+0x10>
 8009028:	f001 fe34 	bl	800ac94 <_fflush_r>
 800902c:	68a1      	ldr	r1, [r4, #8]
 800902e:	4b09      	ldr	r3, [pc, #36]	; (8009054 <cleanup_stdio+0x38>)
 8009030:	4299      	cmp	r1, r3
 8009032:	d002      	beq.n	800903a <cleanup_stdio+0x1e>
 8009034:	4620      	mov	r0, r4
 8009036:	f001 fe2d 	bl	800ac94 <_fflush_r>
 800903a:	68e1      	ldr	r1, [r4, #12]
 800903c:	4b06      	ldr	r3, [pc, #24]	; (8009058 <cleanup_stdio+0x3c>)
 800903e:	4299      	cmp	r1, r3
 8009040:	d004      	beq.n	800904c <cleanup_stdio+0x30>
 8009042:	4620      	mov	r0, r4
 8009044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009048:	f001 be24 	b.w	800ac94 <_fflush_r>
 800904c:	bd10      	pop	{r4, pc}
 800904e:	bf00      	nop
 8009050:	20000f44 	.word	0x20000f44
 8009054:	20000fac 	.word	0x20000fac
 8009058:	20001014 	.word	0x20001014

0800905c <global_stdio_init.part.0>:
 800905c:	b510      	push	{r4, lr}
 800905e:	4b0b      	ldr	r3, [pc, #44]	; (800908c <global_stdio_init.part.0+0x30>)
 8009060:	4c0b      	ldr	r4, [pc, #44]	; (8009090 <global_stdio_init.part.0+0x34>)
 8009062:	4a0c      	ldr	r2, [pc, #48]	; (8009094 <global_stdio_init.part.0+0x38>)
 8009064:	4620      	mov	r0, r4
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	2104      	movs	r1, #4
 800906a:	2200      	movs	r2, #0
 800906c:	f7ff ff94 	bl	8008f98 <std>
 8009070:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009074:	2201      	movs	r2, #1
 8009076:	2109      	movs	r1, #9
 8009078:	f7ff ff8e 	bl	8008f98 <std>
 800907c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009080:	2202      	movs	r2, #2
 8009082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009086:	2112      	movs	r1, #18
 8009088:	f7ff bf86 	b.w	8008f98 <std>
 800908c:	2000107c 	.word	0x2000107c
 8009090:	20000f44 	.word	0x20000f44
 8009094:	08009005 	.word	0x08009005

08009098 <__sfp_lock_acquire>:
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <__sfp_lock_acquire+0x8>)
 800909a:	f000 b920 	b.w	80092de <__retarget_lock_acquire_recursive>
 800909e:	bf00      	nop
 80090a0:	20001085 	.word	0x20001085

080090a4 <__sfp_lock_release>:
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <__sfp_lock_release+0x8>)
 80090a6:	f000 b91b 	b.w	80092e0 <__retarget_lock_release_recursive>
 80090aa:	bf00      	nop
 80090ac:	20001085 	.word	0x20001085

080090b0 <__sinit>:
 80090b0:	b510      	push	{r4, lr}
 80090b2:	4604      	mov	r4, r0
 80090b4:	f7ff fff0 	bl	8009098 <__sfp_lock_acquire>
 80090b8:	6a23      	ldr	r3, [r4, #32]
 80090ba:	b11b      	cbz	r3, 80090c4 <__sinit+0x14>
 80090bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c0:	f7ff bff0 	b.w	80090a4 <__sfp_lock_release>
 80090c4:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <__sinit+0x28>)
 80090c6:	6223      	str	r3, [r4, #32]
 80090c8:	4b04      	ldr	r3, [pc, #16]	; (80090dc <__sinit+0x2c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1f5      	bne.n	80090bc <__sinit+0xc>
 80090d0:	f7ff ffc4 	bl	800905c <global_stdio_init.part.0>
 80090d4:	e7f2      	b.n	80090bc <__sinit+0xc>
 80090d6:	bf00      	nop
 80090d8:	0800901d 	.word	0x0800901d
 80090dc:	2000107c 	.word	0x2000107c

080090e0 <_fwalk_sglue>:
 80090e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e4:	4607      	mov	r7, r0
 80090e6:	4688      	mov	r8, r1
 80090e8:	4614      	mov	r4, r2
 80090ea:	2600      	movs	r6, #0
 80090ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090f0:	f1b9 0901 	subs.w	r9, r9, #1
 80090f4:	d505      	bpl.n	8009102 <_fwalk_sglue+0x22>
 80090f6:	6824      	ldr	r4, [r4, #0]
 80090f8:	2c00      	cmp	r4, #0
 80090fa:	d1f7      	bne.n	80090ec <_fwalk_sglue+0xc>
 80090fc:	4630      	mov	r0, r6
 80090fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009102:	89ab      	ldrh	r3, [r5, #12]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d907      	bls.n	8009118 <_fwalk_sglue+0x38>
 8009108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800910c:	3301      	adds	r3, #1
 800910e:	d003      	beq.n	8009118 <_fwalk_sglue+0x38>
 8009110:	4629      	mov	r1, r5
 8009112:	4638      	mov	r0, r7
 8009114:	47c0      	blx	r8
 8009116:	4306      	orrs	r6, r0
 8009118:	3568      	adds	r5, #104	; 0x68
 800911a:	e7e9      	b.n	80090f0 <_fwalk_sglue+0x10>

0800911c <siprintf>:
 800911c:	b40e      	push	{r1, r2, r3}
 800911e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009122:	b500      	push	{lr}
 8009124:	b09c      	sub	sp, #112	; 0x70
 8009126:	ab1d      	add	r3, sp, #116	; 0x74
 8009128:	9002      	str	r0, [sp, #8]
 800912a:	9006      	str	r0, [sp, #24]
 800912c:	9107      	str	r1, [sp, #28]
 800912e:	9104      	str	r1, [sp, #16]
 8009130:	4808      	ldr	r0, [pc, #32]	; (8009154 <siprintf+0x38>)
 8009132:	4909      	ldr	r1, [pc, #36]	; (8009158 <siprintf+0x3c>)
 8009134:	f853 2b04 	ldr.w	r2, [r3], #4
 8009138:	9105      	str	r1, [sp, #20]
 800913a:	6800      	ldr	r0, [r0, #0]
 800913c:	a902      	add	r1, sp, #8
 800913e:	9301      	str	r3, [sp, #4]
 8009140:	f001 fc28 	bl	800a994 <_svfiprintf_r>
 8009144:	2200      	movs	r2, #0
 8009146:	9b02      	ldr	r3, [sp, #8]
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	b01c      	add	sp, #112	; 0x70
 800914c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009150:	b003      	add	sp, #12
 8009152:	4770      	bx	lr
 8009154:	200000d4 	.word	0x200000d4
 8009158:	ffff0208 	.word	0xffff0208

0800915c <__sread>:
 800915c:	b510      	push	{r4, lr}
 800915e:	460c      	mov	r4, r1
 8009160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009164:	f000 f86c 	bl	8009240 <_read_r>
 8009168:	2800      	cmp	r0, #0
 800916a:	bfab      	itete	ge
 800916c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800916e:	89a3      	ldrhlt	r3, [r4, #12]
 8009170:	181b      	addge	r3, r3, r0
 8009172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009176:	bfac      	ite	ge
 8009178:	6563      	strge	r3, [r4, #84]	; 0x54
 800917a:	81a3      	strhlt	r3, [r4, #12]
 800917c:	bd10      	pop	{r4, pc}

0800917e <__swrite>:
 800917e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009182:	461f      	mov	r7, r3
 8009184:	898b      	ldrh	r3, [r1, #12]
 8009186:	4605      	mov	r5, r0
 8009188:	05db      	lsls	r3, r3, #23
 800918a:	460c      	mov	r4, r1
 800918c:	4616      	mov	r6, r2
 800918e:	d505      	bpl.n	800919c <__swrite+0x1e>
 8009190:	2302      	movs	r3, #2
 8009192:	2200      	movs	r2, #0
 8009194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009198:	f000 f840 	bl	800921c <_lseek_r>
 800919c:	89a3      	ldrh	r3, [r4, #12]
 800919e:	4632      	mov	r2, r6
 80091a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091a4:	81a3      	strh	r3, [r4, #12]
 80091a6:	4628      	mov	r0, r5
 80091a8:	463b      	mov	r3, r7
 80091aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091b2:	f000 b857 	b.w	8009264 <_write_r>

080091b6 <__sseek>:
 80091b6:	b510      	push	{r4, lr}
 80091b8:	460c      	mov	r4, r1
 80091ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091be:	f000 f82d 	bl	800921c <_lseek_r>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	bf15      	itete	ne
 80091c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80091ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80091ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80091d2:	81a3      	strheq	r3, [r4, #12]
 80091d4:	bf18      	it	ne
 80091d6:	81a3      	strhne	r3, [r4, #12]
 80091d8:	bd10      	pop	{r4, pc}

080091da <__sclose>:
 80091da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091de:	f000 b80d 	b.w	80091fc <_close_r>

080091e2 <memset>:
 80091e2:	4603      	mov	r3, r0
 80091e4:	4402      	add	r2, r0
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d100      	bne.n	80091ec <memset+0xa>
 80091ea:	4770      	bx	lr
 80091ec:	f803 1b01 	strb.w	r1, [r3], #1
 80091f0:	e7f9      	b.n	80091e6 <memset+0x4>
	...

080091f4 <_localeconv_r>:
 80091f4:	4800      	ldr	r0, [pc, #0]	; (80091f8 <_localeconv_r+0x4>)
 80091f6:	4770      	bx	lr
 80091f8:	200001c8 	.word	0x200001c8

080091fc <_close_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	2300      	movs	r3, #0
 8009200:	4d05      	ldr	r5, [pc, #20]	; (8009218 <_close_r+0x1c>)
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7fa f88a 	bl	8003320 <_close>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_close_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_close_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20001080 	.word	0x20001080

0800921c <_lseek_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	4611      	mov	r1, r2
 8009224:	2200      	movs	r2, #0
 8009226:	4d05      	ldr	r5, [pc, #20]	; (800923c <_lseek_r+0x20>)
 8009228:	602a      	str	r2, [r5, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	f7fa f89c 	bl	8003368 <_lseek>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_lseek_r+0x1e>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_lseek_r+0x1e>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20001080 	.word	0x20001080

08009240 <_read_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	4611      	mov	r1, r2
 8009248:	2200      	movs	r2, #0
 800924a:	4d05      	ldr	r5, [pc, #20]	; (8009260 <_read_r+0x20>)
 800924c:	602a      	str	r2, [r5, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	f7fa f82d 	bl	80032ae <_read>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_read_r+0x1e>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_read_r+0x1e>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20001080 	.word	0x20001080

08009264 <_write_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	4611      	mov	r1, r2
 800926c:	2200      	movs	r2, #0
 800926e:	4d05      	ldr	r5, [pc, #20]	; (8009284 <_write_r+0x20>)
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f7fa f838 	bl	80032e8 <_write>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_write_r+0x1e>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_write_r+0x1e>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	20001080 	.word	0x20001080

08009288 <__errno>:
 8009288:	4b01      	ldr	r3, [pc, #4]	; (8009290 <__errno+0x8>)
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	200000d4 	.word	0x200000d4

08009294 <__libc_init_array>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	2600      	movs	r6, #0
 8009298:	4d0c      	ldr	r5, [pc, #48]	; (80092cc <__libc_init_array+0x38>)
 800929a:	4c0d      	ldr	r4, [pc, #52]	; (80092d0 <__libc_init_array+0x3c>)
 800929c:	1b64      	subs	r4, r4, r5
 800929e:	10a4      	asrs	r4, r4, #2
 80092a0:	42a6      	cmp	r6, r4
 80092a2:	d109      	bne.n	80092b8 <__libc_init_array+0x24>
 80092a4:	f002 ff92 	bl	800c1cc <_init>
 80092a8:	2600      	movs	r6, #0
 80092aa:	4d0a      	ldr	r5, [pc, #40]	; (80092d4 <__libc_init_array+0x40>)
 80092ac:	4c0a      	ldr	r4, [pc, #40]	; (80092d8 <__libc_init_array+0x44>)
 80092ae:	1b64      	subs	r4, r4, r5
 80092b0:	10a4      	asrs	r4, r4, #2
 80092b2:	42a6      	cmp	r6, r4
 80092b4:	d105      	bne.n	80092c2 <__libc_init_array+0x2e>
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092bc:	4798      	blx	r3
 80092be:	3601      	adds	r6, #1
 80092c0:	e7ee      	b.n	80092a0 <__libc_init_array+0xc>
 80092c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c6:	4798      	blx	r3
 80092c8:	3601      	adds	r6, #1
 80092ca:	e7f2      	b.n	80092b2 <__libc_init_array+0x1e>
 80092cc:	0800d1b0 	.word	0x0800d1b0
 80092d0:	0800d1b0 	.word	0x0800d1b0
 80092d4:	0800d1b0 	.word	0x0800d1b0
 80092d8:	0800d1b4 	.word	0x0800d1b4

080092dc <__retarget_lock_init_recursive>:
 80092dc:	4770      	bx	lr

080092de <__retarget_lock_acquire_recursive>:
 80092de:	4770      	bx	lr

080092e0 <__retarget_lock_release_recursive>:
 80092e0:	4770      	bx	lr

080092e2 <memchr>:
 80092e2:	4603      	mov	r3, r0
 80092e4:	b510      	push	{r4, lr}
 80092e6:	b2c9      	uxtb	r1, r1
 80092e8:	4402      	add	r2, r0
 80092ea:	4293      	cmp	r3, r2
 80092ec:	4618      	mov	r0, r3
 80092ee:	d101      	bne.n	80092f4 <memchr+0x12>
 80092f0:	2000      	movs	r0, #0
 80092f2:	e003      	b.n	80092fc <memchr+0x1a>
 80092f4:	7804      	ldrb	r4, [r0, #0]
 80092f6:	3301      	adds	r3, #1
 80092f8:	428c      	cmp	r4, r1
 80092fa:	d1f6      	bne.n	80092ea <memchr+0x8>
 80092fc:	bd10      	pop	{r4, pc}

080092fe <memcpy>:
 80092fe:	440a      	add	r2, r1
 8009300:	4291      	cmp	r1, r2
 8009302:	f100 33ff 	add.w	r3, r0, #4294967295
 8009306:	d100      	bne.n	800930a <memcpy+0xc>
 8009308:	4770      	bx	lr
 800930a:	b510      	push	{r4, lr}
 800930c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009310:	4291      	cmp	r1, r2
 8009312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009316:	d1f9      	bne.n	800930c <memcpy+0xe>
 8009318:	bd10      	pop	{r4, pc}

0800931a <quorem>:
 800931a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931e:	6903      	ldr	r3, [r0, #16]
 8009320:	690c      	ldr	r4, [r1, #16]
 8009322:	4607      	mov	r7, r0
 8009324:	42a3      	cmp	r3, r4
 8009326:	db7f      	blt.n	8009428 <quorem+0x10e>
 8009328:	3c01      	subs	r4, #1
 800932a:	f100 0514 	add.w	r5, r0, #20
 800932e:	f101 0814 	add.w	r8, r1, #20
 8009332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800933c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009340:	3301      	adds	r3, #1
 8009342:	429a      	cmp	r2, r3
 8009344:	fbb2 f6f3 	udiv	r6, r2, r3
 8009348:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800934c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009350:	d331      	bcc.n	80093b6 <quorem+0x9c>
 8009352:	f04f 0e00 	mov.w	lr, #0
 8009356:	4640      	mov	r0, r8
 8009358:	46ac      	mov	ip, r5
 800935a:	46f2      	mov	sl, lr
 800935c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009360:	b293      	uxth	r3, r2
 8009362:	fb06 e303 	mla	r3, r6, r3, lr
 8009366:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800936a:	0c1a      	lsrs	r2, r3, #16
 800936c:	b29b      	uxth	r3, r3
 800936e:	fb06 220e 	mla	r2, r6, lr, r2
 8009372:	ebaa 0303 	sub.w	r3, sl, r3
 8009376:	f8dc a000 	ldr.w	sl, [ip]
 800937a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800937e:	fa1f fa8a 	uxth.w	sl, sl
 8009382:	4453      	add	r3, sl
 8009384:	f8dc a000 	ldr.w	sl, [ip]
 8009388:	b292      	uxth	r2, r2
 800938a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800938e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009392:	b29b      	uxth	r3, r3
 8009394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009398:	4581      	cmp	r9, r0
 800939a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800939e:	f84c 3b04 	str.w	r3, [ip], #4
 80093a2:	d2db      	bcs.n	800935c <quorem+0x42>
 80093a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80093a8:	b92b      	cbnz	r3, 80093b6 <quorem+0x9c>
 80093aa:	9b01      	ldr	r3, [sp, #4]
 80093ac:	3b04      	subs	r3, #4
 80093ae:	429d      	cmp	r5, r3
 80093b0:	461a      	mov	r2, r3
 80093b2:	d32d      	bcc.n	8009410 <quorem+0xf6>
 80093b4:	613c      	str	r4, [r7, #16]
 80093b6:	4638      	mov	r0, r7
 80093b8:	f001 f994 	bl	800a6e4 <__mcmp>
 80093bc:	2800      	cmp	r0, #0
 80093be:	db23      	blt.n	8009408 <quorem+0xee>
 80093c0:	4629      	mov	r1, r5
 80093c2:	2000      	movs	r0, #0
 80093c4:	3601      	adds	r6, #1
 80093c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80093ca:	f8d1 c000 	ldr.w	ip, [r1]
 80093ce:	b293      	uxth	r3, r2
 80093d0:	1ac3      	subs	r3, r0, r3
 80093d2:	0c12      	lsrs	r2, r2, #16
 80093d4:	fa1f f08c 	uxth.w	r0, ip
 80093d8:	4403      	add	r3, r0
 80093da:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80093de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093e8:	45c1      	cmp	r9, r8
 80093ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093ee:	f841 3b04 	str.w	r3, [r1], #4
 80093f2:	d2e8      	bcs.n	80093c6 <quorem+0xac>
 80093f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093fc:	b922      	cbnz	r2, 8009408 <quorem+0xee>
 80093fe:	3b04      	subs	r3, #4
 8009400:	429d      	cmp	r5, r3
 8009402:	461a      	mov	r2, r3
 8009404:	d30a      	bcc.n	800941c <quorem+0x102>
 8009406:	613c      	str	r4, [r7, #16]
 8009408:	4630      	mov	r0, r6
 800940a:	b003      	add	sp, #12
 800940c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009410:	6812      	ldr	r2, [r2, #0]
 8009412:	3b04      	subs	r3, #4
 8009414:	2a00      	cmp	r2, #0
 8009416:	d1cd      	bne.n	80093b4 <quorem+0x9a>
 8009418:	3c01      	subs	r4, #1
 800941a:	e7c8      	b.n	80093ae <quorem+0x94>
 800941c:	6812      	ldr	r2, [r2, #0]
 800941e:	3b04      	subs	r3, #4
 8009420:	2a00      	cmp	r2, #0
 8009422:	d1f0      	bne.n	8009406 <quorem+0xec>
 8009424:	3c01      	subs	r4, #1
 8009426:	e7eb      	b.n	8009400 <quorem+0xe6>
 8009428:	2000      	movs	r0, #0
 800942a:	e7ee      	b.n	800940a <quorem+0xf0>
 800942c:	0000      	movs	r0, r0
	...

08009430 <_dtoa_r>:
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	4616      	mov	r6, r2
 8009436:	461f      	mov	r7, r3
 8009438:	69c4      	ldr	r4, [r0, #28]
 800943a:	b099      	sub	sp, #100	; 0x64
 800943c:	4605      	mov	r5, r0
 800943e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009442:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009446:	b974      	cbnz	r4, 8009466 <_dtoa_r+0x36>
 8009448:	2010      	movs	r0, #16
 800944a:	f000 fe1d 	bl	800a088 <malloc>
 800944e:	4602      	mov	r2, r0
 8009450:	61e8      	str	r0, [r5, #28]
 8009452:	b920      	cbnz	r0, 800945e <_dtoa_r+0x2e>
 8009454:	21ef      	movs	r1, #239	; 0xef
 8009456:	4bac      	ldr	r3, [pc, #688]	; (8009708 <_dtoa_r+0x2d8>)
 8009458:	48ac      	ldr	r0, [pc, #688]	; (800970c <_dtoa_r+0x2dc>)
 800945a:	f001 fc6d 	bl	800ad38 <__assert_func>
 800945e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009462:	6004      	str	r4, [r0, #0]
 8009464:	60c4      	str	r4, [r0, #12]
 8009466:	69eb      	ldr	r3, [r5, #28]
 8009468:	6819      	ldr	r1, [r3, #0]
 800946a:	b151      	cbz	r1, 8009482 <_dtoa_r+0x52>
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	2301      	movs	r3, #1
 8009470:	4093      	lsls	r3, r2
 8009472:	604a      	str	r2, [r1, #4]
 8009474:	608b      	str	r3, [r1, #8]
 8009476:	4628      	mov	r0, r5
 8009478:	f000 fefa 	bl	800a270 <_Bfree>
 800947c:	2200      	movs	r2, #0
 800947e:	69eb      	ldr	r3, [r5, #28]
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	1e3b      	subs	r3, r7, #0
 8009484:	bfaf      	iteee	ge
 8009486:	2300      	movge	r3, #0
 8009488:	2201      	movlt	r2, #1
 800948a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800948e:	9305      	strlt	r3, [sp, #20]
 8009490:	bfa8      	it	ge
 8009492:	f8c8 3000 	strge.w	r3, [r8]
 8009496:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800949a:	4b9d      	ldr	r3, [pc, #628]	; (8009710 <_dtoa_r+0x2e0>)
 800949c:	bfb8      	it	lt
 800949e:	f8c8 2000 	strlt.w	r2, [r8]
 80094a2:	ea33 0309 	bics.w	r3, r3, r9
 80094a6:	d119      	bne.n	80094dc <_dtoa_r+0xac>
 80094a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80094ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80094ae:	6013      	str	r3, [r2, #0]
 80094b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094b4:	4333      	orrs	r3, r6
 80094b6:	f000 8589 	beq.w	8009fcc <_dtoa_r+0xb9c>
 80094ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094bc:	b953      	cbnz	r3, 80094d4 <_dtoa_r+0xa4>
 80094be:	4b95      	ldr	r3, [pc, #596]	; (8009714 <_dtoa_r+0x2e4>)
 80094c0:	e023      	b.n	800950a <_dtoa_r+0xda>
 80094c2:	4b95      	ldr	r3, [pc, #596]	; (8009718 <_dtoa_r+0x2e8>)
 80094c4:	9303      	str	r3, [sp, #12]
 80094c6:	3308      	adds	r3, #8
 80094c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	9803      	ldr	r0, [sp, #12]
 80094ce:	b019      	add	sp, #100	; 0x64
 80094d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d4:	4b8f      	ldr	r3, [pc, #572]	; (8009714 <_dtoa_r+0x2e4>)
 80094d6:	9303      	str	r3, [sp, #12]
 80094d8:	3303      	adds	r3, #3
 80094da:	e7f5      	b.n	80094c8 <_dtoa_r+0x98>
 80094dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80094e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80094e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094e8:	2200      	movs	r2, #0
 80094ea:	2300      	movs	r3, #0
 80094ec:	f7f7 fa5c 	bl	80009a8 <__aeabi_dcmpeq>
 80094f0:	4680      	mov	r8, r0
 80094f2:	b160      	cbz	r0, 800950e <_dtoa_r+0xde>
 80094f4:	2301      	movs	r3, #1
 80094f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80094f8:	6013      	str	r3, [r2, #0]
 80094fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 8562 	beq.w	8009fc6 <_dtoa_r+0xb96>
 8009502:	4b86      	ldr	r3, [pc, #536]	; (800971c <_dtoa_r+0x2ec>)
 8009504:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	3b01      	subs	r3, #1
 800950a:	9303      	str	r3, [sp, #12]
 800950c:	e7de      	b.n	80094cc <_dtoa_r+0x9c>
 800950e:	ab16      	add	r3, sp, #88	; 0x58
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	ab17      	add	r3, sp, #92	; 0x5c
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	4628      	mov	r0, r5
 8009518:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800951c:	f001 f98a 	bl	800a834 <__d2b>
 8009520:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009524:	4682      	mov	sl, r0
 8009526:	2c00      	cmp	r4, #0
 8009528:	d07e      	beq.n	8009628 <_dtoa_r+0x1f8>
 800952a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800952e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009530:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009538:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800953c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009540:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009544:	4619      	mov	r1, r3
 8009546:	2200      	movs	r2, #0
 8009548:	4b75      	ldr	r3, [pc, #468]	; (8009720 <_dtoa_r+0x2f0>)
 800954a:	f7f6 fe0d 	bl	8000168 <__aeabi_dsub>
 800954e:	a368      	add	r3, pc, #416	; (adr r3, 80096f0 <_dtoa_r+0x2c0>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f7f6 ffc0 	bl	80004d8 <__aeabi_dmul>
 8009558:	a367      	add	r3, pc, #412	; (adr r3, 80096f8 <_dtoa_r+0x2c8>)
 800955a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955e:	f7f6 fe05 	bl	800016c <__adddf3>
 8009562:	4606      	mov	r6, r0
 8009564:	4620      	mov	r0, r4
 8009566:	460f      	mov	r7, r1
 8009568:	f7f6 ff4c 	bl	8000404 <__aeabi_i2d>
 800956c:	a364      	add	r3, pc, #400	; (adr r3, 8009700 <_dtoa_r+0x2d0>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f6 ffb1 	bl	80004d8 <__aeabi_dmul>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4630      	mov	r0, r6
 800957c:	4639      	mov	r1, r7
 800957e:	f7f6 fdf5 	bl	800016c <__adddf3>
 8009582:	4606      	mov	r6, r0
 8009584:	460f      	mov	r7, r1
 8009586:	f7f7 fa57 	bl	8000a38 <__aeabi_d2iz>
 800958a:	2200      	movs	r2, #0
 800958c:	4683      	mov	fp, r0
 800958e:	2300      	movs	r3, #0
 8009590:	4630      	mov	r0, r6
 8009592:	4639      	mov	r1, r7
 8009594:	f7f7 fa12 	bl	80009bc <__aeabi_dcmplt>
 8009598:	b148      	cbz	r0, 80095ae <_dtoa_r+0x17e>
 800959a:	4658      	mov	r0, fp
 800959c:	f7f6 ff32 	bl	8000404 <__aeabi_i2d>
 80095a0:	4632      	mov	r2, r6
 80095a2:	463b      	mov	r3, r7
 80095a4:	f7f7 fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80095a8:	b908      	cbnz	r0, 80095ae <_dtoa_r+0x17e>
 80095aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095ae:	f1bb 0f16 	cmp.w	fp, #22
 80095b2:	d857      	bhi.n	8009664 <_dtoa_r+0x234>
 80095b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095b8:	4b5a      	ldr	r3, [pc, #360]	; (8009724 <_dtoa_r+0x2f4>)
 80095ba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	f7f7 f9fb 	bl	80009bc <__aeabi_dcmplt>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	d04e      	beq.n	8009668 <_dtoa_r+0x238>
 80095ca:	2300      	movs	r3, #0
 80095cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80095d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80095d4:	1b1b      	subs	r3, r3, r4
 80095d6:	1e5a      	subs	r2, r3, #1
 80095d8:	bf46      	itte	mi
 80095da:	f1c3 0901 	rsbmi	r9, r3, #1
 80095de:	2300      	movmi	r3, #0
 80095e0:	f04f 0900 	movpl.w	r9, #0
 80095e4:	9209      	str	r2, [sp, #36]	; 0x24
 80095e6:	bf48      	it	mi
 80095e8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80095ea:	f1bb 0f00 	cmp.w	fp, #0
 80095ee:	db3d      	blt.n	800966c <_dtoa_r+0x23c>
 80095f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80095f6:	445b      	add	r3, fp
 80095f8:	9309      	str	r3, [sp, #36]	; 0x24
 80095fa:	2300      	movs	r3, #0
 80095fc:	930a      	str	r3, [sp, #40]	; 0x28
 80095fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009600:	2b09      	cmp	r3, #9
 8009602:	d867      	bhi.n	80096d4 <_dtoa_r+0x2a4>
 8009604:	2b05      	cmp	r3, #5
 8009606:	bfc4      	itt	gt
 8009608:	3b04      	subgt	r3, #4
 800960a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800960c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800960e:	bfc8      	it	gt
 8009610:	2400      	movgt	r4, #0
 8009612:	f1a3 0302 	sub.w	r3, r3, #2
 8009616:	bfd8      	it	le
 8009618:	2401      	movle	r4, #1
 800961a:	2b03      	cmp	r3, #3
 800961c:	f200 8086 	bhi.w	800972c <_dtoa_r+0x2fc>
 8009620:	e8df f003 	tbb	[pc, r3]
 8009624:	5637392c 	.word	0x5637392c
 8009628:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800962c:	441c      	add	r4, r3
 800962e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009632:	2b20      	cmp	r3, #32
 8009634:	bfc1      	itttt	gt
 8009636:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800963a:	fa09 f903 	lslgt.w	r9, r9, r3
 800963e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009642:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009646:	bfd6      	itet	le
 8009648:	f1c3 0320 	rsble	r3, r3, #32
 800964c:	ea49 0003 	orrgt.w	r0, r9, r3
 8009650:	fa06 f003 	lslle.w	r0, r6, r3
 8009654:	f7f6 fec6 	bl	80003e4 <__aeabi_ui2d>
 8009658:	2201      	movs	r2, #1
 800965a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800965e:	3c01      	subs	r4, #1
 8009660:	9213      	str	r2, [sp, #76]	; 0x4c
 8009662:	e76f      	b.n	8009544 <_dtoa_r+0x114>
 8009664:	2301      	movs	r3, #1
 8009666:	e7b3      	b.n	80095d0 <_dtoa_r+0x1a0>
 8009668:	900f      	str	r0, [sp, #60]	; 0x3c
 800966a:	e7b2      	b.n	80095d2 <_dtoa_r+0x1a2>
 800966c:	f1cb 0300 	rsb	r3, fp, #0
 8009670:	930a      	str	r3, [sp, #40]	; 0x28
 8009672:	2300      	movs	r3, #0
 8009674:	eba9 090b 	sub.w	r9, r9, fp
 8009678:	930e      	str	r3, [sp, #56]	; 0x38
 800967a:	e7c0      	b.n	80095fe <_dtoa_r+0x1ce>
 800967c:	2300      	movs	r3, #0
 800967e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009680:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009682:	2b00      	cmp	r3, #0
 8009684:	dc55      	bgt.n	8009732 <_dtoa_r+0x302>
 8009686:	2301      	movs	r3, #1
 8009688:	461a      	mov	r2, r3
 800968a:	9306      	str	r3, [sp, #24]
 800968c:	9308      	str	r3, [sp, #32]
 800968e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009690:	e00b      	b.n	80096aa <_dtoa_r+0x27a>
 8009692:	2301      	movs	r3, #1
 8009694:	e7f3      	b.n	800967e <_dtoa_r+0x24e>
 8009696:	2300      	movs	r3, #0
 8009698:	930b      	str	r3, [sp, #44]	; 0x2c
 800969a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800969c:	445b      	add	r3, fp
 800969e:	9306      	str	r3, [sp, #24]
 80096a0:	3301      	adds	r3, #1
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	9308      	str	r3, [sp, #32]
 80096a6:	bfb8      	it	lt
 80096a8:	2301      	movlt	r3, #1
 80096aa:	2100      	movs	r1, #0
 80096ac:	2204      	movs	r2, #4
 80096ae:	69e8      	ldr	r0, [r5, #28]
 80096b0:	f102 0614 	add.w	r6, r2, #20
 80096b4:	429e      	cmp	r6, r3
 80096b6:	d940      	bls.n	800973a <_dtoa_r+0x30a>
 80096b8:	6041      	str	r1, [r0, #4]
 80096ba:	4628      	mov	r0, r5
 80096bc:	f000 fd98 	bl	800a1f0 <_Balloc>
 80096c0:	9003      	str	r0, [sp, #12]
 80096c2:	2800      	cmp	r0, #0
 80096c4:	d13c      	bne.n	8009740 <_dtoa_r+0x310>
 80096c6:	4602      	mov	r2, r0
 80096c8:	f240 11af 	movw	r1, #431	; 0x1af
 80096cc:	4b16      	ldr	r3, [pc, #88]	; (8009728 <_dtoa_r+0x2f8>)
 80096ce:	e6c3      	b.n	8009458 <_dtoa_r+0x28>
 80096d0:	2301      	movs	r3, #1
 80096d2:	e7e1      	b.n	8009698 <_dtoa_r+0x268>
 80096d4:	2401      	movs	r4, #1
 80096d6:	2300      	movs	r3, #0
 80096d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80096da:	9322      	str	r3, [sp, #136]	; 0x88
 80096dc:	f04f 33ff 	mov.w	r3, #4294967295
 80096e0:	2200      	movs	r2, #0
 80096e2:	9306      	str	r3, [sp, #24]
 80096e4:	9308      	str	r3, [sp, #32]
 80096e6:	2312      	movs	r3, #18
 80096e8:	e7d1      	b.n	800968e <_dtoa_r+0x25e>
 80096ea:	bf00      	nop
 80096ec:	f3af 8000 	nop.w
 80096f0:	636f4361 	.word	0x636f4361
 80096f4:	3fd287a7 	.word	0x3fd287a7
 80096f8:	8b60c8b3 	.word	0x8b60c8b3
 80096fc:	3fc68a28 	.word	0x3fc68a28
 8009700:	509f79fb 	.word	0x509f79fb
 8009704:	3fd34413 	.word	0x3fd34413
 8009708:	0800cf48 	.word	0x0800cf48
 800970c:	0800cf5f 	.word	0x0800cf5f
 8009710:	7ff00000 	.word	0x7ff00000
 8009714:	0800cf44 	.word	0x0800cf44
 8009718:	0800cf3b 	.word	0x0800cf3b
 800971c:	0800cf18 	.word	0x0800cf18
 8009720:	3ff80000 	.word	0x3ff80000
 8009724:	0800d050 	.word	0x0800d050
 8009728:	0800cfb7 	.word	0x0800cfb7
 800972c:	2301      	movs	r3, #1
 800972e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009730:	e7d4      	b.n	80096dc <_dtoa_r+0x2ac>
 8009732:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009734:	9306      	str	r3, [sp, #24]
 8009736:	9308      	str	r3, [sp, #32]
 8009738:	e7b7      	b.n	80096aa <_dtoa_r+0x27a>
 800973a:	3101      	adds	r1, #1
 800973c:	0052      	lsls	r2, r2, #1
 800973e:	e7b7      	b.n	80096b0 <_dtoa_r+0x280>
 8009740:	69eb      	ldr	r3, [r5, #28]
 8009742:	9a03      	ldr	r2, [sp, #12]
 8009744:	601a      	str	r2, [r3, #0]
 8009746:	9b08      	ldr	r3, [sp, #32]
 8009748:	2b0e      	cmp	r3, #14
 800974a:	f200 80a8 	bhi.w	800989e <_dtoa_r+0x46e>
 800974e:	2c00      	cmp	r4, #0
 8009750:	f000 80a5 	beq.w	800989e <_dtoa_r+0x46e>
 8009754:	f1bb 0f00 	cmp.w	fp, #0
 8009758:	dd34      	ble.n	80097c4 <_dtoa_r+0x394>
 800975a:	4b9a      	ldr	r3, [pc, #616]	; (80099c4 <_dtoa_r+0x594>)
 800975c:	f00b 020f 	and.w	r2, fp, #15
 8009760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009764:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009768:	e9d3 3400 	ldrd	r3, r4, [r3]
 800976c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009770:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009774:	d016      	beq.n	80097a4 <_dtoa_r+0x374>
 8009776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800977a:	4b93      	ldr	r3, [pc, #588]	; (80099c8 <_dtoa_r+0x598>)
 800977c:	2703      	movs	r7, #3
 800977e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009782:	f7f6 ffd3 	bl	800072c <__aeabi_ddiv>
 8009786:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800978a:	f004 040f 	and.w	r4, r4, #15
 800978e:	4e8e      	ldr	r6, [pc, #568]	; (80099c8 <_dtoa_r+0x598>)
 8009790:	b954      	cbnz	r4, 80097a8 <_dtoa_r+0x378>
 8009792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800979a:	f7f6 ffc7 	bl	800072c <__aeabi_ddiv>
 800979e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097a2:	e029      	b.n	80097f8 <_dtoa_r+0x3c8>
 80097a4:	2702      	movs	r7, #2
 80097a6:	e7f2      	b.n	800978e <_dtoa_r+0x35e>
 80097a8:	07e1      	lsls	r1, r4, #31
 80097aa:	d508      	bpl.n	80097be <_dtoa_r+0x38e>
 80097ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80097b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097b4:	f7f6 fe90 	bl	80004d8 <__aeabi_dmul>
 80097b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80097bc:	3701      	adds	r7, #1
 80097be:	1064      	asrs	r4, r4, #1
 80097c0:	3608      	adds	r6, #8
 80097c2:	e7e5      	b.n	8009790 <_dtoa_r+0x360>
 80097c4:	f000 80a5 	beq.w	8009912 <_dtoa_r+0x4e2>
 80097c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097cc:	f1cb 0400 	rsb	r4, fp, #0
 80097d0:	4b7c      	ldr	r3, [pc, #496]	; (80099c4 <_dtoa_r+0x594>)
 80097d2:	f004 020f 	and.w	r2, r4, #15
 80097d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f7f6 fe7b 	bl	80004d8 <__aeabi_dmul>
 80097e2:	2702      	movs	r7, #2
 80097e4:	2300      	movs	r3, #0
 80097e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097ea:	4e77      	ldr	r6, [pc, #476]	; (80099c8 <_dtoa_r+0x598>)
 80097ec:	1124      	asrs	r4, r4, #4
 80097ee:	2c00      	cmp	r4, #0
 80097f0:	f040 8084 	bne.w	80098fc <_dtoa_r+0x4cc>
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1d2      	bne.n	800979e <_dtoa_r+0x36e>
 80097f8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80097fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8087 	beq.w	8009916 <_dtoa_r+0x4e6>
 8009808:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800980c:	2200      	movs	r2, #0
 800980e:	4b6f      	ldr	r3, [pc, #444]	; (80099cc <_dtoa_r+0x59c>)
 8009810:	f7f7 f8d4 	bl	80009bc <__aeabi_dcmplt>
 8009814:	2800      	cmp	r0, #0
 8009816:	d07e      	beq.n	8009916 <_dtoa_r+0x4e6>
 8009818:	9b08      	ldr	r3, [sp, #32]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d07b      	beq.n	8009916 <_dtoa_r+0x4e6>
 800981e:	9b06      	ldr	r3, [sp, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	dd38      	ble.n	8009896 <_dtoa_r+0x466>
 8009824:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009828:	2200      	movs	r2, #0
 800982a:	4b69      	ldr	r3, [pc, #420]	; (80099d0 <_dtoa_r+0x5a0>)
 800982c:	f7f6 fe54 	bl	80004d8 <__aeabi_dmul>
 8009830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009834:	9c06      	ldr	r4, [sp, #24]
 8009836:	f10b 38ff 	add.w	r8, fp, #4294967295
 800983a:	3701      	adds	r7, #1
 800983c:	4638      	mov	r0, r7
 800983e:	f7f6 fde1 	bl	8000404 <__aeabi_i2d>
 8009842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009846:	f7f6 fe47 	bl	80004d8 <__aeabi_dmul>
 800984a:	2200      	movs	r2, #0
 800984c:	4b61      	ldr	r3, [pc, #388]	; (80099d4 <_dtoa_r+0x5a4>)
 800984e:	f7f6 fc8d 	bl	800016c <__adddf3>
 8009852:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009856:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800985a:	9611      	str	r6, [sp, #68]	; 0x44
 800985c:	2c00      	cmp	r4, #0
 800985e:	d15d      	bne.n	800991c <_dtoa_r+0x4ec>
 8009860:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009864:	2200      	movs	r2, #0
 8009866:	4b5c      	ldr	r3, [pc, #368]	; (80099d8 <_dtoa_r+0x5a8>)
 8009868:	f7f6 fc7e 	bl	8000168 <__aeabi_dsub>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009874:	4633      	mov	r3, r6
 8009876:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009878:	f7f7 f8be 	bl	80009f8 <__aeabi_dcmpgt>
 800987c:	2800      	cmp	r0, #0
 800987e:	f040 8295 	bne.w	8009dac <_dtoa_r+0x97c>
 8009882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009886:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009888:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800988c:	f7f7 f896 	bl	80009bc <__aeabi_dcmplt>
 8009890:	2800      	cmp	r0, #0
 8009892:	f040 8289 	bne.w	8009da8 <_dtoa_r+0x978>
 8009896:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800989a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800989e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	f2c0 8151 	blt.w	8009b48 <_dtoa_r+0x718>
 80098a6:	f1bb 0f0e 	cmp.w	fp, #14
 80098aa:	f300 814d 	bgt.w	8009b48 <_dtoa_r+0x718>
 80098ae:	4b45      	ldr	r3, [pc, #276]	; (80099c4 <_dtoa_r+0x594>)
 80098b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80098b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80098bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f280 80da 	bge.w	8009a78 <_dtoa_r+0x648>
 80098c4:	9b08      	ldr	r3, [sp, #32]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f300 80d6 	bgt.w	8009a78 <_dtoa_r+0x648>
 80098cc:	f040 826b 	bne.w	8009da6 <_dtoa_r+0x976>
 80098d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098d4:	2200      	movs	r2, #0
 80098d6:	4b40      	ldr	r3, [pc, #256]	; (80099d8 <_dtoa_r+0x5a8>)
 80098d8:	f7f6 fdfe 	bl	80004d8 <__aeabi_dmul>
 80098dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098e0:	f7f7 f880 	bl	80009e4 <__aeabi_dcmpge>
 80098e4:	9c08      	ldr	r4, [sp, #32]
 80098e6:	4626      	mov	r6, r4
 80098e8:	2800      	cmp	r0, #0
 80098ea:	f040 8241 	bne.w	8009d70 <_dtoa_r+0x940>
 80098ee:	2331      	movs	r3, #49	; 0x31
 80098f0:	9f03      	ldr	r7, [sp, #12]
 80098f2:	f10b 0b01 	add.w	fp, fp, #1
 80098f6:	f807 3b01 	strb.w	r3, [r7], #1
 80098fa:	e23d      	b.n	8009d78 <_dtoa_r+0x948>
 80098fc:	07e2      	lsls	r2, r4, #31
 80098fe:	d505      	bpl.n	800990c <_dtoa_r+0x4dc>
 8009900:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009904:	f7f6 fde8 	bl	80004d8 <__aeabi_dmul>
 8009908:	2301      	movs	r3, #1
 800990a:	3701      	adds	r7, #1
 800990c:	1064      	asrs	r4, r4, #1
 800990e:	3608      	adds	r6, #8
 8009910:	e76d      	b.n	80097ee <_dtoa_r+0x3be>
 8009912:	2702      	movs	r7, #2
 8009914:	e770      	b.n	80097f8 <_dtoa_r+0x3c8>
 8009916:	46d8      	mov	r8, fp
 8009918:	9c08      	ldr	r4, [sp, #32]
 800991a:	e78f      	b.n	800983c <_dtoa_r+0x40c>
 800991c:	9903      	ldr	r1, [sp, #12]
 800991e:	4b29      	ldr	r3, [pc, #164]	; (80099c4 <_dtoa_r+0x594>)
 8009920:	4421      	add	r1, r4
 8009922:	9112      	str	r1, [sp, #72]	; 0x48
 8009924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009926:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800992a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800992e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009932:	2900      	cmp	r1, #0
 8009934:	d054      	beq.n	80099e0 <_dtoa_r+0x5b0>
 8009936:	2000      	movs	r0, #0
 8009938:	4928      	ldr	r1, [pc, #160]	; (80099dc <_dtoa_r+0x5ac>)
 800993a:	f7f6 fef7 	bl	800072c <__aeabi_ddiv>
 800993e:	463b      	mov	r3, r7
 8009940:	4632      	mov	r2, r6
 8009942:	f7f6 fc11 	bl	8000168 <__aeabi_dsub>
 8009946:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800994a:	9f03      	ldr	r7, [sp, #12]
 800994c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009950:	f7f7 f872 	bl	8000a38 <__aeabi_d2iz>
 8009954:	4604      	mov	r4, r0
 8009956:	f7f6 fd55 	bl	8000404 <__aeabi_i2d>
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009962:	f7f6 fc01 	bl	8000168 <__aeabi_dsub>
 8009966:	4602      	mov	r2, r0
 8009968:	460b      	mov	r3, r1
 800996a:	3430      	adds	r4, #48	; 0x30
 800996c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009970:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009974:	f807 4b01 	strb.w	r4, [r7], #1
 8009978:	f7f7 f820 	bl	80009bc <__aeabi_dcmplt>
 800997c:	2800      	cmp	r0, #0
 800997e:	d173      	bne.n	8009a68 <_dtoa_r+0x638>
 8009980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009984:	2000      	movs	r0, #0
 8009986:	4911      	ldr	r1, [pc, #68]	; (80099cc <_dtoa_r+0x59c>)
 8009988:	f7f6 fbee 	bl	8000168 <__aeabi_dsub>
 800998c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009990:	f7f7 f814 	bl	80009bc <__aeabi_dcmplt>
 8009994:	2800      	cmp	r0, #0
 8009996:	f040 80b6 	bne.w	8009b06 <_dtoa_r+0x6d6>
 800999a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800999c:	429f      	cmp	r7, r3
 800999e:	f43f af7a 	beq.w	8009896 <_dtoa_r+0x466>
 80099a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80099a6:	2200      	movs	r2, #0
 80099a8:	4b09      	ldr	r3, [pc, #36]	; (80099d0 <_dtoa_r+0x5a0>)
 80099aa:	f7f6 fd95 	bl	80004d8 <__aeabi_dmul>
 80099ae:	2200      	movs	r2, #0
 80099b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80099b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099b8:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <_dtoa_r+0x5a0>)
 80099ba:	f7f6 fd8d 	bl	80004d8 <__aeabi_dmul>
 80099be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099c2:	e7c3      	b.n	800994c <_dtoa_r+0x51c>
 80099c4:	0800d050 	.word	0x0800d050
 80099c8:	0800d028 	.word	0x0800d028
 80099cc:	3ff00000 	.word	0x3ff00000
 80099d0:	40240000 	.word	0x40240000
 80099d4:	401c0000 	.word	0x401c0000
 80099d8:	40140000 	.word	0x40140000
 80099dc:	3fe00000 	.word	0x3fe00000
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f7f6 fd78 	bl	80004d8 <__aeabi_dmul>
 80099e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80099ee:	9c03      	ldr	r4, [sp, #12]
 80099f0:	9314      	str	r3, [sp, #80]	; 0x50
 80099f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099f6:	f7f7 f81f 	bl	8000a38 <__aeabi_d2iz>
 80099fa:	9015      	str	r0, [sp, #84]	; 0x54
 80099fc:	f7f6 fd02 	bl	8000404 <__aeabi_i2d>
 8009a00:	4602      	mov	r2, r0
 8009a02:	460b      	mov	r3, r1
 8009a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a08:	f7f6 fbae 	bl	8000168 <__aeabi_dsub>
 8009a0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a0e:	4606      	mov	r6, r0
 8009a10:	3330      	adds	r3, #48	; 0x30
 8009a12:	f804 3b01 	strb.w	r3, [r4], #1
 8009a16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a18:	460f      	mov	r7, r1
 8009a1a:	429c      	cmp	r4, r3
 8009a1c:	f04f 0200 	mov.w	r2, #0
 8009a20:	d124      	bne.n	8009a6c <_dtoa_r+0x63c>
 8009a22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a26:	4baf      	ldr	r3, [pc, #700]	; (8009ce4 <_dtoa_r+0x8b4>)
 8009a28:	f7f6 fba0 	bl	800016c <__adddf3>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	4630      	mov	r0, r6
 8009a32:	4639      	mov	r1, r7
 8009a34:	f7f6 ffe0 	bl	80009f8 <__aeabi_dcmpgt>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d163      	bne.n	8009b04 <_dtoa_r+0x6d4>
 8009a3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a40:	2000      	movs	r0, #0
 8009a42:	49a8      	ldr	r1, [pc, #672]	; (8009ce4 <_dtoa_r+0x8b4>)
 8009a44:	f7f6 fb90 	bl	8000168 <__aeabi_dsub>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	4639      	mov	r1, r7
 8009a50:	f7f6 ffb4 	bl	80009bc <__aeabi_dcmplt>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	f43f af1e 	beq.w	8009896 <_dtoa_r+0x466>
 8009a5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009a5c:	1e7b      	subs	r3, r7, #1
 8009a5e:	9314      	str	r3, [sp, #80]	; 0x50
 8009a60:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009a64:	2b30      	cmp	r3, #48	; 0x30
 8009a66:	d0f8      	beq.n	8009a5a <_dtoa_r+0x62a>
 8009a68:	46c3      	mov	fp, r8
 8009a6a:	e03b      	b.n	8009ae4 <_dtoa_r+0x6b4>
 8009a6c:	4b9e      	ldr	r3, [pc, #632]	; (8009ce8 <_dtoa_r+0x8b8>)
 8009a6e:	f7f6 fd33 	bl	80004d8 <__aeabi_dmul>
 8009a72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a76:	e7bc      	b.n	80099f2 <_dtoa_r+0x5c2>
 8009a78:	9f03      	ldr	r7, [sp, #12]
 8009a7a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009a7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a82:	4640      	mov	r0, r8
 8009a84:	4649      	mov	r1, r9
 8009a86:	f7f6 fe51 	bl	800072c <__aeabi_ddiv>
 8009a8a:	f7f6 ffd5 	bl	8000a38 <__aeabi_d2iz>
 8009a8e:	4604      	mov	r4, r0
 8009a90:	f7f6 fcb8 	bl	8000404 <__aeabi_i2d>
 8009a94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a98:	f7f6 fd1e 	bl	80004d8 <__aeabi_dmul>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	f7f6 fb60 	bl	8000168 <__aeabi_dsub>
 8009aa8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009aac:	f807 6b01 	strb.w	r6, [r7], #1
 8009ab0:	9e03      	ldr	r6, [sp, #12]
 8009ab2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009ab6:	1bbe      	subs	r6, r7, r6
 8009ab8:	45b4      	cmp	ip, r6
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	d136      	bne.n	8009b2e <_dtoa_r+0x6fe>
 8009ac0:	f7f6 fb54 	bl	800016c <__adddf3>
 8009ac4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ac8:	4680      	mov	r8, r0
 8009aca:	4689      	mov	r9, r1
 8009acc:	f7f6 ff94 	bl	80009f8 <__aeabi_dcmpgt>
 8009ad0:	bb58      	cbnz	r0, 8009b2a <_dtoa_r+0x6fa>
 8009ad2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ad6:	4640      	mov	r0, r8
 8009ad8:	4649      	mov	r1, r9
 8009ada:	f7f6 ff65 	bl	80009a8 <__aeabi_dcmpeq>
 8009ade:	b108      	cbz	r0, 8009ae4 <_dtoa_r+0x6b4>
 8009ae0:	07e3      	lsls	r3, r4, #31
 8009ae2:	d422      	bmi.n	8009b2a <_dtoa_r+0x6fa>
 8009ae4:	4651      	mov	r1, sl
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	f000 fbc2 	bl	800a270 <_Bfree>
 8009aec:	2300      	movs	r3, #0
 8009aee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009af0:	703b      	strb	r3, [r7, #0]
 8009af2:	f10b 0301 	add.w	r3, fp, #1
 8009af6:	6013      	str	r3, [r2, #0]
 8009af8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f43f ace6 	beq.w	80094cc <_dtoa_r+0x9c>
 8009b00:	601f      	str	r7, [r3, #0]
 8009b02:	e4e3      	b.n	80094cc <_dtoa_r+0x9c>
 8009b04:	4627      	mov	r7, r4
 8009b06:	463b      	mov	r3, r7
 8009b08:	461f      	mov	r7, r3
 8009b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b0e:	2a39      	cmp	r2, #57	; 0x39
 8009b10:	d107      	bne.n	8009b22 <_dtoa_r+0x6f2>
 8009b12:	9a03      	ldr	r2, [sp, #12]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d1f7      	bne.n	8009b08 <_dtoa_r+0x6d8>
 8009b18:	2230      	movs	r2, #48	; 0x30
 8009b1a:	9903      	ldr	r1, [sp, #12]
 8009b1c:	f108 0801 	add.w	r8, r8, #1
 8009b20:	700a      	strb	r2, [r1, #0]
 8009b22:	781a      	ldrb	r2, [r3, #0]
 8009b24:	3201      	adds	r2, #1
 8009b26:	701a      	strb	r2, [r3, #0]
 8009b28:	e79e      	b.n	8009a68 <_dtoa_r+0x638>
 8009b2a:	46d8      	mov	r8, fp
 8009b2c:	e7eb      	b.n	8009b06 <_dtoa_r+0x6d6>
 8009b2e:	2200      	movs	r2, #0
 8009b30:	4b6d      	ldr	r3, [pc, #436]	; (8009ce8 <_dtoa_r+0x8b8>)
 8009b32:	f7f6 fcd1 	bl	80004d8 <__aeabi_dmul>
 8009b36:	2200      	movs	r2, #0
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4680      	mov	r8, r0
 8009b3c:	4689      	mov	r9, r1
 8009b3e:	f7f6 ff33 	bl	80009a8 <__aeabi_dcmpeq>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d09b      	beq.n	8009a7e <_dtoa_r+0x64e>
 8009b46:	e7cd      	b.n	8009ae4 <_dtoa_r+0x6b4>
 8009b48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b4a:	2a00      	cmp	r2, #0
 8009b4c:	f000 80c4 	beq.w	8009cd8 <_dtoa_r+0x8a8>
 8009b50:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009b52:	2a01      	cmp	r2, #1
 8009b54:	f300 80a8 	bgt.w	8009ca8 <_dtoa_r+0x878>
 8009b58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	f000 80a0 	beq.w	8009ca0 <_dtoa_r+0x870>
 8009b60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b64:	464f      	mov	r7, r9
 8009b66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	441a      	add	r2, r3
 8009b6e:	4628      	mov	r0, r5
 8009b70:	4499      	add	r9, r3
 8009b72:	9209      	str	r2, [sp, #36]	; 0x24
 8009b74:	f000 fc32 	bl	800a3dc <__i2b>
 8009b78:	4606      	mov	r6, r0
 8009b7a:	b15f      	cbz	r7, 8009b94 <_dtoa_r+0x764>
 8009b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	dd08      	ble.n	8009b94 <_dtoa_r+0x764>
 8009b82:	42bb      	cmp	r3, r7
 8009b84:	bfa8      	it	ge
 8009b86:	463b      	movge	r3, r7
 8009b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b8a:	eba9 0903 	sub.w	r9, r9, r3
 8009b8e:	1aff      	subs	r7, r7, r3
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	9309      	str	r3, [sp, #36]	; 0x24
 8009b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b96:	b1f3      	cbz	r3, 8009bd6 <_dtoa_r+0x7a6>
 8009b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 80a0 	beq.w	8009ce0 <_dtoa_r+0x8b0>
 8009ba0:	2c00      	cmp	r4, #0
 8009ba2:	dd10      	ble.n	8009bc6 <_dtoa_r+0x796>
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f000 fcd5 	bl	800a558 <__pow5mult>
 8009bae:	4652      	mov	r2, sl
 8009bb0:	4601      	mov	r1, r0
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f000 fc27 	bl	800a408 <__multiply>
 8009bba:	4680      	mov	r8, r0
 8009bbc:	4651      	mov	r1, sl
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	f000 fb56 	bl	800a270 <_Bfree>
 8009bc4:	46c2      	mov	sl, r8
 8009bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc8:	1b1a      	subs	r2, r3, r4
 8009bca:	d004      	beq.n	8009bd6 <_dtoa_r+0x7a6>
 8009bcc:	4651      	mov	r1, sl
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f000 fcc2 	bl	800a558 <__pow5mult>
 8009bd4:	4682      	mov	sl, r0
 8009bd6:	2101      	movs	r1, #1
 8009bd8:	4628      	mov	r0, r5
 8009bda:	f000 fbff 	bl	800a3dc <__i2b>
 8009bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009be0:	4604      	mov	r4, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f340 8082 	ble.w	8009cec <_dtoa_r+0x8bc>
 8009be8:	461a      	mov	r2, r3
 8009bea:	4601      	mov	r1, r0
 8009bec:	4628      	mov	r0, r5
 8009bee:	f000 fcb3 	bl	800a558 <__pow5mult>
 8009bf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	dd7b      	ble.n	8009cf2 <_dtoa_r+0x8c2>
 8009bfa:	f04f 0800 	mov.w	r8, #0
 8009bfe:	6923      	ldr	r3, [r4, #16]
 8009c00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c04:	6918      	ldr	r0, [r3, #16]
 8009c06:	f000 fb9b 	bl	800a340 <__hi0bits>
 8009c0a:	f1c0 0020 	rsb	r0, r0, #32
 8009c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c10:	4418      	add	r0, r3
 8009c12:	f010 001f 	ands.w	r0, r0, #31
 8009c16:	f000 8092 	beq.w	8009d3e <_dtoa_r+0x90e>
 8009c1a:	f1c0 0320 	rsb	r3, r0, #32
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	f340 8085 	ble.w	8009d2e <_dtoa_r+0x8fe>
 8009c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c26:	f1c0 001c 	rsb	r0, r0, #28
 8009c2a:	4403      	add	r3, r0
 8009c2c:	4481      	add	r9, r0
 8009c2e:	4407      	add	r7, r0
 8009c30:	9309      	str	r3, [sp, #36]	; 0x24
 8009c32:	f1b9 0f00 	cmp.w	r9, #0
 8009c36:	dd05      	ble.n	8009c44 <_dtoa_r+0x814>
 8009c38:	4651      	mov	r1, sl
 8009c3a:	464a      	mov	r2, r9
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f000 fce5 	bl	800a60c <__lshift>
 8009c42:	4682      	mov	sl, r0
 8009c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	dd05      	ble.n	8009c56 <_dtoa_r+0x826>
 8009c4a:	4621      	mov	r1, r4
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f000 fcdc 	bl	800a60c <__lshift>
 8009c54:	4604      	mov	r4, r0
 8009c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d072      	beq.n	8009d42 <_dtoa_r+0x912>
 8009c5c:	4621      	mov	r1, r4
 8009c5e:	4650      	mov	r0, sl
 8009c60:	f000 fd40 	bl	800a6e4 <__mcmp>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	da6c      	bge.n	8009d42 <_dtoa_r+0x912>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	4651      	mov	r1, sl
 8009c6c:	220a      	movs	r2, #10
 8009c6e:	4628      	mov	r0, r5
 8009c70:	f000 fb20 	bl	800a2b4 <__multadd>
 8009c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c76:	4682      	mov	sl, r0
 8009c78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f000 81ac 	beq.w	8009fda <_dtoa_r+0xbaa>
 8009c82:	2300      	movs	r3, #0
 8009c84:	4631      	mov	r1, r6
 8009c86:	220a      	movs	r2, #10
 8009c88:	4628      	mov	r0, r5
 8009c8a:	f000 fb13 	bl	800a2b4 <__multadd>
 8009c8e:	9b06      	ldr	r3, [sp, #24]
 8009c90:	4606      	mov	r6, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f300 8093 	bgt.w	8009dbe <_dtoa_r+0x98e>
 8009c98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	dc59      	bgt.n	8009d52 <_dtoa_r+0x922>
 8009c9e:	e08e      	b.n	8009dbe <_dtoa_r+0x98e>
 8009ca0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009ca2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009ca6:	e75d      	b.n	8009b64 <_dtoa_r+0x734>
 8009ca8:	9b08      	ldr	r3, [sp, #32]
 8009caa:	1e5c      	subs	r4, r3, #1
 8009cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	bfbf      	itttt	lt
 8009cb2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009cb4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009cb6:	1ae3      	sublt	r3, r4, r3
 8009cb8:	18d2      	addlt	r2, r2, r3
 8009cba:	bfa8      	it	ge
 8009cbc:	1b1c      	subge	r4, r3, r4
 8009cbe:	9b08      	ldr	r3, [sp, #32]
 8009cc0:	bfbe      	ittt	lt
 8009cc2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009cc4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009cc6:	2400      	movlt	r4, #0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	bfb5      	itete	lt
 8009ccc:	eba9 0703 	sublt.w	r7, r9, r3
 8009cd0:	464f      	movge	r7, r9
 8009cd2:	2300      	movlt	r3, #0
 8009cd4:	9b08      	ldrge	r3, [sp, #32]
 8009cd6:	e747      	b.n	8009b68 <_dtoa_r+0x738>
 8009cd8:	464f      	mov	r7, r9
 8009cda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009cdc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009cde:	e74c      	b.n	8009b7a <_dtoa_r+0x74a>
 8009ce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ce2:	e773      	b.n	8009bcc <_dtoa_r+0x79c>
 8009ce4:	3fe00000 	.word	0x3fe00000
 8009ce8:	40240000 	.word	0x40240000
 8009cec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	dc18      	bgt.n	8009d24 <_dtoa_r+0x8f4>
 8009cf2:	9b04      	ldr	r3, [sp, #16]
 8009cf4:	b9b3      	cbnz	r3, 8009d24 <_dtoa_r+0x8f4>
 8009cf6:	9b05      	ldr	r3, [sp, #20]
 8009cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cfc:	b993      	cbnz	r3, 8009d24 <_dtoa_r+0x8f4>
 8009cfe:	9b05      	ldr	r3, [sp, #20]
 8009d00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d04:	0d1b      	lsrs	r3, r3, #20
 8009d06:	051b      	lsls	r3, r3, #20
 8009d08:	b17b      	cbz	r3, 8009d2a <_dtoa_r+0x8fa>
 8009d0a:	f04f 0801 	mov.w	r8, #1
 8009d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d10:	f109 0901 	add.w	r9, r9, #1
 8009d14:	3301      	adds	r3, #1
 8009d16:	9309      	str	r3, [sp, #36]	; 0x24
 8009d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f47f af6f 	bne.w	8009bfe <_dtoa_r+0x7ce>
 8009d20:	2001      	movs	r0, #1
 8009d22:	e774      	b.n	8009c0e <_dtoa_r+0x7de>
 8009d24:	f04f 0800 	mov.w	r8, #0
 8009d28:	e7f6      	b.n	8009d18 <_dtoa_r+0x8e8>
 8009d2a:	4698      	mov	r8, r3
 8009d2c:	e7f4      	b.n	8009d18 <_dtoa_r+0x8e8>
 8009d2e:	d080      	beq.n	8009c32 <_dtoa_r+0x802>
 8009d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d32:	331c      	adds	r3, #28
 8009d34:	441a      	add	r2, r3
 8009d36:	4499      	add	r9, r3
 8009d38:	441f      	add	r7, r3
 8009d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d3c:	e779      	b.n	8009c32 <_dtoa_r+0x802>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	e7f6      	b.n	8009d30 <_dtoa_r+0x900>
 8009d42:	9b08      	ldr	r3, [sp, #32]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	dc34      	bgt.n	8009db2 <_dtoa_r+0x982>
 8009d48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	dd31      	ble.n	8009db2 <_dtoa_r+0x982>
 8009d4e:	9b08      	ldr	r3, [sp, #32]
 8009d50:	9306      	str	r3, [sp, #24]
 8009d52:	9b06      	ldr	r3, [sp, #24]
 8009d54:	b963      	cbnz	r3, 8009d70 <_dtoa_r+0x940>
 8009d56:	4621      	mov	r1, r4
 8009d58:	2205      	movs	r2, #5
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f000 faaa 	bl	800a2b4 <__multadd>
 8009d60:	4601      	mov	r1, r0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4650      	mov	r0, sl
 8009d66:	f000 fcbd 	bl	800a6e4 <__mcmp>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	f73f adbf 	bgt.w	80098ee <_dtoa_r+0x4be>
 8009d70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d72:	9f03      	ldr	r7, [sp, #12]
 8009d74:	ea6f 0b03 	mvn.w	fp, r3
 8009d78:	f04f 0800 	mov.w	r8, #0
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 fa76 	bl	800a270 <_Bfree>
 8009d84:	2e00      	cmp	r6, #0
 8009d86:	f43f aead 	beq.w	8009ae4 <_dtoa_r+0x6b4>
 8009d8a:	f1b8 0f00 	cmp.w	r8, #0
 8009d8e:	d005      	beq.n	8009d9c <_dtoa_r+0x96c>
 8009d90:	45b0      	cmp	r8, r6
 8009d92:	d003      	beq.n	8009d9c <_dtoa_r+0x96c>
 8009d94:	4641      	mov	r1, r8
 8009d96:	4628      	mov	r0, r5
 8009d98:	f000 fa6a 	bl	800a270 <_Bfree>
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f000 fa66 	bl	800a270 <_Bfree>
 8009da4:	e69e      	b.n	8009ae4 <_dtoa_r+0x6b4>
 8009da6:	2400      	movs	r4, #0
 8009da8:	4626      	mov	r6, r4
 8009daa:	e7e1      	b.n	8009d70 <_dtoa_r+0x940>
 8009dac:	46c3      	mov	fp, r8
 8009dae:	4626      	mov	r6, r4
 8009db0:	e59d      	b.n	80098ee <_dtoa_r+0x4be>
 8009db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 80c8 	beq.w	8009f4a <_dtoa_r+0xb1a>
 8009dba:	9b08      	ldr	r3, [sp, #32]
 8009dbc:	9306      	str	r3, [sp, #24]
 8009dbe:	2f00      	cmp	r7, #0
 8009dc0:	dd05      	ble.n	8009dce <_dtoa_r+0x99e>
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	463a      	mov	r2, r7
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f000 fc20 	bl	800a60c <__lshift>
 8009dcc:	4606      	mov	r6, r0
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	d05b      	beq.n	8009e8c <_dtoa_r+0xa5c>
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	6871      	ldr	r1, [r6, #4]
 8009dd8:	f000 fa0a 	bl	800a1f0 <_Balloc>
 8009ddc:	4607      	mov	r7, r0
 8009dde:	b928      	cbnz	r0, 8009dec <_dtoa_r+0x9bc>
 8009de0:	4602      	mov	r2, r0
 8009de2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009de6:	4b81      	ldr	r3, [pc, #516]	; (8009fec <_dtoa_r+0xbbc>)
 8009de8:	f7ff bb36 	b.w	8009458 <_dtoa_r+0x28>
 8009dec:	6932      	ldr	r2, [r6, #16]
 8009dee:	f106 010c 	add.w	r1, r6, #12
 8009df2:	3202      	adds	r2, #2
 8009df4:	0092      	lsls	r2, r2, #2
 8009df6:	300c      	adds	r0, #12
 8009df8:	f7ff fa81 	bl	80092fe <memcpy>
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	4639      	mov	r1, r7
 8009e00:	4628      	mov	r0, r5
 8009e02:	f000 fc03 	bl	800a60c <__lshift>
 8009e06:	46b0      	mov	r8, r6
 8009e08:	4606      	mov	r6, r0
 8009e0a:	9b03      	ldr	r3, [sp, #12]
 8009e0c:	9a03      	ldr	r2, [sp, #12]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	9308      	str	r3, [sp, #32]
 8009e12:	9b06      	ldr	r3, [sp, #24]
 8009e14:	4413      	add	r3, r2
 8009e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e18:	9b04      	ldr	r3, [sp, #16]
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e20:	9b08      	ldr	r3, [sp, #32]
 8009e22:	4621      	mov	r1, r4
 8009e24:	3b01      	subs	r3, #1
 8009e26:	4650      	mov	r0, sl
 8009e28:	9304      	str	r3, [sp, #16]
 8009e2a:	f7ff fa76 	bl	800931a <quorem>
 8009e2e:	4641      	mov	r1, r8
 8009e30:	9006      	str	r0, [sp, #24]
 8009e32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009e36:	4650      	mov	r0, sl
 8009e38:	f000 fc54 	bl	800a6e4 <__mcmp>
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	9009      	str	r0, [sp, #36]	; 0x24
 8009e40:	4621      	mov	r1, r4
 8009e42:	4628      	mov	r0, r5
 8009e44:	f000 fc6a 	bl	800a71c <__mdiff>
 8009e48:	68c2      	ldr	r2, [r0, #12]
 8009e4a:	4607      	mov	r7, r0
 8009e4c:	bb02      	cbnz	r2, 8009e90 <_dtoa_r+0xa60>
 8009e4e:	4601      	mov	r1, r0
 8009e50:	4650      	mov	r0, sl
 8009e52:	f000 fc47 	bl	800a6e4 <__mcmp>
 8009e56:	4602      	mov	r2, r0
 8009e58:	4639      	mov	r1, r7
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	920c      	str	r2, [sp, #48]	; 0x30
 8009e5e:	f000 fa07 	bl	800a270 <_Bfree>
 8009e62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e66:	9f08      	ldr	r7, [sp, #32]
 8009e68:	ea43 0102 	orr.w	r1, r3, r2
 8009e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e6e:	4319      	orrs	r1, r3
 8009e70:	d110      	bne.n	8009e94 <_dtoa_r+0xa64>
 8009e72:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e76:	d029      	beq.n	8009ecc <_dtoa_r+0xa9c>
 8009e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dd02      	ble.n	8009e84 <_dtoa_r+0xa54>
 8009e7e:	9b06      	ldr	r3, [sp, #24]
 8009e80:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009e84:	9b04      	ldr	r3, [sp, #16]
 8009e86:	f883 9000 	strb.w	r9, [r3]
 8009e8a:	e777      	b.n	8009d7c <_dtoa_r+0x94c>
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	e7ba      	b.n	8009e06 <_dtoa_r+0x9d6>
 8009e90:	2201      	movs	r2, #1
 8009e92:	e7e1      	b.n	8009e58 <_dtoa_r+0xa28>
 8009e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	db04      	blt.n	8009ea4 <_dtoa_r+0xa74>
 8009e9a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009e9c:	430b      	orrs	r3, r1
 8009e9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	d120      	bne.n	8009ee6 <_dtoa_r+0xab6>
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	dded      	ble.n	8009e84 <_dtoa_r+0xa54>
 8009ea8:	4651      	mov	r1, sl
 8009eaa:	2201      	movs	r2, #1
 8009eac:	4628      	mov	r0, r5
 8009eae:	f000 fbad 	bl	800a60c <__lshift>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4682      	mov	sl, r0
 8009eb6:	f000 fc15 	bl	800a6e4 <__mcmp>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	dc03      	bgt.n	8009ec6 <_dtoa_r+0xa96>
 8009ebe:	d1e1      	bne.n	8009e84 <_dtoa_r+0xa54>
 8009ec0:	f019 0f01 	tst.w	r9, #1
 8009ec4:	d0de      	beq.n	8009e84 <_dtoa_r+0xa54>
 8009ec6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009eca:	d1d8      	bne.n	8009e7e <_dtoa_r+0xa4e>
 8009ecc:	2339      	movs	r3, #57	; 0x39
 8009ece:	9a04      	ldr	r2, [sp, #16]
 8009ed0:	7013      	strb	r3, [r2, #0]
 8009ed2:	463b      	mov	r3, r7
 8009ed4:	461f      	mov	r7, r3
 8009ed6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009eda:	3b01      	subs	r3, #1
 8009edc:	2a39      	cmp	r2, #57	; 0x39
 8009ede:	d06b      	beq.n	8009fb8 <_dtoa_r+0xb88>
 8009ee0:	3201      	adds	r2, #1
 8009ee2:	701a      	strb	r2, [r3, #0]
 8009ee4:	e74a      	b.n	8009d7c <_dtoa_r+0x94c>
 8009ee6:	2a00      	cmp	r2, #0
 8009ee8:	dd07      	ble.n	8009efa <_dtoa_r+0xaca>
 8009eea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009eee:	d0ed      	beq.n	8009ecc <_dtoa_r+0xa9c>
 8009ef0:	9a04      	ldr	r2, [sp, #16]
 8009ef2:	f109 0301 	add.w	r3, r9, #1
 8009ef6:	7013      	strb	r3, [r2, #0]
 8009ef8:	e740      	b.n	8009d7c <_dtoa_r+0x94c>
 8009efa:	9b08      	ldr	r3, [sp, #32]
 8009efc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009efe:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d042      	beq.n	8009f8c <_dtoa_r+0xb5c>
 8009f06:	4651      	mov	r1, sl
 8009f08:	2300      	movs	r3, #0
 8009f0a:	220a      	movs	r2, #10
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f000 f9d1 	bl	800a2b4 <__multadd>
 8009f12:	45b0      	cmp	r8, r6
 8009f14:	4682      	mov	sl, r0
 8009f16:	f04f 0300 	mov.w	r3, #0
 8009f1a:	f04f 020a 	mov.w	r2, #10
 8009f1e:	4641      	mov	r1, r8
 8009f20:	4628      	mov	r0, r5
 8009f22:	d107      	bne.n	8009f34 <_dtoa_r+0xb04>
 8009f24:	f000 f9c6 	bl	800a2b4 <__multadd>
 8009f28:	4680      	mov	r8, r0
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	9b08      	ldr	r3, [sp, #32]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	9308      	str	r3, [sp, #32]
 8009f32:	e775      	b.n	8009e20 <_dtoa_r+0x9f0>
 8009f34:	f000 f9be 	bl	800a2b4 <__multadd>
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4680      	mov	r8, r0
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	220a      	movs	r2, #10
 8009f40:	4628      	mov	r0, r5
 8009f42:	f000 f9b7 	bl	800a2b4 <__multadd>
 8009f46:	4606      	mov	r6, r0
 8009f48:	e7f0      	b.n	8009f2c <_dtoa_r+0xafc>
 8009f4a:	9b08      	ldr	r3, [sp, #32]
 8009f4c:	9306      	str	r3, [sp, #24]
 8009f4e:	9f03      	ldr	r7, [sp, #12]
 8009f50:	4621      	mov	r1, r4
 8009f52:	4650      	mov	r0, sl
 8009f54:	f7ff f9e1 	bl	800931a <quorem>
 8009f58:	9b03      	ldr	r3, [sp, #12]
 8009f5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f5e:	f807 9b01 	strb.w	r9, [r7], #1
 8009f62:	1afa      	subs	r2, r7, r3
 8009f64:	9b06      	ldr	r3, [sp, #24]
 8009f66:	4293      	cmp	r3, r2
 8009f68:	dd07      	ble.n	8009f7a <_dtoa_r+0xb4a>
 8009f6a:	4651      	mov	r1, sl
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	220a      	movs	r2, #10
 8009f70:	4628      	mov	r0, r5
 8009f72:	f000 f99f 	bl	800a2b4 <__multadd>
 8009f76:	4682      	mov	sl, r0
 8009f78:	e7ea      	b.n	8009f50 <_dtoa_r+0xb20>
 8009f7a:	9b06      	ldr	r3, [sp, #24]
 8009f7c:	f04f 0800 	mov.w	r8, #0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bfcc      	ite	gt
 8009f84:	461f      	movgt	r7, r3
 8009f86:	2701      	movle	r7, #1
 8009f88:	9b03      	ldr	r3, [sp, #12]
 8009f8a:	441f      	add	r7, r3
 8009f8c:	4651      	mov	r1, sl
 8009f8e:	2201      	movs	r2, #1
 8009f90:	4628      	mov	r0, r5
 8009f92:	f000 fb3b 	bl	800a60c <__lshift>
 8009f96:	4621      	mov	r1, r4
 8009f98:	4682      	mov	sl, r0
 8009f9a:	f000 fba3 	bl	800a6e4 <__mcmp>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	dc97      	bgt.n	8009ed2 <_dtoa_r+0xaa2>
 8009fa2:	d102      	bne.n	8009faa <_dtoa_r+0xb7a>
 8009fa4:	f019 0f01 	tst.w	r9, #1
 8009fa8:	d193      	bne.n	8009ed2 <_dtoa_r+0xaa2>
 8009faa:	463b      	mov	r3, r7
 8009fac:	461f      	mov	r7, r3
 8009fae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fb2:	2a30      	cmp	r2, #48	; 0x30
 8009fb4:	d0fa      	beq.n	8009fac <_dtoa_r+0xb7c>
 8009fb6:	e6e1      	b.n	8009d7c <_dtoa_r+0x94c>
 8009fb8:	9a03      	ldr	r2, [sp, #12]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d18a      	bne.n	8009ed4 <_dtoa_r+0xaa4>
 8009fbe:	2331      	movs	r3, #49	; 0x31
 8009fc0:	f10b 0b01 	add.w	fp, fp, #1
 8009fc4:	e797      	b.n	8009ef6 <_dtoa_r+0xac6>
 8009fc6:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <_dtoa_r+0xbc0>)
 8009fc8:	f7ff ba9f 	b.w	800950a <_dtoa_r+0xda>
 8009fcc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f47f aa77 	bne.w	80094c2 <_dtoa_r+0x92>
 8009fd4:	4b07      	ldr	r3, [pc, #28]	; (8009ff4 <_dtoa_r+0xbc4>)
 8009fd6:	f7ff ba98 	b.w	800950a <_dtoa_r+0xda>
 8009fda:	9b06      	ldr	r3, [sp, #24]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	dcb6      	bgt.n	8009f4e <_dtoa_r+0xb1e>
 8009fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	f73f aeb5 	bgt.w	8009d52 <_dtoa_r+0x922>
 8009fe8:	e7b1      	b.n	8009f4e <_dtoa_r+0xb1e>
 8009fea:	bf00      	nop
 8009fec:	0800cfb7 	.word	0x0800cfb7
 8009ff0:	0800cf17 	.word	0x0800cf17
 8009ff4:	0800cf3b 	.word	0x0800cf3b

08009ff8 <_free_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	2900      	cmp	r1, #0
 8009ffe:	d040      	beq.n	800a082 <_free_r+0x8a>
 800a000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a004:	1f0c      	subs	r4, r1, #4
 800a006:	2b00      	cmp	r3, #0
 800a008:	bfb8      	it	lt
 800a00a:	18e4      	addlt	r4, r4, r3
 800a00c:	f000 f8e4 	bl	800a1d8 <__malloc_lock>
 800a010:	4a1c      	ldr	r2, [pc, #112]	; (800a084 <_free_r+0x8c>)
 800a012:	6813      	ldr	r3, [r2, #0]
 800a014:	b933      	cbnz	r3, 800a024 <_free_r+0x2c>
 800a016:	6063      	str	r3, [r4, #4]
 800a018:	6014      	str	r4, [r2, #0]
 800a01a:	4628      	mov	r0, r5
 800a01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a020:	f000 b8e0 	b.w	800a1e4 <__malloc_unlock>
 800a024:	42a3      	cmp	r3, r4
 800a026:	d908      	bls.n	800a03a <_free_r+0x42>
 800a028:	6820      	ldr	r0, [r4, #0]
 800a02a:	1821      	adds	r1, r4, r0
 800a02c:	428b      	cmp	r3, r1
 800a02e:	bf01      	itttt	eq
 800a030:	6819      	ldreq	r1, [r3, #0]
 800a032:	685b      	ldreq	r3, [r3, #4]
 800a034:	1809      	addeq	r1, r1, r0
 800a036:	6021      	streq	r1, [r4, #0]
 800a038:	e7ed      	b.n	800a016 <_free_r+0x1e>
 800a03a:	461a      	mov	r2, r3
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	b10b      	cbz	r3, 800a044 <_free_r+0x4c>
 800a040:	42a3      	cmp	r3, r4
 800a042:	d9fa      	bls.n	800a03a <_free_r+0x42>
 800a044:	6811      	ldr	r1, [r2, #0]
 800a046:	1850      	adds	r0, r2, r1
 800a048:	42a0      	cmp	r0, r4
 800a04a:	d10b      	bne.n	800a064 <_free_r+0x6c>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	4401      	add	r1, r0
 800a050:	1850      	adds	r0, r2, r1
 800a052:	4283      	cmp	r3, r0
 800a054:	6011      	str	r1, [r2, #0]
 800a056:	d1e0      	bne.n	800a01a <_free_r+0x22>
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	4408      	add	r0, r1
 800a05e:	6010      	str	r0, [r2, #0]
 800a060:	6053      	str	r3, [r2, #4]
 800a062:	e7da      	b.n	800a01a <_free_r+0x22>
 800a064:	d902      	bls.n	800a06c <_free_r+0x74>
 800a066:	230c      	movs	r3, #12
 800a068:	602b      	str	r3, [r5, #0]
 800a06a:	e7d6      	b.n	800a01a <_free_r+0x22>
 800a06c:	6820      	ldr	r0, [r4, #0]
 800a06e:	1821      	adds	r1, r4, r0
 800a070:	428b      	cmp	r3, r1
 800a072:	bf01      	itttt	eq
 800a074:	6819      	ldreq	r1, [r3, #0]
 800a076:	685b      	ldreq	r3, [r3, #4]
 800a078:	1809      	addeq	r1, r1, r0
 800a07a:	6021      	streq	r1, [r4, #0]
 800a07c:	6063      	str	r3, [r4, #4]
 800a07e:	6054      	str	r4, [r2, #4]
 800a080:	e7cb      	b.n	800a01a <_free_r+0x22>
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	20001088 	.word	0x20001088

0800a088 <malloc>:
 800a088:	4b02      	ldr	r3, [pc, #8]	; (800a094 <malloc+0xc>)
 800a08a:	4601      	mov	r1, r0
 800a08c:	6818      	ldr	r0, [r3, #0]
 800a08e:	f000 b823 	b.w	800a0d8 <_malloc_r>
 800a092:	bf00      	nop
 800a094:	200000d4 	.word	0x200000d4

0800a098 <sbrk_aligned>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	4e0e      	ldr	r6, [pc, #56]	; (800a0d4 <sbrk_aligned+0x3c>)
 800a09c:	460c      	mov	r4, r1
 800a09e:	6831      	ldr	r1, [r6, #0]
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	b911      	cbnz	r1, 800a0aa <sbrk_aligned+0x12>
 800a0a4:	f000 fe38 	bl	800ad18 <_sbrk_r>
 800a0a8:	6030      	str	r0, [r6, #0]
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f000 fe33 	bl	800ad18 <_sbrk_r>
 800a0b2:	1c43      	adds	r3, r0, #1
 800a0b4:	d00a      	beq.n	800a0cc <sbrk_aligned+0x34>
 800a0b6:	1cc4      	adds	r4, r0, #3
 800a0b8:	f024 0403 	bic.w	r4, r4, #3
 800a0bc:	42a0      	cmp	r0, r4
 800a0be:	d007      	beq.n	800a0d0 <sbrk_aligned+0x38>
 800a0c0:	1a21      	subs	r1, r4, r0
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	f000 fe28 	bl	800ad18 <_sbrk_r>
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d101      	bne.n	800a0d0 <sbrk_aligned+0x38>
 800a0cc:	f04f 34ff 	mov.w	r4, #4294967295
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	bd70      	pop	{r4, r5, r6, pc}
 800a0d4:	2000108c 	.word	0x2000108c

0800a0d8 <_malloc_r>:
 800a0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0dc:	1ccd      	adds	r5, r1, #3
 800a0de:	f025 0503 	bic.w	r5, r5, #3
 800a0e2:	3508      	adds	r5, #8
 800a0e4:	2d0c      	cmp	r5, #12
 800a0e6:	bf38      	it	cc
 800a0e8:	250c      	movcc	r5, #12
 800a0ea:	2d00      	cmp	r5, #0
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	db01      	blt.n	800a0f4 <_malloc_r+0x1c>
 800a0f0:	42a9      	cmp	r1, r5
 800a0f2:	d905      	bls.n	800a100 <_malloc_r+0x28>
 800a0f4:	230c      	movs	r3, #12
 800a0f6:	2600      	movs	r6, #0
 800a0f8:	603b      	str	r3, [r7, #0]
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a100:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a1d4 <_malloc_r+0xfc>
 800a104:	f000 f868 	bl	800a1d8 <__malloc_lock>
 800a108:	f8d8 3000 	ldr.w	r3, [r8]
 800a10c:	461c      	mov	r4, r3
 800a10e:	bb5c      	cbnz	r4, 800a168 <_malloc_r+0x90>
 800a110:	4629      	mov	r1, r5
 800a112:	4638      	mov	r0, r7
 800a114:	f7ff ffc0 	bl	800a098 <sbrk_aligned>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	4604      	mov	r4, r0
 800a11c:	d155      	bne.n	800a1ca <_malloc_r+0xf2>
 800a11e:	f8d8 4000 	ldr.w	r4, [r8]
 800a122:	4626      	mov	r6, r4
 800a124:	2e00      	cmp	r6, #0
 800a126:	d145      	bne.n	800a1b4 <_malloc_r+0xdc>
 800a128:	2c00      	cmp	r4, #0
 800a12a:	d048      	beq.n	800a1be <_malloc_r+0xe6>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	4631      	mov	r1, r6
 800a130:	4638      	mov	r0, r7
 800a132:	eb04 0903 	add.w	r9, r4, r3
 800a136:	f000 fdef 	bl	800ad18 <_sbrk_r>
 800a13a:	4581      	cmp	r9, r0
 800a13c:	d13f      	bne.n	800a1be <_malloc_r+0xe6>
 800a13e:	6821      	ldr	r1, [r4, #0]
 800a140:	4638      	mov	r0, r7
 800a142:	1a6d      	subs	r5, r5, r1
 800a144:	4629      	mov	r1, r5
 800a146:	f7ff ffa7 	bl	800a098 <sbrk_aligned>
 800a14a:	3001      	adds	r0, #1
 800a14c:	d037      	beq.n	800a1be <_malloc_r+0xe6>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	442b      	add	r3, r5
 800a152:	6023      	str	r3, [r4, #0]
 800a154:	f8d8 3000 	ldr.w	r3, [r8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d038      	beq.n	800a1ce <_malloc_r+0xf6>
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	42a2      	cmp	r2, r4
 800a160:	d12b      	bne.n	800a1ba <_malloc_r+0xe2>
 800a162:	2200      	movs	r2, #0
 800a164:	605a      	str	r2, [r3, #4]
 800a166:	e00f      	b.n	800a188 <_malloc_r+0xb0>
 800a168:	6822      	ldr	r2, [r4, #0]
 800a16a:	1b52      	subs	r2, r2, r5
 800a16c:	d41f      	bmi.n	800a1ae <_malloc_r+0xd6>
 800a16e:	2a0b      	cmp	r2, #11
 800a170:	d917      	bls.n	800a1a2 <_malloc_r+0xca>
 800a172:	1961      	adds	r1, r4, r5
 800a174:	42a3      	cmp	r3, r4
 800a176:	6025      	str	r5, [r4, #0]
 800a178:	bf18      	it	ne
 800a17a:	6059      	strne	r1, [r3, #4]
 800a17c:	6863      	ldr	r3, [r4, #4]
 800a17e:	bf08      	it	eq
 800a180:	f8c8 1000 	streq.w	r1, [r8]
 800a184:	5162      	str	r2, [r4, r5]
 800a186:	604b      	str	r3, [r1, #4]
 800a188:	4638      	mov	r0, r7
 800a18a:	f104 060b 	add.w	r6, r4, #11
 800a18e:	f000 f829 	bl	800a1e4 <__malloc_unlock>
 800a192:	f026 0607 	bic.w	r6, r6, #7
 800a196:	1d23      	adds	r3, r4, #4
 800a198:	1af2      	subs	r2, r6, r3
 800a19a:	d0ae      	beq.n	800a0fa <_malloc_r+0x22>
 800a19c:	1b9b      	subs	r3, r3, r6
 800a19e:	50a3      	str	r3, [r4, r2]
 800a1a0:	e7ab      	b.n	800a0fa <_malloc_r+0x22>
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	6862      	ldr	r2, [r4, #4]
 800a1a6:	d1dd      	bne.n	800a164 <_malloc_r+0x8c>
 800a1a8:	f8c8 2000 	str.w	r2, [r8]
 800a1ac:	e7ec      	b.n	800a188 <_malloc_r+0xb0>
 800a1ae:	4623      	mov	r3, r4
 800a1b0:	6864      	ldr	r4, [r4, #4]
 800a1b2:	e7ac      	b.n	800a10e <_malloc_r+0x36>
 800a1b4:	4634      	mov	r4, r6
 800a1b6:	6876      	ldr	r6, [r6, #4]
 800a1b8:	e7b4      	b.n	800a124 <_malloc_r+0x4c>
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	e7cc      	b.n	800a158 <_malloc_r+0x80>
 800a1be:	230c      	movs	r3, #12
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	f000 f80e 	bl	800a1e4 <__malloc_unlock>
 800a1c8:	e797      	b.n	800a0fa <_malloc_r+0x22>
 800a1ca:	6025      	str	r5, [r4, #0]
 800a1cc:	e7dc      	b.n	800a188 <_malloc_r+0xb0>
 800a1ce:	605b      	str	r3, [r3, #4]
 800a1d0:	deff      	udf	#255	; 0xff
 800a1d2:	bf00      	nop
 800a1d4:	20001088 	.word	0x20001088

0800a1d8 <__malloc_lock>:
 800a1d8:	4801      	ldr	r0, [pc, #4]	; (800a1e0 <__malloc_lock+0x8>)
 800a1da:	f7ff b880 	b.w	80092de <__retarget_lock_acquire_recursive>
 800a1de:	bf00      	nop
 800a1e0:	20001084 	.word	0x20001084

0800a1e4 <__malloc_unlock>:
 800a1e4:	4801      	ldr	r0, [pc, #4]	; (800a1ec <__malloc_unlock+0x8>)
 800a1e6:	f7ff b87b 	b.w	80092e0 <__retarget_lock_release_recursive>
 800a1ea:	bf00      	nop
 800a1ec:	20001084 	.word	0x20001084

0800a1f0 <_Balloc>:
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	69c6      	ldr	r6, [r0, #28]
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	460d      	mov	r5, r1
 800a1f8:	b976      	cbnz	r6, 800a218 <_Balloc+0x28>
 800a1fa:	2010      	movs	r0, #16
 800a1fc:	f7ff ff44 	bl	800a088 <malloc>
 800a200:	4602      	mov	r2, r0
 800a202:	61e0      	str	r0, [r4, #28]
 800a204:	b920      	cbnz	r0, 800a210 <_Balloc+0x20>
 800a206:	216b      	movs	r1, #107	; 0x6b
 800a208:	4b17      	ldr	r3, [pc, #92]	; (800a268 <_Balloc+0x78>)
 800a20a:	4818      	ldr	r0, [pc, #96]	; (800a26c <_Balloc+0x7c>)
 800a20c:	f000 fd94 	bl	800ad38 <__assert_func>
 800a210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a214:	6006      	str	r6, [r0, #0]
 800a216:	60c6      	str	r6, [r0, #12]
 800a218:	69e6      	ldr	r6, [r4, #28]
 800a21a:	68f3      	ldr	r3, [r6, #12]
 800a21c:	b183      	cbz	r3, 800a240 <_Balloc+0x50>
 800a21e:	69e3      	ldr	r3, [r4, #28]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a226:	b9b8      	cbnz	r0, 800a258 <_Balloc+0x68>
 800a228:	2101      	movs	r1, #1
 800a22a:	fa01 f605 	lsl.w	r6, r1, r5
 800a22e:	1d72      	adds	r2, r6, #5
 800a230:	4620      	mov	r0, r4
 800a232:	0092      	lsls	r2, r2, #2
 800a234:	f000 fd9e 	bl	800ad74 <_calloc_r>
 800a238:	b160      	cbz	r0, 800a254 <_Balloc+0x64>
 800a23a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a23e:	e00e      	b.n	800a25e <_Balloc+0x6e>
 800a240:	2221      	movs	r2, #33	; 0x21
 800a242:	2104      	movs	r1, #4
 800a244:	4620      	mov	r0, r4
 800a246:	f000 fd95 	bl	800ad74 <_calloc_r>
 800a24a:	69e3      	ldr	r3, [r4, #28]
 800a24c:	60f0      	str	r0, [r6, #12]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e4      	bne.n	800a21e <_Balloc+0x2e>
 800a254:	2000      	movs	r0, #0
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	6802      	ldr	r2, [r0, #0]
 800a25a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a25e:	2300      	movs	r3, #0
 800a260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a264:	e7f7      	b.n	800a256 <_Balloc+0x66>
 800a266:	bf00      	nop
 800a268:	0800cf48 	.word	0x0800cf48
 800a26c:	0800cfc8 	.word	0x0800cfc8

0800a270 <_Bfree>:
 800a270:	b570      	push	{r4, r5, r6, lr}
 800a272:	69c6      	ldr	r6, [r0, #28]
 800a274:	4605      	mov	r5, r0
 800a276:	460c      	mov	r4, r1
 800a278:	b976      	cbnz	r6, 800a298 <_Bfree+0x28>
 800a27a:	2010      	movs	r0, #16
 800a27c:	f7ff ff04 	bl	800a088 <malloc>
 800a280:	4602      	mov	r2, r0
 800a282:	61e8      	str	r0, [r5, #28]
 800a284:	b920      	cbnz	r0, 800a290 <_Bfree+0x20>
 800a286:	218f      	movs	r1, #143	; 0x8f
 800a288:	4b08      	ldr	r3, [pc, #32]	; (800a2ac <_Bfree+0x3c>)
 800a28a:	4809      	ldr	r0, [pc, #36]	; (800a2b0 <_Bfree+0x40>)
 800a28c:	f000 fd54 	bl	800ad38 <__assert_func>
 800a290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a294:	6006      	str	r6, [r0, #0]
 800a296:	60c6      	str	r6, [r0, #12]
 800a298:	b13c      	cbz	r4, 800a2aa <_Bfree+0x3a>
 800a29a:	69eb      	ldr	r3, [r5, #28]
 800a29c:	6862      	ldr	r2, [r4, #4]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2a4:	6021      	str	r1, [r4, #0]
 800a2a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2aa:	bd70      	pop	{r4, r5, r6, pc}
 800a2ac:	0800cf48 	.word	0x0800cf48
 800a2b0:	0800cfc8 	.word	0x0800cfc8

0800a2b4 <__multadd>:
 800a2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	461e      	mov	r6, r3
 800a2be:	2000      	movs	r0, #0
 800a2c0:	690d      	ldr	r5, [r1, #16]
 800a2c2:	f101 0c14 	add.w	ip, r1, #20
 800a2c6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	b299      	uxth	r1, r3
 800a2ce:	fb02 6101 	mla	r1, r2, r1, r6
 800a2d2:	0c1e      	lsrs	r6, r3, #16
 800a2d4:	0c0b      	lsrs	r3, r1, #16
 800a2d6:	fb02 3306 	mla	r3, r2, r6, r3
 800a2da:	b289      	uxth	r1, r1
 800a2dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2e0:	4285      	cmp	r5, r0
 800a2e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2e6:	f84c 1b04 	str.w	r1, [ip], #4
 800a2ea:	dcec      	bgt.n	800a2c6 <__multadd+0x12>
 800a2ec:	b30e      	cbz	r6, 800a332 <__multadd+0x7e>
 800a2ee:	68a3      	ldr	r3, [r4, #8]
 800a2f0:	42ab      	cmp	r3, r5
 800a2f2:	dc19      	bgt.n	800a328 <__multadd+0x74>
 800a2f4:	6861      	ldr	r1, [r4, #4]
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	3101      	adds	r1, #1
 800a2fa:	f7ff ff79 	bl	800a1f0 <_Balloc>
 800a2fe:	4680      	mov	r8, r0
 800a300:	b928      	cbnz	r0, 800a30e <__multadd+0x5a>
 800a302:	4602      	mov	r2, r0
 800a304:	21ba      	movs	r1, #186	; 0xba
 800a306:	4b0c      	ldr	r3, [pc, #48]	; (800a338 <__multadd+0x84>)
 800a308:	480c      	ldr	r0, [pc, #48]	; (800a33c <__multadd+0x88>)
 800a30a:	f000 fd15 	bl	800ad38 <__assert_func>
 800a30e:	6922      	ldr	r2, [r4, #16]
 800a310:	f104 010c 	add.w	r1, r4, #12
 800a314:	3202      	adds	r2, #2
 800a316:	0092      	lsls	r2, r2, #2
 800a318:	300c      	adds	r0, #12
 800a31a:	f7fe fff0 	bl	80092fe <memcpy>
 800a31e:	4621      	mov	r1, r4
 800a320:	4638      	mov	r0, r7
 800a322:	f7ff ffa5 	bl	800a270 <_Bfree>
 800a326:	4644      	mov	r4, r8
 800a328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a32c:	3501      	adds	r5, #1
 800a32e:	615e      	str	r6, [r3, #20]
 800a330:	6125      	str	r5, [r4, #16]
 800a332:	4620      	mov	r0, r4
 800a334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a338:	0800cfb7 	.word	0x0800cfb7
 800a33c:	0800cfc8 	.word	0x0800cfc8

0800a340 <__hi0bits>:
 800a340:	0c02      	lsrs	r2, r0, #16
 800a342:	0412      	lsls	r2, r2, #16
 800a344:	4603      	mov	r3, r0
 800a346:	b9ca      	cbnz	r2, 800a37c <__hi0bits+0x3c>
 800a348:	0403      	lsls	r3, r0, #16
 800a34a:	2010      	movs	r0, #16
 800a34c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a350:	bf04      	itt	eq
 800a352:	021b      	lsleq	r3, r3, #8
 800a354:	3008      	addeq	r0, #8
 800a356:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a35a:	bf04      	itt	eq
 800a35c:	011b      	lsleq	r3, r3, #4
 800a35e:	3004      	addeq	r0, #4
 800a360:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a364:	bf04      	itt	eq
 800a366:	009b      	lsleq	r3, r3, #2
 800a368:	3002      	addeq	r0, #2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	db05      	blt.n	800a37a <__hi0bits+0x3a>
 800a36e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a372:	f100 0001 	add.w	r0, r0, #1
 800a376:	bf08      	it	eq
 800a378:	2020      	moveq	r0, #32
 800a37a:	4770      	bx	lr
 800a37c:	2000      	movs	r0, #0
 800a37e:	e7e5      	b.n	800a34c <__hi0bits+0xc>

0800a380 <__lo0bits>:
 800a380:	6803      	ldr	r3, [r0, #0]
 800a382:	4602      	mov	r2, r0
 800a384:	f013 0007 	ands.w	r0, r3, #7
 800a388:	d00b      	beq.n	800a3a2 <__lo0bits+0x22>
 800a38a:	07d9      	lsls	r1, r3, #31
 800a38c:	d421      	bmi.n	800a3d2 <__lo0bits+0x52>
 800a38e:	0798      	lsls	r0, r3, #30
 800a390:	bf49      	itett	mi
 800a392:	085b      	lsrmi	r3, r3, #1
 800a394:	089b      	lsrpl	r3, r3, #2
 800a396:	2001      	movmi	r0, #1
 800a398:	6013      	strmi	r3, [r2, #0]
 800a39a:	bf5c      	itt	pl
 800a39c:	2002      	movpl	r0, #2
 800a39e:	6013      	strpl	r3, [r2, #0]
 800a3a0:	4770      	bx	lr
 800a3a2:	b299      	uxth	r1, r3
 800a3a4:	b909      	cbnz	r1, 800a3aa <__lo0bits+0x2a>
 800a3a6:	2010      	movs	r0, #16
 800a3a8:	0c1b      	lsrs	r3, r3, #16
 800a3aa:	b2d9      	uxtb	r1, r3
 800a3ac:	b909      	cbnz	r1, 800a3b2 <__lo0bits+0x32>
 800a3ae:	3008      	adds	r0, #8
 800a3b0:	0a1b      	lsrs	r3, r3, #8
 800a3b2:	0719      	lsls	r1, r3, #28
 800a3b4:	bf04      	itt	eq
 800a3b6:	091b      	lsreq	r3, r3, #4
 800a3b8:	3004      	addeq	r0, #4
 800a3ba:	0799      	lsls	r1, r3, #30
 800a3bc:	bf04      	itt	eq
 800a3be:	089b      	lsreq	r3, r3, #2
 800a3c0:	3002      	addeq	r0, #2
 800a3c2:	07d9      	lsls	r1, r3, #31
 800a3c4:	d403      	bmi.n	800a3ce <__lo0bits+0x4e>
 800a3c6:	085b      	lsrs	r3, r3, #1
 800a3c8:	f100 0001 	add.w	r0, r0, #1
 800a3cc:	d003      	beq.n	800a3d6 <__lo0bits+0x56>
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	4770      	bx	lr
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	4770      	bx	lr
 800a3d6:	2020      	movs	r0, #32
 800a3d8:	4770      	bx	lr
	...

0800a3dc <__i2b>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	460c      	mov	r4, r1
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	f7ff ff05 	bl	800a1f0 <_Balloc>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	b928      	cbnz	r0, 800a3f6 <__i2b+0x1a>
 800a3ea:	f240 1145 	movw	r1, #325	; 0x145
 800a3ee:	4b04      	ldr	r3, [pc, #16]	; (800a400 <__i2b+0x24>)
 800a3f0:	4804      	ldr	r0, [pc, #16]	; (800a404 <__i2b+0x28>)
 800a3f2:	f000 fca1 	bl	800ad38 <__assert_func>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	6144      	str	r4, [r0, #20]
 800a3fa:	6103      	str	r3, [r0, #16]
 800a3fc:	bd10      	pop	{r4, pc}
 800a3fe:	bf00      	nop
 800a400:	0800cfb7 	.word	0x0800cfb7
 800a404:	0800cfc8 	.word	0x0800cfc8

0800a408 <__multiply>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	4691      	mov	r9, r2
 800a40e:	690a      	ldr	r2, [r1, #16]
 800a410:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a414:	460c      	mov	r4, r1
 800a416:	429a      	cmp	r2, r3
 800a418:	bfbe      	ittt	lt
 800a41a:	460b      	movlt	r3, r1
 800a41c:	464c      	movlt	r4, r9
 800a41e:	4699      	movlt	r9, r3
 800a420:	6927      	ldr	r7, [r4, #16]
 800a422:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a426:	68a3      	ldr	r3, [r4, #8]
 800a428:	6861      	ldr	r1, [r4, #4]
 800a42a:	eb07 060a 	add.w	r6, r7, sl
 800a42e:	42b3      	cmp	r3, r6
 800a430:	b085      	sub	sp, #20
 800a432:	bfb8      	it	lt
 800a434:	3101      	addlt	r1, #1
 800a436:	f7ff fedb 	bl	800a1f0 <_Balloc>
 800a43a:	b930      	cbnz	r0, 800a44a <__multiply+0x42>
 800a43c:	4602      	mov	r2, r0
 800a43e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a442:	4b43      	ldr	r3, [pc, #268]	; (800a550 <__multiply+0x148>)
 800a444:	4843      	ldr	r0, [pc, #268]	; (800a554 <__multiply+0x14c>)
 800a446:	f000 fc77 	bl	800ad38 <__assert_func>
 800a44a:	f100 0514 	add.w	r5, r0, #20
 800a44e:	462b      	mov	r3, r5
 800a450:	2200      	movs	r2, #0
 800a452:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a456:	4543      	cmp	r3, r8
 800a458:	d321      	bcc.n	800a49e <__multiply+0x96>
 800a45a:	f104 0314 	add.w	r3, r4, #20
 800a45e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a462:	f109 0314 	add.w	r3, r9, #20
 800a466:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a46a:	9202      	str	r2, [sp, #8]
 800a46c:	1b3a      	subs	r2, r7, r4
 800a46e:	3a15      	subs	r2, #21
 800a470:	f022 0203 	bic.w	r2, r2, #3
 800a474:	3204      	adds	r2, #4
 800a476:	f104 0115 	add.w	r1, r4, #21
 800a47a:	428f      	cmp	r7, r1
 800a47c:	bf38      	it	cc
 800a47e:	2204      	movcc	r2, #4
 800a480:	9201      	str	r2, [sp, #4]
 800a482:	9a02      	ldr	r2, [sp, #8]
 800a484:	9303      	str	r3, [sp, #12]
 800a486:	429a      	cmp	r2, r3
 800a488:	d80c      	bhi.n	800a4a4 <__multiply+0x9c>
 800a48a:	2e00      	cmp	r6, #0
 800a48c:	dd03      	ble.n	800a496 <__multiply+0x8e>
 800a48e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a492:	2b00      	cmp	r3, #0
 800a494:	d05a      	beq.n	800a54c <__multiply+0x144>
 800a496:	6106      	str	r6, [r0, #16]
 800a498:	b005      	add	sp, #20
 800a49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49e:	f843 2b04 	str.w	r2, [r3], #4
 800a4a2:	e7d8      	b.n	800a456 <__multiply+0x4e>
 800a4a4:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4a8:	f1ba 0f00 	cmp.w	sl, #0
 800a4ac:	d023      	beq.n	800a4f6 <__multiply+0xee>
 800a4ae:	46a9      	mov	r9, r5
 800a4b0:	f04f 0c00 	mov.w	ip, #0
 800a4b4:	f104 0e14 	add.w	lr, r4, #20
 800a4b8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a4bc:	f8d9 1000 	ldr.w	r1, [r9]
 800a4c0:	fa1f fb82 	uxth.w	fp, r2
 800a4c4:	b289      	uxth	r1, r1
 800a4c6:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4ca:	4461      	add	r1, ip
 800a4cc:	f8d9 c000 	ldr.w	ip, [r9]
 800a4d0:	0c12      	lsrs	r2, r2, #16
 800a4d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a4d6:	fb0a c202 	mla	r2, sl, r2, ip
 800a4da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4de:	b289      	uxth	r1, r1
 800a4e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4e4:	4577      	cmp	r7, lr
 800a4e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4ea:	f849 1b04 	str.w	r1, [r9], #4
 800a4ee:	d8e3      	bhi.n	800a4b8 <__multiply+0xb0>
 800a4f0:	9a01      	ldr	r2, [sp, #4]
 800a4f2:	f845 c002 	str.w	ip, [r5, r2]
 800a4f6:	9a03      	ldr	r2, [sp, #12]
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4fe:	f1b9 0f00 	cmp.w	r9, #0
 800a502:	d021      	beq.n	800a548 <__multiply+0x140>
 800a504:	46ae      	mov	lr, r5
 800a506:	f04f 0a00 	mov.w	sl, #0
 800a50a:	6829      	ldr	r1, [r5, #0]
 800a50c:	f104 0c14 	add.w	ip, r4, #20
 800a510:	f8bc b000 	ldrh.w	fp, [ip]
 800a514:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a518:	b289      	uxth	r1, r1
 800a51a:	fb09 220b 	mla	r2, r9, fp, r2
 800a51e:	4452      	add	r2, sl
 800a520:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a524:	f84e 1b04 	str.w	r1, [lr], #4
 800a528:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a52c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a530:	f8be 1000 	ldrh.w	r1, [lr]
 800a534:	4567      	cmp	r7, ip
 800a536:	fb09 110a 	mla	r1, r9, sl, r1
 800a53a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a53e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a542:	d8e5      	bhi.n	800a510 <__multiply+0x108>
 800a544:	9a01      	ldr	r2, [sp, #4]
 800a546:	50a9      	str	r1, [r5, r2]
 800a548:	3504      	adds	r5, #4
 800a54a:	e79a      	b.n	800a482 <__multiply+0x7a>
 800a54c:	3e01      	subs	r6, #1
 800a54e:	e79c      	b.n	800a48a <__multiply+0x82>
 800a550:	0800cfb7 	.word	0x0800cfb7
 800a554:	0800cfc8 	.word	0x0800cfc8

0800a558 <__pow5mult>:
 800a558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a55c:	4615      	mov	r5, r2
 800a55e:	f012 0203 	ands.w	r2, r2, #3
 800a562:	4606      	mov	r6, r0
 800a564:	460f      	mov	r7, r1
 800a566:	d007      	beq.n	800a578 <__pow5mult+0x20>
 800a568:	4c25      	ldr	r4, [pc, #148]	; (800a600 <__pow5mult+0xa8>)
 800a56a:	3a01      	subs	r2, #1
 800a56c:	2300      	movs	r3, #0
 800a56e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a572:	f7ff fe9f 	bl	800a2b4 <__multadd>
 800a576:	4607      	mov	r7, r0
 800a578:	10ad      	asrs	r5, r5, #2
 800a57a:	d03d      	beq.n	800a5f8 <__pow5mult+0xa0>
 800a57c:	69f4      	ldr	r4, [r6, #28]
 800a57e:	b97c      	cbnz	r4, 800a5a0 <__pow5mult+0x48>
 800a580:	2010      	movs	r0, #16
 800a582:	f7ff fd81 	bl	800a088 <malloc>
 800a586:	4602      	mov	r2, r0
 800a588:	61f0      	str	r0, [r6, #28]
 800a58a:	b928      	cbnz	r0, 800a598 <__pow5mult+0x40>
 800a58c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a590:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <__pow5mult+0xac>)
 800a592:	481d      	ldr	r0, [pc, #116]	; (800a608 <__pow5mult+0xb0>)
 800a594:	f000 fbd0 	bl	800ad38 <__assert_func>
 800a598:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a59c:	6004      	str	r4, [r0, #0]
 800a59e:	60c4      	str	r4, [r0, #12]
 800a5a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a5a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5a8:	b94c      	cbnz	r4, 800a5be <__pow5mult+0x66>
 800a5aa:	f240 2171 	movw	r1, #625	; 0x271
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	f7ff ff14 	bl	800a3dc <__i2b>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5bc:	6003      	str	r3, [r0, #0]
 800a5be:	f04f 0900 	mov.w	r9, #0
 800a5c2:	07eb      	lsls	r3, r5, #31
 800a5c4:	d50a      	bpl.n	800a5dc <__pow5mult+0x84>
 800a5c6:	4639      	mov	r1, r7
 800a5c8:	4622      	mov	r2, r4
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f7ff ff1c 	bl	800a408 <__multiply>
 800a5d0:	4680      	mov	r8, r0
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7ff fe4b 	bl	800a270 <_Bfree>
 800a5da:	4647      	mov	r7, r8
 800a5dc:	106d      	asrs	r5, r5, #1
 800a5de:	d00b      	beq.n	800a5f8 <__pow5mult+0xa0>
 800a5e0:	6820      	ldr	r0, [r4, #0]
 800a5e2:	b938      	cbnz	r0, 800a5f4 <__pow5mult+0x9c>
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f7ff ff0d 	bl	800a408 <__multiply>
 800a5ee:	6020      	str	r0, [r4, #0]
 800a5f0:	f8c0 9000 	str.w	r9, [r0]
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	e7e4      	b.n	800a5c2 <__pow5mult+0x6a>
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5fe:	bf00      	nop
 800a600:	0800d118 	.word	0x0800d118
 800a604:	0800cf48 	.word	0x0800cf48
 800a608:	0800cfc8 	.word	0x0800cfc8

0800a60c <__lshift>:
 800a60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a610:	460c      	mov	r4, r1
 800a612:	4607      	mov	r7, r0
 800a614:	4691      	mov	r9, r2
 800a616:	6923      	ldr	r3, [r4, #16]
 800a618:	6849      	ldr	r1, [r1, #4]
 800a61a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a61e:	68a3      	ldr	r3, [r4, #8]
 800a620:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a624:	f108 0601 	add.w	r6, r8, #1
 800a628:	42b3      	cmp	r3, r6
 800a62a:	db0b      	blt.n	800a644 <__lshift+0x38>
 800a62c:	4638      	mov	r0, r7
 800a62e:	f7ff fddf 	bl	800a1f0 <_Balloc>
 800a632:	4605      	mov	r5, r0
 800a634:	b948      	cbnz	r0, 800a64a <__lshift+0x3e>
 800a636:	4602      	mov	r2, r0
 800a638:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a63c:	4b27      	ldr	r3, [pc, #156]	; (800a6dc <__lshift+0xd0>)
 800a63e:	4828      	ldr	r0, [pc, #160]	; (800a6e0 <__lshift+0xd4>)
 800a640:	f000 fb7a 	bl	800ad38 <__assert_func>
 800a644:	3101      	adds	r1, #1
 800a646:	005b      	lsls	r3, r3, #1
 800a648:	e7ee      	b.n	800a628 <__lshift+0x1c>
 800a64a:	2300      	movs	r3, #0
 800a64c:	f100 0114 	add.w	r1, r0, #20
 800a650:	f100 0210 	add.w	r2, r0, #16
 800a654:	4618      	mov	r0, r3
 800a656:	4553      	cmp	r3, sl
 800a658:	db33      	blt.n	800a6c2 <__lshift+0xb6>
 800a65a:	6920      	ldr	r0, [r4, #16]
 800a65c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a660:	f104 0314 	add.w	r3, r4, #20
 800a664:	f019 091f 	ands.w	r9, r9, #31
 800a668:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a66c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a670:	d02b      	beq.n	800a6ca <__lshift+0xbe>
 800a672:	468a      	mov	sl, r1
 800a674:	2200      	movs	r2, #0
 800a676:	f1c9 0e20 	rsb	lr, r9, #32
 800a67a:	6818      	ldr	r0, [r3, #0]
 800a67c:	fa00 f009 	lsl.w	r0, r0, r9
 800a680:	4310      	orrs	r0, r2
 800a682:	f84a 0b04 	str.w	r0, [sl], #4
 800a686:	f853 2b04 	ldr.w	r2, [r3], #4
 800a68a:	459c      	cmp	ip, r3
 800a68c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a690:	d8f3      	bhi.n	800a67a <__lshift+0x6e>
 800a692:	ebac 0304 	sub.w	r3, ip, r4
 800a696:	3b15      	subs	r3, #21
 800a698:	f023 0303 	bic.w	r3, r3, #3
 800a69c:	3304      	adds	r3, #4
 800a69e:	f104 0015 	add.w	r0, r4, #21
 800a6a2:	4584      	cmp	ip, r0
 800a6a4:	bf38      	it	cc
 800a6a6:	2304      	movcc	r3, #4
 800a6a8:	50ca      	str	r2, [r1, r3]
 800a6aa:	b10a      	cbz	r2, 800a6b0 <__lshift+0xa4>
 800a6ac:	f108 0602 	add.w	r6, r8, #2
 800a6b0:	3e01      	subs	r6, #1
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	612e      	str	r6, [r5, #16]
 800a6b8:	f7ff fdda 	bl	800a270 <_Bfree>
 800a6bc:	4628      	mov	r0, r5
 800a6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	e7c5      	b.n	800a656 <__lshift+0x4a>
 800a6ca:	3904      	subs	r1, #4
 800a6cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6d0:	459c      	cmp	ip, r3
 800a6d2:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6d6:	d8f9      	bhi.n	800a6cc <__lshift+0xc0>
 800a6d8:	e7ea      	b.n	800a6b0 <__lshift+0xa4>
 800a6da:	bf00      	nop
 800a6dc:	0800cfb7 	.word	0x0800cfb7
 800a6e0:	0800cfc8 	.word	0x0800cfc8

0800a6e4 <__mcmp>:
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	690a      	ldr	r2, [r1, #16]
 800a6e8:	6900      	ldr	r0, [r0, #16]
 800a6ea:	b530      	push	{r4, r5, lr}
 800a6ec:	1a80      	subs	r0, r0, r2
 800a6ee:	d10d      	bne.n	800a70c <__mcmp+0x28>
 800a6f0:	3314      	adds	r3, #20
 800a6f2:	3114      	adds	r1, #20
 800a6f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a6f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a6fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a700:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a704:	4295      	cmp	r5, r2
 800a706:	d002      	beq.n	800a70e <__mcmp+0x2a>
 800a708:	d304      	bcc.n	800a714 <__mcmp+0x30>
 800a70a:	2001      	movs	r0, #1
 800a70c:	bd30      	pop	{r4, r5, pc}
 800a70e:	42a3      	cmp	r3, r4
 800a710:	d3f4      	bcc.n	800a6fc <__mcmp+0x18>
 800a712:	e7fb      	b.n	800a70c <__mcmp+0x28>
 800a714:	f04f 30ff 	mov.w	r0, #4294967295
 800a718:	e7f8      	b.n	800a70c <__mcmp+0x28>
	...

0800a71c <__mdiff>:
 800a71c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a720:	460d      	mov	r5, r1
 800a722:	4607      	mov	r7, r0
 800a724:	4611      	mov	r1, r2
 800a726:	4628      	mov	r0, r5
 800a728:	4614      	mov	r4, r2
 800a72a:	f7ff ffdb 	bl	800a6e4 <__mcmp>
 800a72e:	1e06      	subs	r6, r0, #0
 800a730:	d111      	bne.n	800a756 <__mdiff+0x3a>
 800a732:	4631      	mov	r1, r6
 800a734:	4638      	mov	r0, r7
 800a736:	f7ff fd5b 	bl	800a1f0 <_Balloc>
 800a73a:	4602      	mov	r2, r0
 800a73c:	b928      	cbnz	r0, 800a74a <__mdiff+0x2e>
 800a73e:	f240 2137 	movw	r1, #567	; 0x237
 800a742:	4b3a      	ldr	r3, [pc, #232]	; (800a82c <__mdiff+0x110>)
 800a744:	483a      	ldr	r0, [pc, #232]	; (800a830 <__mdiff+0x114>)
 800a746:	f000 faf7 	bl	800ad38 <__assert_func>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a750:	4610      	mov	r0, r2
 800a752:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a756:	bfa4      	itt	ge
 800a758:	4623      	movge	r3, r4
 800a75a:	462c      	movge	r4, r5
 800a75c:	4638      	mov	r0, r7
 800a75e:	6861      	ldr	r1, [r4, #4]
 800a760:	bfa6      	itte	ge
 800a762:	461d      	movge	r5, r3
 800a764:	2600      	movge	r6, #0
 800a766:	2601      	movlt	r6, #1
 800a768:	f7ff fd42 	bl	800a1f0 <_Balloc>
 800a76c:	4602      	mov	r2, r0
 800a76e:	b918      	cbnz	r0, 800a778 <__mdiff+0x5c>
 800a770:	f240 2145 	movw	r1, #581	; 0x245
 800a774:	4b2d      	ldr	r3, [pc, #180]	; (800a82c <__mdiff+0x110>)
 800a776:	e7e5      	b.n	800a744 <__mdiff+0x28>
 800a778:	f102 0814 	add.w	r8, r2, #20
 800a77c:	46c2      	mov	sl, r8
 800a77e:	f04f 0c00 	mov.w	ip, #0
 800a782:	6927      	ldr	r7, [r4, #16]
 800a784:	60c6      	str	r6, [r0, #12]
 800a786:	692e      	ldr	r6, [r5, #16]
 800a788:	f104 0014 	add.w	r0, r4, #20
 800a78c:	f105 0914 	add.w	r9, r5, #20
 800a790:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a794:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a798:	3410      	adds	r4, #16
 800a79a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a79e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7a2:	fa1f f18b 	uxth.w	r1, fp
 800a7a6:	4461      	add	r1, ip
 800a7a8:	fa1f fc83 	uxth.w	ip, r3
 800a7ac:	0c1b      	lsrs	r3, r3, #16
 800a7ae:	eba1 010c 	sub.w	r1, r1, ip
 800a7b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a7ba:	b289      	uxth	r1, r1
 800a7bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a7c0:	454e      	cmp	r6, r9
 800a7c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a7c6:	f84a 1b04 	str.w	r1, [sl], #4
 800a7ca:	d8e6      	bhi.n	800a79a <__mdiff+0x7e>
 800a7cc:	1b73      	subs	r3, r6, r5
 800a7ce:	3b15      	subs	r3, #21
 800a7d0:	f023 0303 	bic.w	r3, r3, #3
 800a7d4:	3515      	adds	r5, #21
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	42ae      	cmp	r6, r5
 800a7da:	bf38      	it	cc
 800a7dc:	2304      	movcc	r3, #4
 800a7de:	4418      	add	r0, r3
 800a7e0:	4443      	add	r3, r8
 800a7e2:	461e      	mov	r6, r3
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	4575      	cmp	r5, lr
 800a7e8:	d30e      	bcc.n	800a808 <__mdiff+0xec>
 800a7ea:	f10e 0103 	add.w	r1, lr, #3
 800a7ee:	1a09      	subs	r1, r1, r0
 800a7f0:	f021 0103 	bic.w	r1, r1, #3
 800a7f4:	3803      	subs	r0, #3
 800a7f6:	4586      	cmp	lr, r0
 800a7f8:	bf38      	it	cc
 800a7fa:	2100      	movcc	r1, #0
 800a7fc:	440b      	add	r3, r1
 800a7fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a802:	b189      	cbz	r1, 800a828 <__mdiff+0x10c>
 800a804:	6117      	str	r7, [r2, #16]
 800a806:	e7a3      	b.n	800a750 <__mdiff+0x34>
 800a808:	f855 8b04 	ldr.w	r8, [r5], #4
 800a80c:	fa1f f188 	uxth.w	r1, r8
 800a810:	4461      	add	r1, ip
 800a812:	140c      	asrs	r4, r1, #16
 800a814:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a818:	b289      	uxth	r1, r1
 800a81a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a81e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a822:	f846 1b04 	str.w	r1, [r6], #4
 800a826:	e7de      	b.n	800a7e6 <__mdiff+0xca>
 800a828:	3f01      	subs	r7, #1
 800a82a:	e7e8      	b.n	800a7fe <__mdiff+0xe2>
 800a82c:	0800cfb7 	.word	0x0800cfb7
 800a830:	0800cfc8 	.word	0x0800cfc8

0800a834 <__d2b>:
 800a834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a836:	2101      	movs	r1, #1
 800a838:	4617      	mov	r7, r2
 800a83a:	461c      	mov	r4, r3
 800a83c:	9e08      	ldr	r6, [sp, #32]
 800a83e:	f7ff fcd7 	bl	800a1f0 <_Balloc>
 800a842:	4605      	mov	r5, r0
 800a844:	b930      	cbnz	r0, 800a854 <__d2b+0x20>
 800a846:	4602      	mov	r2, r0
 800a848:	f240 310f 	movw	r1, #783	; 0x30f
 800a84c:	4b22      	ldr	r3, [pc, #136]	; (800a8d8 <__d2b+0xa4>)
 800a84e:	4823      	ldr	r0, [pc, #140]	; (800a8dc <__d2b+0xa8>)
 800a850:	f000 fa72 	bl	800ad38 <__assert_func>
 800a854:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a858:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a85c:	bb24      	cbnz	r4, 800a8a8 <__d2b+0x74>
 800a85e:	2f00      	cmp	r7, #0
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	d026      	beq.n	800a8b2 <__d2b+0x7e>
 800a864:	4668      	mov	r0, sp
 800a866:	9700      	str	r7, [sp, #0]
 800a868:	f7ff fd8a 	bl	800a380 <__lo0bits>
 800a86c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a870:	b1e8      	cbz	r0, 800a8ae <__d2b+0x7a>
 800a872:	f1c0 0320 	rsb	r3, r0, #32
 800a876:	fa02 f303 	lsl.w	r3, r2, r3
 800a87a:	430b      	orrs	r3, r1
 800a87c:	40c2      	lsrs	r2, r0
 800a87e:	616b      	str	r3, [r5, #20]
 800a880:	9201      	str	r2, [sp, #4]
 800a882:	9b01      	ldr	r3, [sp, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	bf14      	ite	ne
 800a888:	2102      	movne	r1, #2
 800a88a:	2101      	moveq	r1, #1
 800a88c:	61ab      	str	r3, [r5, #24]
 800a88e:	6129      	str	r1, [r5, #16]
 800a890:	b1bc      	cbz	r4, 800a8c2 <__d2b+0x8e>
 800a892:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a896:	4404      	add	r4, r0
 800a898:	6034      	str	r4, [r6, #0]
 800a89a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a0:	6018      	str	r0, [r3, #0]
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	b003      	add	sp, #12
 800a8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8ac:	e7d7      	b.n	800a85e <__d2b+0x2a>
 800a8ae:	6169      	str	r1, [r5, #20]
 800a8b0:	e7e7      	b.n	800a882 <__d2b+0x4e>
 800a8b2:	a801      	add	r0, sp, #4
 800a8b4:	f7ff fd64 	bl	800a380 <__lo0bits>
 800a8b8:	9b01      	ldr	r3, [sp, #4]
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	616b      	str	r3, [r5, #20]
 800a8be:	3020      	adds	r0, #32
 800a8c0:	e7e5      	b.n	800a88e <__d2b+0x5a>
 800a8c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8c6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a8ca:	6030      	str	r0, [r6, #0]
 800a8cc:	6918      	ldr	r0, [r3, #16]
 800a8ce:	f7ff fd37 	bl	800a340 <__hi0bits>
 800a8d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a8d6:	e7e2      	b.n	800a89e <__d2b+0x6a>
 800a8d8:	0800cfb7 	.word	0x0800cfb7
 800a8dc:	0800cfc8 	.word	0x0800cfc8

0800a8e0 <__ssputs_r>:
 800a8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e4:	461f      	mov	r7, r3
 800a8e6:	688e      	ldr	r6, [r1, #8]
 800a8e8:	4682      	mov	sl, r0
 800a8ea:	42be      	cmp	r6, r7
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	4690      	mov	r8, r2
 800a8f0:	680b      	ldr	r3, [r1, #0]
 800a8f2:	d82c      	bhi.n	800a94e <__ssputs_r+0x6e>
 800a8f4:	898a      	ldrh	r2, [r1, #12]
 800a8f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a8fa:	d026      	beq.n	800a94a <__ssputs_r+0x6a>
 800a8fc:	6965      	ldr	r5, [r4, #20]
 800a8fe:	6909      	ldr	r1, [r1, #16]
 800a900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a904:	eba3 0901 	sub.w	r9, r3, r1
 800a908:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a90c:	1c7b      	adds	r3, r7, #1
 800a90e:	444b      	add	r3, r9
 800a910:	106d      	asrs	r5, r5, #1
 800a912:	429d      	cmp	r5, r3
 800a914:	bf38      	it	cc
 800a916:	461d      	movcc	r5, r3
 800a918:	0553      	lsls	r3, r2, #21
 800a91a:	d527      	bpl.n	800a96c <__ssputs_r+0x8c>
 800a91c:	4629      	mov	r1, r5
 800a91e:	f7ff fbdb 	bl	800a0d8 <_malloc_r>
 800a922:	4606      	mov	r6, r0
 800a924:	b360      	cbz	r0, 800a980 <__ssputs_r+0xa0>
 800a926:	464a      	mov	r2, r9
 800a928:	6921      	ldr	r1, [r4, #16]
 800a92a:	f7fe fce8 	bl	80092fe <memcpy>
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a938:	81a3      	strh	r3, [r4, #12]
 800a93a:	6126      	str	r6, [r4, #16]
 800a93c:	444e      	add	r6, r9
 800a93e:	6026      	str	r6, [r4, #0]
 800a940:	463e      	mov	r6, r7
 800a942:	6165      	str	r5, [r4, #20]
 800a944:	eba5 0509 	sub.w	r5, r5, r9
 800a948:	60a5      	str	r5, [r4, #8]
 800a94a:	42be      	cmp	r6, r7
 800a94c:	d900      	bls.n	800a950 <__ssputs_r+0x70>
 800a94e:	463e      	mov	r6, r7
 800a950:	4632      	mov	r2, r6
 800a952:	4641      	mov	r1, r8
 800a954:	6820      	ldr	r0, [r4, #0]
 800a956:	f000 f9c5 	bl	800ace4 <memmove>
 800a95a:	2000      	movs	r0, #0
 800a95c:	68a3      	ldr	r3, [r4, #8]
 800a95e:	1b9b      	subs	r3, r3, r6
 800a960:	60a3      	str	r3, [r4, #8]
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	4433      	add	r3, r6
 800a966:	6023      	str	r3, [r4, #0]
 800a968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a96c:	462a      	mov	r2, r5
 800a96e:	f000 fa27 	bl	800adc0 <_realloc_r>
 800a972:	4606      	mov	r6, r0
 800a974:	2800      	cmp	r0, #0
 800a976:	d1e0      	bne.n	800a93a <__ssputs_r+0x5a>
 800a978:	4650      	mov	r0, sl
 800a97a:	6921      	ldr	r1, [r4, #16]
 800a97c:	f7ff fb3c 	bl	8009ff8 <_free_r>
 800a980:	230c      	movs	r3, #12
 800a982:	f8ca 3000 	str.w	r3, [sl]
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	f04f 30ff 	mov.w	r0, #4294967295
 800a98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a990:	81a3      	strh	r3, [r4, #12]
 800a992:	e7e9      	b.n	800a968 <__ssputs_r+0x88>

0800a994 <_svfiprintf_r>:
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	4698      	mov	r8, r3
 800a99a:	898b      	ldrh	r3, [r1, #12]
 800a99c:	4607      	mov	r7, r0
 800a99e:	061b      	lsls	r3, r3, #24
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	4614      	mov	r4, r2
 800a9a4:	b09d      	sub	sp, #116	; 0x74
 800a9a6:	d50e      	bpl.n	800a9c6 <_svfiprintf_r+0x32>
 800a9a8:	690b      	ldr	r3, [r1, #16]
 800a9aa:	b963      	cbnz	r3, 800a9c6 <_svfiprintf_r+0x32>
 800a9ac:	2140      	movs	r1, #64	; 0x40
 800a9ae:	f7ff fb93 	bl	800a0d8 <_malloc_r>
 800a9b2:	6028      	str	r0, [r5, #0]
 800a9b4:	6128      	str	r0, [r5, #16]
 800a9b6:	b920      	cbnz	r0, 800a9c2 <_svfiprintf_r+0x2e>
 800a9b8:	230c      	movs	r3, #12
 800a9ba:	603b      	str	r3, [r7, #0]
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	e0d0      	b.n	800ab64 <_svfiprintf_r+0x1d0>
 800a9c2:	2340      	movs	r3, #64	; 0x40
 800a9c4:	616b      	str	r3, [r5, #20]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ca:	2320      	movs	r3, #32
 800a9cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9d0:	2330      	movs	r3, #48	; 0x30
 800a9d2:	f04f 0901 	mov.w	r9, #1
 800a9d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9da:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ab7c <_svfiprintf_r+0x1e8>
 800a9de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9e2:	4623      	mov	r3, r4
 800a9e4:	469a      	mov	sl, r3
 800a9e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9ea:	b10a      	cbz	r2, 800a9f0 <_svfiprintf_r+0x5c>
 800a9ec:	2a25      	cmp	r2, #37	; 0x25
 800a9ee:	d1f9      	bne.n	800a9e4 <_svfiprintf_r+0x50>
 800a9f0:	ebba 0b04 	subs.w	fp, sl, r4
 800a9f4:	d00b      	beq.n	800aa0e <_svfiprintf_r+0x7a>
 800a9f6:	465b      	mov	r3, fp
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	4629      	mov	r1, r5
 800a9fc:	4638      	mov	r0, r7
 800a9fe:	f7ff ff6f 	bl	800a8e0 <__ssputs_r>
 800aa02:	3001      	adds	r0, #1
 800aa04:	f000 80a9 	beq.w	800ab5a <_svfiprintf_r+0x1c6>
 800aa08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa0a:	445a      	add	r2, fp
 800aa0c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa0e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 80a1 	beq.w	800ab5a <_svfiprintf_r+0x1c6>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa22:	f10a 0a01 	add.w	sl, sl, #1
 800aa26:	9304      	str	r3, [sp, #16]
 800aa28:	9307      	str	r3, [sp, #28]
 800aa2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa2e:	931a      	str	r3, [sp, #104]	; 0x68
 800aa30:	4654      	mov	r4, sl
 800aa32:	2205      	movs	r2, #5
 800aa34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa38:	4850      	ldr	r0, [pc, #320]	; (800ab7c <_svfiprintf_r+0x1e8>)
 800aa3a:	f7fe fc52 	bl	80092e2 <memchr>
 800aa3e:	9a04      	ldr	r2, [sp, #16]
 800aa40:	b9d8      	cbnz	r0, 800aa7a <_svfiprintf_r+0xe6>
 800aa42:	06d0      	lsls	r0, r2, #27
 800aa44:	bf44      	itt	mi
 800aa46:	2320      	movmi	r3, #32
 800aa48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa4c:	0711      	lsls	r1, r2, #28
 800aa4e:	bf44      	itt	mi
 800aa50:	232b      	movmi	r3, #43	; 0x2b
 800aa52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa56:	f89a 3000 	ldrb.w	r3, [sl]
 800aa5a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa5c:	d015      	beq.n	800aa8a <_svfiprintf_r+0xf6>
 800aa5e:	4654      	mov	r4, sl
 800aa60:	2000      	movs	r0, #0
 800aa62:	f04f 0c0a 	mov.w	ip, #10
 800aa66:	9a07      	ldr	r2, [sp, #28]
 800aa68:	4621      	mov	r1, r4
 800aa6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa6e:	3b30      	subs	r3, #48	; 0x30
 800aa70:	2b09      	cmp	r3, #9
 800aa72:	d94d      	bls.n	800ab10 <_svfiprintf_r+0x17c>
 800aa74:	b1b0      	cbz	r0, 800aaa4 <_svfiprintf_r+0x110>
 800aa76:	9207      	str	r2, [sp, #28]
 800aa78:	e014      	b.n	800aaa4 <_svfiprintf_r+0x110>
 800aa7a:	eba0 0308 	sub.w	r3, r0, r8
 800aa7e:	fa09 f303 	lsl.w	r3, r9, r3
 800aa82:	4313      	orrs	r3, r2
 800aa84:	46a2      	mov	sl, r4
 800aa86:	9304      	str	r3, [sp, #16]
 800aa88:	e7d2      	b.n	800aa30 <_svfiprintf_r+0x9c>
 800aa8a:	9b03      	ldr	r3, [sp, #12]
 800aa8c:	1d19      	adds	r1, r3, #4
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	9103      	str	r1, [sp, #12]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	bfbb      	ittet	lt
 800aa96:	425b      	neglt	r3, r3
 800aa98:	f042 0202 	orrlt.w	r2, r2, #2
 800aa9c:	9307      	strge	r3, [sp, #28]
 800aa9e:	9307      	strlt	r3, [sp, #28]
 800aaa0:	bfb8      	it	lt
 800aaa2:	9204      	strlt	r2, [sp, #16]
 800aaa4:	7823      	ldrb	r3, [r4, #0]
 800aaa6:	2b2e      	cmp	r3, #46	; 0x2e
 800aaa8:	d10c      	bne.n	800aac4 <_svfiprintf_r+0x130>
 800aaaa:	7863      	ldrb	r3, [r4, #1]
 800aaac:	2b2a      	cmp	r3, #42	; 0x2a
 800aaae:	d134      	bne.n	800ab1a <_svfiprintf_r+0x186>
 800aab0:	9b03      	ldr	r3, [sp, #12]
 800aab2:	3402      	adds	r4, #2
 800aab4:	1d1a      	adds	r2, r3, #4
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	9203      	str	r2, [sp, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	bfb8      	it	lt
 800aabe:	f04f 33ff 	movlt.w	r3, #4294967295
 800aac2:	9305      	str	r3, [sp, #20]
 800aac4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ab80 <_svfiprintf_r+0x1ec>
 800aac8:	2203      	movs	r2, #3
 800aaca:	4650      	mov	r0, sl
 800aacc:	7821      	ldrb	r1, [r4, #0]
 800aace:	f7fe fc08 	bl	80092e2 <memchr>
 800aad2:	b138      	cbz	r0, 800aae4 <_svfiprintf_r+0x150>
 800aad4:	2240      	movs	r2, #64	; 0x40
 800aad6:	9b04      	ldr	r3, [sp, #16]
 800aad8:	eba0 000a 	sub.w	r0, r0, sl
 800aadc:	4082      	lsls	r2, r0
 800aade:	4313      	orrs	r3, r2
 800aae0:	3401      	adds	r4, #1
 800aae2:	9304      	str	r3, [sp, #16]
 800aae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae8:	2206      	movs	r2, #6
 800aaea:	4826      	ldr	r0, [pc, #152]	; (800ab84 <_svfiprintf_r+0x1f0>)
 800aaec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aaf0:	f7fe fbf7 	bl	80092e2 <memchr>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d038      	beq.n	800ab6a <_svfiprintf_r+0x1d6>
 800aaf8:	4b23      	ldr	r3, [pc, #140]	; (800ab88 <_svfiprintf_r+0x1f4>)
 800aafa:	bb1b      	cbnz	r3, 800ab44 <_svfiprintf_r+0x1b0>
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	3307      	adds	r3, #7
 800ab00:	f023 0307 	bic.w	r3, r3, #7
 800ab04:	3308      	adds	r3, #8
 800ab06:	9303      	str	r3, [sp, #12]
 800ab08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab0a:	4433      	add	r3, r6
 800ab0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab0e:	e768      	b.n	800a9e2 <_svfiprintf_r+0x4e>
 800ab10:	460c      	mov	r4, r1
 800ab12:	2001      	movs	r0, #1
 800ab14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab18:	e7a6      	b.n	800aa68 <_svfiprintf_r+0xd4>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	f04f 0c0a 	mov.w	ip, #10
 800ab20:	4619      	mov	r1, r3
 800ab22:	3401      	adds	r4, #1
 800ab24:	9305      	str	r3, [sp, #20]
 800ab26:	4620      	mov	r0, r4
 800ab28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab2c:	3a30      	subs	r2, #48	; 0x30
 800ab2e:	2a09      	cmp	r2, #9
 800ab30:	d903      	bls.n	800ab3a <_svfiprintf_r+0x1a6>
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0c6      	beq.n	800aac4 <_svfiprintf_r+0x130>
 800ab36:	9105      	str	r1, [sp, #20]
 800ab38:	e7c4      	b.n	800aac4 <_svfiprintf_r+0x130>
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab42:	e7f0      	b.n	800ab26 <_svfiprintf_r+0x192>
 800ab44:	ab03      	add	r3, sp, #12
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	462a      	mov	r2, r5
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	4b0f      	ldr	r3, [pc, #60]	; (800ab8c <_svfiprintf_r+0x1f8>)
 800ab4e:	a904      	add	r1, sp, #16
 800ab50:	f7fd fe60 	bl	8008814 <_printf_float>
 800ab54:	1c42      	adds	r2, r0, #1
 800ab56:	4606      	mov	r6, r0
 800ab58:	d1d6      	bne.n	800ab08 <_svfiprintf_r+0x174>
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	065b      	lsls	r3, r3, #25
 800ab5e:	f53f af2d 	bmi.w	800a9bc <_svfiprintf_r+0x28>
 800ab62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab64:	b01d      	add	sp, #116	; 0x74
 800ab66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6a:	ab03      	add	r3, sp, #12
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	462a      	mov	r2, r5
 800ab70:	4638      	mov	r0, r7
 800ab72:	4b06      	ldr	r3, [pc, #24]	; (800ab8c <_svfiprintf_r+0x1f8>)
 800ab74:	a904      	add	r1, sp, #16
 800ab76:	f7fe f8ed 	bl	8008d54 <_printf_i>
 800ab7a:	e7eb      	b.n	800ab54 <_svfiprintf_r+0x1c0>
 800ab7c:	0800d124 	.word	0x0800d124
 800ab80:	0800d12a 	.word	0x0800d12a
 800ab84:	0800d12e 	.word	0x0800d12e
 800ab88:	08008815 	.word	0x08008815
 800ab8c:	0800a8e1 	.word	0x0800a8e1

0800ab90 <__sflush_r>:
 800ab90:	898a      	ldrh	r2, [r1, #12]
 800ab92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab94:	4605      	mov	r5, r0
 800ab96:	0710      	lsls	r0, r2, #28
 800ab98:	460c      	mov	r4, r1
 800ab9a:	d457      	bmi.n	800ac4c <__sflush_r+0xbc>
 800ab9c:	684b      	ldr	r3, [r1, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	dc04      	bgt.n	800abac <__sflush_r+0x1c>
 800aba2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	dc01      	bgt.n	800abac <__sflush_r+0x1c>
 800aba8:	2000      	movs	r0, #0
 800abaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abae:	2e00      	cmp	r6, #0
 800abb0:	d0fa      	beq.n	800aba8 <__sflush_r+0x18>
 800abb2:	2300      	movs	r3, #0
 800abb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abb8:	682f      	ldr	r7, [r5, #0]
 800abba:	6a21      	ldr	r1, [r4, #32]
 800abbc:	602b      	str	r3, [r5, #0]
 800abbe:	d032      	beq.n	800ac26 <__sflush_r+0x96>
 800abc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	075a      	lsls	r2, r3, #29
 800abc6:	d505      	bpl.n	800abd4 <__sflush_r+0x44>
 800abc8:	6863      	ldr	r3, [r4, #4]
 800abca:	1ac0      	subs	r0, r0, r3
 800abcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abce:	b10b      	cbz	r3, 800abd4 <__sflush_r+0x44>
 800abd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abd2:	1ac0      	subs	r0, r0, r3
 800abd4:	2300      	movs	r3, #0
 800abd6:	4602      	mov	r2, r0
 800abd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abda:	4628      	mov	r0, r5
 800abdc:	6a21      	ldr	r1, [r4, #32]
 800abde:	47b0      	blx	r6
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	d106      	bne.n	800abf4 <__sflush_r+0x64>
 800abe6:	6829      	ldr	r1, [r5, #0]
 800abe8:	291d      	cmp	r1, #29
 800abea:	d82b      	bhi.n	800ac44 <__sflush_r+0xb4>
 800abec:	4a28      	ldr	r2, [pc, #160]	; (800ac90 <__sflush_r+0x100>)
 800abee:	410a      	asrs	r2, r1
 800abf0:	07d6      	lsls	r6, r2, #31
 800abf2:	d427      	bmi.n	800ac44 <__sflush_r+0xb4>
 800abf4:	2200      	movs	r2, #0
 800abf6:	6062      	str	r2, [r4, #4]
 800abf8:	6922      	ldr	r2, [r4, #16]
 800abfa:	04d9      	lsls	r1, r3, #19
 800abfc:	6022      	str	r2, [r4, #0]
 800abfe:	d504      	bpl.n	800ac0a <__sflush_r+0x7a>
 800ac00:	1c42      	adds	r2, r0, #1
 800ac02:	d101      	bne.n	800ac08 <__sflush_r+0x78>
 800ac04:	682b      	ldr	r3, [r5, #0]
 800ac06:	b903      	cbnz	r3, 800ac0a <__sflush_r+0x7a>
 800ac08:	6560      	str	r0, [r4, #84]	; 0x54
 800ac0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac0c:	602f      	str	r7, [r5, #0]
 800ac0e:	2900      	cmp	r1, #0
 800ac10:	d0ca      	beq.n	800aba8 <__sflush_r+0x18>
 800ac12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac16:	4299      	cmp	r1, r3
 800ac18:	d002      	beq.n	800ac20 <__sflush_r+0x90>
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f7ff f9ec 	bl	8009ff8 <_free_r>
 800ac20:	2000      	movs	r0, #0
 800ac22:	6360      	str	r0, [r4, #52]	; 0x34
 800ac24:	e7c1      	b.n	800abaa <__sflush_r+0x1a>
 800ac26:	2301      	movs	r3, #1
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b0      	blx	r6
 800ac2c:	1c41      	adds	r1, r0, #1
 800ac2e:	d1c8      	bne.n	800abc2 <__sflush_r+0x32>
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0c5      	beq.n	800abc2 <__sflush_r+0x32>
 800ac36:	2b1d      	cmp	r3, #29
 800ac38:	d001      	beq.n	800ac3e <__sflush_r+0xae>
 800ac3a:	2b16      	cmp	r3, #22
 800ac3c:	d101      	bne.n	800ac42 <__sflush_r+0xb2>
 800ac3e:	602f      	str	r7, [r5, #0]
 800ac40:	e7b2      	b.n	800aba8 <__sflush_r+0x18>
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	e7ae      	b.n	800abaa <__sflush_r+0x1a>
 800ac4c:	690f      	ldr	r7, [r1, #16]
 800ac4e:	2f00      	cmp	r7, #0
 800ac50:	d0aa      	beq.n	800aba8 <__sflush_r+0x18>
 800ac52:	0793      	lsls	r3, r2, #30
 800ac54:	bf18      	it	ne
 800ac56:	2300      	movne	r3, #0
 800ac58:	680e      	ldr	r6, [r1, #0]
 800ac5a:	bf08      	it	eq
 800ac5c:	694b      	ldreq	r3, [r1, #20]
 800ac5e:	1bf6      	subs	r6, r6, r7
 800ac60:	600f      	str	r7, [r1, #0]
 800ac62:	608b      	str	r3, [r1, #8]
 800ac64:	2e00      	cmp	r6, #0
 800ac66:	dd9f      	ble.n	800aba8 <__sflush_r+0x18>
 800ac68:	4633      	mov	r3, r6
 800ac6a:	463a      	mov	r2, r7
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	6a21      	ldr	r1, [r4, #32]
 800ac70:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ac74:	47e0      	blx	ip
 800ac76:	2800      	cmp	r0, #0
 800ac78:	dc06      	bgt.n	800ac88 <__sflush_r+0xf8>
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	e790      	b.n	800abaa <__sflush_r+0x1a>
 800ac88:	4407      	add	r7, r0
 800ac8a:	1a36      	subs	r6, r6, r0
 800ac8c:	e7ea      	b.n	800ac64 <__sflush_r+0xd4>
 800ac8e:	bf00      	nop
 800ac90:	dfbffffe 	.word	0xdfbffffe

0800ac94 <_fflush_r>:
 800ac94:	b538      	push	{r3, r4, r5, lr}
 800ac96:	690b      	ldr	r3, [r1, #16]
 800ac98:	4605      	mov	r5, r0
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	b913      	cbnz	r3, 800aca4 <_fflush_r+0x10>
 800ac9e:	2500      	movs	r5, #0
 800aca0:	4628      	mov	r0, r5
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	b118      	cbz	r0, 800acae <_fflush_r+0x1a>
 800aca6:	6a03      	ldr	r3, [r0, #32]
 800aca8:	b90b      	cbnz	r3, 800acae <_fflush_r+0x1a>
 800acaa:	f7fe fa01 	bl	80090b0 <__sinit>
 800acae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d0f3      	beq.n	800ac9e <_fflush_r+0xa>
 800acb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acb8:	07d0      	lsls	r0, r2, #31
 800acba:	d404      	bmi.n	800acc6 <_fflush_r+0x32>
 800acbc:	0599      	lsls	r1, r3, #22
 800acbe:	d402      	bmi.n	800acc6 <_fflush_r+0x32>
 800acc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acc2:	f7fe fb0c 	bl	80092de <__retarget_lock_acquire_recursive>
 800acc6:	4628      	mov	r0, r5
 800acc8:	4621      	mov	r1, r4
 800acca:	f7ff ff61 	bl	800ab90 <__sflush_r>
 800acce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acd0:	4605      	mov	r5, r0
 800acd2:	07da      	lsls	r2, r3, #31
 800acd4:	d4e4      	bmi.n	800aca0 <_fflush_r+0xc>
 800acd6:	89a3      	ldrh	r3, [r4, #12]
 800acd8:	059b      	lsls	r3, r3, #22
 800acda:	d4e1      	bmi.n	800aca0 <_fflush_r+0xc>
 800acdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acde:	f7fe faff 	bl	80092e0 <__retarget_lock_release_recursive>
 800ace2:	e7dd      	b.n	800aca0 <_fflush_r+0xc>

0800ace4 <memmove>:
 800ace4:	4288      	cmp	r0, r1
 800ace6:	b510      	push	{r4, lr}
 800ace8:	eb01 0402 	add.w	r4, r1, r2
 800acec:	d902      	bls.n	800acf4 <memmove+0x10>
 800acee:	4284      	cmp	r4, r0
 800acf0:	4623      	mov	r3, r4
 800acf2:	d807      	bhi.n	800ad04 <memmove+0x20>
 800acf4:	1e43      	subs	r3, r0, #1
 800acf6:	42a1      	cmp	r1, r4
 800acf8:	d008      	beq.n	800ad0c <memmove+0x28>
 800acfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad02:	e7f8      	b.n	800acf6 <memmove+0x12>
 800ad04:	4601      	mov	r1, r0
 800ad06:	4402      	add	r2, r0
 800ad08:	428a      	cmp	r2, r1
 800ad0a:	d100      	bne.n	800ad0e <memmove+0x2a>
 800ad0c:	bd10      	pop	{r4, pc}
 800ad0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad16:	e7f7      	b.n	800ad08 <memmove+0x24>

0800ad18 <_sbrk_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	4d05      	ldr	r5, [pc, #20]	; (800ad34 <_sbrk_r+0x1c>)
 800ad1e:	4604      	mov	r4, r0
 800ad20:	4608      	mov	r0, r1
 800ad22:	602b      	str	r3, [r5, #0]
 800ad24:	f7f8 fb2c 	bl	8003380 <_sbrk>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_sbrk_r+0x1a>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_sbrk_r+0x1a>
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	20001080 	.word	0x20001080

0800ad38 <__assert_func>:
 800ad38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad3a:	4614      	mov	r4, r2
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	4b09      	ldr	r3, [pc, #36]	; (800ad64 <__assert_func+0x2c>)
 800ad40:	4605      	mov	r5, r0
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68d8      	ldr	r0, [r3, #12]
 800ad46:	b14c      	cbz	r4, 800ad5c <__assert_func+0x24>
 800ad48:	4b07      	ldr	r3, [pc, #28]	; (800ad68 <__assert_func+0x30>)
 800ad4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad4e:	9100      	str	r1, [sp, #0]
 800ad50:	462b      	mov	r3, r5
 800ad52:	4906      	ldr	r1, [pc, #24]	; (800ad6c <__assert_func+0x34>)
 800ad54:	f000 f870 	bl	800ae38 <fiprintf>
 800ad58:	f000 f880 	bl	800ae5c <abort>
 800ad5c:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <__assert_func+0x38>)
 800ad5e:	461c      	mov	r4, r3
 800ad60:	e7f3      	b.n	800ad4a <__assert_func+0x12>
 800ad62:	bf00      	nop
 800ad64:	200000d4 	.word	0x200000d4
 800ad68:	0800d13f 	.word	0x0800d13f
 800ad6c:	0800d14c 	.word	0x0800d14c
 800ad70:	0800d17a 	.word	0x0800d17a

0800ad74 <_calloc_r>:
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	fba1 5402 	umull	r5, r4, r1, r2
 800ad7a:	b934      	cbnz	r4, 800ad8a <_calloc_r+0x16>
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	f7ff f9ab 	bl	800a0d8 <_malloc_r>
 800ad82:	4606      	mov	r6, r0
 800ad84:	b928      	cbnz	r0, 800ad92 <_calloc_r+0x1e>
 800ad86:	4630      	mov	r0, r6
 800ad88:	bd70      	pop	{r4, r5, r6, pc}
 800ad8a:	220c      	movs	r2, #12
 800ad8c:	2600      	movs	r6, #0
 800ad8e:	6002      	str	r2, [r0, #0]
 800ad90:	e7f9      	b.n	800ad86 <_calloc_r+0x12>
 800ad92:	462a      	mov	r2, r5
 800ad94:	4621      	mov	r1, r4
 800ad96:	f7fe fa24 	bl	80091e2 <memset>
 800ad9a:	e7f4      	b.n	800ad86 <_calloc_r+0x12>

0800ad9c <__ascii_mbtowc>:
 800ad9c:	b082      	sub	sp, #8
 800ad9e:	b901      	cbnz	r1, 800ada2 <__ascii_mbtowc+0x6>
 800ada0:	a901      	add	r1, sp, #4
 800ada2:	b142      	cbz	r2, 800adb6 <__ascii_mbtowc+0x1a>
 800ada4:	b14b      	cbz	r3, 800adba <__ascii_mbtowc+0x1e>
 800ada6:	7813      	ldrb	r3, [r2, #0]
 800ada8:	600b      	str	r3, [r1, #0]
 800adaa:	7812      	ldrb	r2, [r2, #0]
 800adac:	1e10      	subs	r0, r2, #0
 800adae:	bf18      	it	ne
 800adb0:	2001      	movne	r0, #1
 800adb2:	b002      	add	sp, #8
 800adb4:	4770      	bx	lr
 800adb6:	4610      	mov	r0, r2
 800adb8:	e7fb      	b.n	800adb2 <__ascii_mbtowc+0x16>
 800adba:	f06f 0001 	mvn.w	r0, #1
 800adbe:	e7f8      	b.n	800adb2 <__ascii_mbtowc+0x16>

0800adc0 <_realloc_r>:
 800adc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc4:	4680      	mov	r8, r0
 800adc6:	4614      	mov	r4, r2
 800adc8:	460e      	mov	r6, r1
 800adca:	b921      	cbnz	r1, 800add6 <_realloc_r+0x16>
 800adcc:	4611      	mov	r1, r2
 800adce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800add2:	f7ff b981 	b.w	800a0d8 <_malloc_r>
 800add6:	b92a      	cbnz	r2, 800ade4 <_realloc_r+0x24>
 800add8:	f7ff f90e 	bl	8009ff8 <_free_r>
 800addc:	4625      	mov	r5, r4
 800adde:	4628      	mov	r0, r5
 800ade0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade4:	f000 f841 	bl	800ae6a <_malloc_usable_size_r>
 800ade8:	4284      	cmp	r4, r0
 800adea:	4607      	mov	r7, r0
 800adec:	d802      	bhi.n	800adf4 <_realloc_r+0x34>
 800adee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adf2:	d812      	bhi.n	800ae1a <_realloc_r+0x5a>
 800adf4:	4621      	mov	r1, r4
 800adf6:	4640      	mov	r0, r8
 800adf8:	f7ff f96e 	bl	800a0d8 <_malloc_r>
 800adfc:	4605      	mov	r5, r0
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d0ed      	beq.n	800adde <_realloc_r+0x1e>
 800ae02:	42bc      	cmp	r4, r7
 800ae04:	4622      	mov	r2, r4
 800ae06:	4631      	mov	r1, r6
 800ae08:	bf28      	it	cs
 800ae0a:	463a      	movcs	r2, r7
 800ae0c:	f7fe fa77 	bl	80092fe <memcpy>
 800ae10:	4631      	mov	r1, r6
 800ae12:	4640      	mov	r0, r8
 800ae14:	f7ff f8f0 	bl	8009ff8 <_free_r>
 800ae18:	e7e1      	b.n	800adde <_realloc_r+0x1e>
 800ae1a:	4635      	mov	r5, r6
 800ae1c:	e7df      	b.n	800adde <_realloc_r+0x1e>

0800ae1e <__ascii_wctomb>:
 800ae1e:	4603      	mov	r3, r0
 800ae20:	4608      	mov	r0, r1
 800ae22:	b141      	cbz	r1, 800ae36 <__ascii_wctomb+0x18>
 800ae24:	2aff      	cmp	r2, #255	; 0xff
 800ae26:	d904      	bls.n	800ae32 <__ascii_wctomb+0x14>
 800ae28:	228a      	movs	r2, #138	; 0x8a
 800ae2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2e:	601a      	str	r2, [r3, #0]
 800ae30:	4770      	bx	lr
 800ae32:	2001      	movs	r0, #1
 800ae34:	700a      	strb	r2, [r1, #0]
 800ae36:	4770      	bx	lr

0800ae38 <fiprintf>:
 800ae38:	b40e      	push	{r1, r2, r3}
 800ae3a:	b503      	push	{r0, r1, lr}
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	ab03      	add	r3, sp, #12
 800ae40:	4805      	ldr	r0, [pc, #20]	; (800ae58 <fiprintf+0x20>)
 800ae42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae46:	6800      	ldr	r0, [r0, #0]
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	f000 f83d 	bl	800aec8 <_vfiprintf_r>
 800ae4e:	b002      	add	sp, #8
 800ae50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae54:	b003      	add	sp, #12
 800ae56:	4770      	bx	lr
 800ae58:	200000d4 	.word	0x200000d4

0800ae5c <abort>:
 800ae5c:	2006      	movs	r0, #6
 800ae5e:	b508      	push	{r3, lr}
 800ae60:	f000 fa0a 	bl	800b278 <raise>
 800ae64:	2001      	movs	r0, #1
 800ae66:	f7f8 fa18 	bl	800329a <_exit>

0800ae6a <_malloc_usable_size_r>:
 800ae6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae6e:	1f18      	subs	r0, r3, #4
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bfbc      	itt	lt
 800ae74:	580b      	ldrlt	r3, [r1, r0]
 800ae76:	18c0      	addlt	r0, r0, r3
 800ae78:	4770      	bx	lr

0800ae7a <__sfputc_r>:
 800ae7a:	6893      	ldr	r3, [r2, #8]
 800ae7c:	b410      	push	{r4}
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	6093      	str	r3, [r2, #8]
 800ae84:	da07      	bge.n	800ae96 <__sfputc_r+0x1c>
 800ae86:	6994      	ldr	r4, [r2, #24]
 800ae88:	42a3      	cmp	r3, r4
 800ae8a:	db01      	blt.n	800ae90 <__sfputc_r+0x16>
 800ae8c:	290a      	cmp	r1, #10
 800ae8e:	d102      	bne.n	800ae96 <__sfputc_r+0x1c>
 800ae90:	bc10      	pop	{r4}
 800ae92:	f000 b933 	b.w	800b0fc <__swbuf_r>
 800ae96:	6813      	ldr	r3, [r2, #0]
 800ae98:	1c58      	adds	r0, r3, #1
 800ae9a:	6010      	str	r0, [r2, #0]
 800ae9c:	7019      	strb	r1, [r3, #0]
 800ae9e:	4608      	mov	r0, r1
 800aea0:	bc10      	pop	{r4}
 800aea2:	4770      	bx	lr

0800aea4 <__sfputs_r>:
 800aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea6:	4606      	mov	r6, r0
 800aea8:	460f      	mov	r7, r1
 800aeaa:	4614      	mov	r4, r2
 800aeac:	18d5      	adds	r5, r2, r3
 800aeae:	42ac      	cmp	r4, r5
 800aeb0:	d101      	bne.n	800aeb6 <__sfputs_r+0x12>
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	e007      	b.n	800aec6 <__sfputs_r+0x22>
 800aeb6:	463a      	mov	r2, r7
 800aeb8:	4630      	mov	r0, r6
 800aeba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aebe:	f7ff ffdc 	bl	800ae7a <__sfputc_r>
 800aec2:	1c43      	adds	r3, r0, #1
 800aec4:	d1f3      	bne.n	800aeae <__sfputs_r+0xa>
 800aec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aec8 <_vfiprintf_r>:
 800aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	460d      	mov	r5, r1
 800aece:	4614      	mov	r4, r2
 800aed0:	4698      	mov	r8, r3
 800aed2:	4606      	mov	r6, r0
 800aed4:	b09d      	sub	sp, #116	; 0x74
 800aed6:	b118      	cbz	r0, 800aee0 <_vfiprintf_r+0x18>
 800aed8:	6a03      	ldr	r3, [r0, #32]
 800aeda:	b90b      	cbnz	r3, 800aee0 <_vfiprintf_r+0x18>
 800aedc:	f7fe f8e8 	bl	80090b0 <__sinit>
 800aee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aee2:	07d9      	lsls	r1, r3, #31
 800aee4:	d405      	bmi.n	800aef2 <_vfiprintf_r+0x2a>
 800aee6:	89ab      	ldrh	r3, [r5, #12]
 800aee8:	059a      	lsls	r2, r3, #22
 800aeea:	d402      	bmi.n	800aef2 <_vfiprintf_r+0x2a>
 800aeec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeee:	f7fe f9f6 	bl	80092de <__retarget_lock_acquire_recursive>
 800aef2:	89ab      	ldrh	r3, [r5, #12]
 800aef4:	071b      	lsls	r3, r3, #28
 800aef6:	d501      	bpl.n	800aefc <_vfiprintf_r+0x34>
 800aef8:	692b      	ldr	r3, [r5, #16]
 800aefa:	b99b      	cbnz	r3, 800af24 <_vfiprintf_r+0x5c>
 800aefc:	4629      	mov	r1, r5
 800aefe:	4630      	mov	r0, r6
 800af00:	f000 f93a 	bl	800b178 <__swsetup_r>
 800af04:	b170      	cbz	r0, 800af24 <_vfiprintf_r+0x5c>
 800af06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af08:	07dc      	lsls	r4, r3, #31
 800af0a:	d504      	bpl.n	800af16 <_vfiprintf_r+0x4e>
 800af0c:	f04f 30ff 	mov.w	r0, #4294967295
 800af10:	b01d      	add	sp, #116	; 0x74
 800af12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af16:	89ab      	ldrh	r3, [r5, #12]
 800af18:	0598      	lsls	r0, r3, #22
 800af1a:	d4f7      	bmi.n	800af0c <_vfiprintf_r+0x44>
 800af1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af1e:	f7fe f9df 	bl	80092e0 <__retarget_lock_release_recursive>
 800af22:	e7f3      	b.n	800af0c <_vfiprintf_r+0x44>
 800af24:	2300      	movs	r3, #0
 800af26:	9309      	str	r3, [sp, #36]	; 0x24
 800af28:	2320      	movs	r3, #32
 800af2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af2e:	2330      	movs	r3, #48	; 0x30
 800af30:	f04f 0901 	mov.w	r9, #1
 800af34:	f8cd 800c 	str.w	r8, [sp, #12]
 800af38:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b0e8 <_vfiprintf_r+0x220>
 800af3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af40:	4623      	mov	r3, r4
 800af42:	469a      	mov	sl, r3
 800af44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af48:	b10a      	cbz	r2, 800af4e <_vfiprintf_r+0x86>
 800af4a:	2a25      	cmp	r2, #37	; 0x25
 800af4c:	d1f9      	bne.n	800af42 <_vfiprintf_r+0x7a>
 800af4e:	ebba 0b04 	subs.w	fp, sl, r4
 800af52:	d00b      	beq.n	800af6c <_vfiprintf_r+0xa4>
 800af54:	465b      	mov	r3, fp
 800af56:	4622      	mov	r2, r4
 800af58:	4629      	mov	r1, r5
 800af5a:	4630      	mov	r0, r6
 800af5c:	f7ff ffa2 	bl	800aea4 <__sfputs_r>
 800af60:	3001      	adds	r0, #1
 800af62:	f000 80a9 	beq.w	800b0b8 <_vfiprintf_r+0x1f0>
 800af66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af68:	445a      	add	r2, fp
 800af6a:	9209      	str	r2, [sp, #36]	; 0x24
 800af6c:	f89a 3000 	ldrb.w	r3, [sl]
 800af70:	2b00      	cmp	r3, #0
 800af72:	f000 80a1 	beq.w	800b0b8 <_vfiprintf_r+0x1f0>
 800af76:	2300      	movs	r3, #0
 800af78:	f04f 32ff 	mov.w	r2, #4294967295
 800af7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af80:	f10a 0a01 	add.w	sl, sl, #1
 800af84:	9304      	str	r3, [sp, #16]
 800af86:	9307      	str	r3, [sp, #28]
 800af88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af8c:	931a      	str	r3, [sp, #104]	; 0x68
 800af8e:	4654      	mov	r4, sl
 800af90:	2205      	movs	r2, #5
 800af92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af96:	4854      	ldr	r0, [pc, #336]	; (800b0e8 <_vfiprintf_r+0x220>)
 800af98:	f7fe f9a3 	bl	80092e2 <memchr>
 800af9c:	9a04      	ldr	r2, [sp, #16]
 800af9e:	b9d8      	cbnz	r0, 800afd8 <_vfiprintf_r+0x110>
 800afa0:	06d1      	lsls	r1, r2, #27
 800afa2:	bf44      	itt	mi
 800afa4:	2320      	movmi	r3, #32
 800afa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afaa:	0713      	lsls	r3, r2, #28
 800afac:	bf44      	itt	mi
 800afae:	232b      	movmi	r3, #43	; 0x2b
 800afb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afb4:	f89a 3000 	ldrb.w	r3, [sl]
 800afb8:	2b2a      	cmp	r3, #42	; 0x2a
 800afba:	d015      	beq.n	800afe8 <_vfiprintf_r+0x120>
 800afbc:	4654      	mov	r4, sl
 800afbe:	2000      	movs	r0, #0
 800afc0:	f04f 0c0a 	mov.w	ip, #10
 800afc4:	9a07      	ldr	r2, [sp, #28]
 800afc6:	4621      	mov	r1, r4
 800afc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afcc:	3b30      	subs	r3, #48	; 0x30
 800afce:	2b09      	cmp	r3, #9
 800afd0:	d94d      	bls.n	800b06e <_vfiprintf_r+0x1a6>
 800afd2:	b1b0      	cbz	r0, 800b002 <_vfiprintf_r+0x13a>
 800afd4:	9207      	str	r2, [sp, #28]
 800afd6:	e014      	b.n	800b002 <_vfiprintf_r+0x13a>
 800afd8:	eba0 0308 	sub.w	r3, r0, r8
 800afdc:	fa09 f303 	lsl.w	r3, r9, r3
 800afe0:	4313      	orrs	r3, r2
 800afe2:	46a2      	mov	sl, r4
 800afe4:	9304      	str	r3, [sp, #16]
 800afe6:	e7d2      	b.n	800af8e <_vfiprintf_r+0xc6>
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	1d19      	adds	r1, r3, #4
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	9103      	str	r1, [sp, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	bfbb      	ittet	lt
 800aff4:	425b      	neglt	r3, r3
 800aff6:	f042 0202 	orrlt.w	r2, r2, #2
 800affa:	9307      	strge	r3, [sp, #28]
 800affc:	9307      	strlt	r3, [sp, #28]
 800affe:	bfb8      	it	lt
 800b000:	9204      	strlt	r2, [sp, #16]
 800b002:	7823      	ldrb	r3, [r4, #0]
 800b004:	2b2e      	cmp	r3, #46	; 0x2e
 800b006:	d10c      	bne.n	800b022 <_vfiprintf_r+0x15a>
 800b008:	7863      	ldrb	r3, [r4, #1]
 800b00a:	2b2a      	cmp	r3, #42	; 0x2a
 800b00c:	d134      	bne.n	800b078 <_vfiprintf_r+0x1b0>
 800b00e:	9b03      	ldr	r3, [sp, #12]
 800b010:	3402      	adds	r4, #2
 800b012:	1d1a      	adds	r2, r3, #4
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	9203      	str	r2, [sp, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	bfb8      	it	lt
 800b01c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b020:	9305      	str	r3, [sp, #20]
 800b022:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b0ec <_vfiprintf_r+0x224>
 800b026:	2203      	movs	r2, #3
 800b028:	4650      	mov	r0, sl
 800b02a:	7821      	ldrb	r1, [r4, #0]
 800b02c:	f7fe f959 	bl	80092e2 <memchr>
 800b030:	b138      	cbz	r0, 800b042 <_vfiprintf_r+0x17a>
 800b032:	2240      	movs	r2, #64	; 0x40
 800b034:	9b04      	ldr	r3, [sp, #16]
 800b036:	eba0 000a 	sub.w	r0, r0, sl
 800b03a:	4082      	lsls	r2, r0
 800b03c:	4313      	orrs	r3, r2
 800b03e:	3401      	adds	r4, #1
 800b040:	9304      	str	r3, [sp, #16]
 800b042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b046:	2206      	movs	r2, #6
 800b048:	4829      	ldr	r0, [pc, #164]	; (800b0f0 <_vfiprintf_r+0x228>)
 800b04a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b04e:	f7fe f948 	bl	80092e2 <memchr>
 800b052:	2800      	cmp	r0, #0
 800b054:	d03f      	beq.n	800b0d6 <_vfiprintf_r+0x20e>
 800b056:	4b27      	ldr	r3, [pc, #156]	; (800b0f4 <_vfiprintf_r+0x22c>)
 800b058:	bb1b      	cbnz	r3, 800b0a2 <_vfiprintf_r+0x1da>
 800b05a:	9b03      	ldr	r3, [sp, #12]
 800b05c:	3307      	adds	r3, #7
 800b05e:	f023 0307 	bic.w	r3, r3, #7
 800b062:	3308      	adds	r3, #8
 800b064:	9303      	str	r3, [sp, #12]
 800b066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b068:	443b      	add	r3, r7
 800b06a:	9309      	str	r3, [sp, #36]	; 0x24
 800b06c:	e768      	b.n	800af40 <_vfiprintf_r+0x78>
 800b06e:	460c      	mov	r4, r1
 800b070:	2001      	movs	r0, #1
 800b072:	fb0c 3202 	mla	r2, ip, r2, r3
 800b076:	e7a6      	b.n	800afc6 <_vfiprintf_r+0xfe>
 800b078:	2300      	movs	r3, #0
 800b07a:	f04f 0c0a 	mov.w	ip, #10
 800b07e:	4619      	mov	r1, r3
 800b080:	3401      	adds	r4, #1
 800b082:	9305      	str	r3, [sp, #20]
 800b084:	4620      	mov	r0, r4
 800b086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b08a:	3a30      	subs	r2, #48	; 0x30
 800b08c:	2a09      	cmp	r2, #9
 800b08e:	d903      	bls.n	800b098 <_vfiprintf_r+0x1d0>
 800b090:	2b00      	cmp	r3, #0
 800b092:	d0c6      	beq.n	800b022 <_vfiprintf_r+0x15a>
 800b094:	9105      	str	r1, [sp, #20]
 800b096:	e7c4      	b.n	800b022 <_vfiprintf_r+0x15a>
 800b098:	4604      	mov	r4, r0
 800b09a:	2301      	movs	r3, #1
 800b09c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0a0:	e7f0      	b.n	800b084 <_vfiprintf_r+0x1bc>
 800b0a2:	ab03      	add	r3, sp, #12
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	462a      	mov	r2, r5
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	4b13      	ldr	r3, [pc, #76]	; (800b0f8 <_vfiprintf_r+0x230>)
 800b0ac:	a904      	add	r1, sp, #16
 800b0ae:	f7fd fbb1 	bl	8008814 <_printf_float>
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	1c78      	adds	r0, r7, #1
 800b0b6:	d1d6      	bne.n	800b066 <_vfiprintf_r+0x19e>
 800b0b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ba:	07d9      	lsls	r1, r3, #31
 800b0bc:	d405      	bmi.n	800b0ca <_vfiprintf_r+0x202>
 800b0be:	89ab      	ldrh	r3, [r5, #12]
 800b0c0:	059a      	lsls	r2, r3, #22
 800b0c2:	d402      	bmi.n	800b0ca <_vfiprintf_r+0x202>
 800b0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0c6:	f7fe f90b 	bl	80092e0 <__retarget_lock_release_recursive>
 800b0ca:	89ab      	ldrh	r3, [r5, #12]
 800b0cc:	065b      	lsls	r3, r3, #25
 800b0ce:	f53f af1d 	bmi.w	800af0c <_vfiprintf_r+0x44>
 800b0d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0d4:	e71c      	b.n	800af10 <_vfiprintf_r+0x48>
 800b0d6:	ab03      	add	r3, sp, #12
 800b0d8:	9300      	str	r3, [sp, #0]
 800b0da:	462a      	mov	r2, r5
 800b0dc:	4630      	mov	r0, r6
 800b0de:	4b06      	ldr	r3, [pc, #24]	; (800b0f8 <_vfiprintf_r+0x230>)
 800b0e0:	a904      	add	r1, sp, #16
 800b0e2:	f7fd fe37 	bl	8008d54 <_printf_i>
 800b0e6:	e7e4      	b.n	800b0b2 <_vfiprintf_r+0x1ea>
 800b0e8:	0800d124 	.word	0x0800d124
 800b0ec:	0800d12a 	.word	0x0800d12a
 800b0f0:	0800d12e 	.word	0x0800d12e
 800b0f4:	08008815 	.word	0x08008815
 800b0f8:	0800aea5 	.word	0x0800aea5

0800b0fc <__swbuf_r>:
 800b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fe:	460e      	mov	r6, r1
 800b100:	4614      	mov	r4, r2
 800b102:	4605      	mov	r5, r0
 800b104:	b118      	cbz	r0, 800b10e <__swbuf_r+0x12>
 800b106:	6a03      	ldr	r3, [r0, #32]
 800b108:	b90b      	cbnz	r3, 800b10e <__swbuf_r+0x12>
 800b10a:	f7fd ffd1 	bl	80090b0 <__sinit>
 800b10e:	69a3      	ldr	r3, [r4, #24]
 800b110:	60a3      	str	r3, [r4, #8]
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	071a      	lsls	r2, r3, #28
 800b116:	d525      	bpl.n	800b164 <__swbuf_r+0x68>
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	b31b      	cbz	r3, 800b164 <__swbuf_r+0x68>
 800b11c:	6823      	ldr	r3, [r4, #0]
 800b11e:	6922      	ldr	r2, [r4, #16]
 800b120:	b2f6      	uxtb	r6, r6
 800b122:	1a98      	subs	r0, r3, r2
 800b124:	6963      	ldr	r3, [r4, #20]
 800b126:	4637      	mov	r7, r6
 800b128:	4283      	cmp	r3, r0
 800b12a:	dc04      	bgt.n	800b136 <__swbuf_r+0x3a>
 800b12c:	4621      	mov	r1, r4
 800b12e:	4628      	mov	r0, r5
 800b130:	f7ff fdb0 	bl	800ac94 <_fflush_r>
 800b134:	b9e0      	cbnz	r0, 800b170 <__swbuf_r+0x74>
 800b136:	68a3      	ldr	r3, [r4, #8]
 800b138:	3b01      	subs	r3, #1
 800b13a:	60a3      	str	r3, [r4, #8]
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	6022      	str	r2, [r4, #0]
 800b142:	701e      	strb	r6, [r3, #0]
 800b144:	6962      	ldr	r2, [r4, #20]
 800b146:	1c43      	adds	r3, r0, #1
 800b148:	429a      	cmp	r2, r3
 800b14a:	d004      	beq.n	800b156 <__swbuf_r+0x5a>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	07db      	lsls	r3, r3, #31
 800b150:	d506      	bpl.n	800b160 <__swbuf_r+0x64>
 800b152:	2e0a      	cmp	r6, #10
 800b154:	d104      	bne.n	800b160 <__swbuf_r+0x64>
 800b156:	4621      	mov	r1, r4
 800b158:	4628      	mov	r0, r5
 800b15a:	f7ff fd9b 	bl	800ac94 <_fflush_r>
 800b15e:	b938      	cbnz	r0, 800b170 <__swbuf_r+0x74>
 800b160:	4638      	mov	r0, r7
 800b162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b164:	4621      	mov	r1, r4
 800b166:	4628      	mov	r0, r5
 800b168:	f000 f806 	bl	800b178 <__swsetup_r>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d0d5      	beq.n	800b11c <__swbuf_r+0x20>
 800b170:	f04f 37ff 	mov.w	r7, #4294967295
 800b174:	e7f4      	b.n	800b160 <__swbuf_r+0x64>
	...

0800b178 <__swsetup_r>:
 800b178:	b538      	push	{r3, r4, r5, lr}
 800b17a:	4b2a      	ldr	r3, [pc, #168]	; (800b224 <__swsetup_r+0xac>)
 800b17c:	4605      	mov	r5, r0
 800b17e:	6818      	ldr	r0, [r3, #0]
 800b180:	460c      	mov	r4, r1
 800b182:	b118      	cbz	r0, 800b18c <__swsetup_r+0x14>
 800b184:	6a03      	ldr	r3, [r0, #32]
 800b186:	b90b      	cbnz	r3, 800b18c <__swsetup_r+0x14>
 800b188:	f7fd ff92 	bl	80090b0 <__sinit>
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b192:	0718      	lsls	r0, r3, #28
 800b194:	d422      	bmi.n	800b1dc <__swsetup_r+0x64>
 800b196:	06d9      	lsls	r1, r3, #27
 800b198:	d407      	bmi.n	800b1aa <__swsetup_r+0x32>
 800b19a:	2309      	movs	r3, #9
 800b19c:	602b      	str	r3, [r5, #0]
 800b19e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a6:	81a3      	strh	r3, [r4, #12]
 800b1a8:	e034      	b.n	800b214 <__swsetup_r+0x9c>
 800b1aa:	0758      	lsls	r0, r3, #29
 800b1ac:	d512      	bpl.n	800b1d4 <__swsetup_r+0x5c>
 800b1ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1b0:	b141      	cbz	r1, 800b1c4 <__swsetup_r+0x4c>
 800b1b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1b6:	4299      	cmp	r1, r3
 800b1b8:	d002      	beq.n	800b1c0 <__swsetup_r+0x48>
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	f7fe ff1c 	bl	8009ff8 <_free_r>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	6363      	str	r3, [r4, #52]	; 0x34
 800b1c4:	89a3      	ldrh	r3, [r4, #12]
 800b1c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1ca:	81a3      	strh	r3, [r4, #12]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	6063      	str	r3, [r4, #4]
 800b1d0:	6923      	ldr	r3, [r4, #16]
 800b1d2:	6023      	str	r3, [r4, #0]
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	f043 0308 	orr.w	r3, r3, #8
 800b1da:	81a3      	strh	r3, [r4, #12]
 800b1dc:	6923      	ldr	r3, [r4, #16]
 800b1de:	b94b      	cbnz	r3, 800b1f4 <__swsetup_r+0x7c>
 800b1e0:	89a3      	ldrh	r3, [r4, #12]
 800b1e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1ea:	d003      	beq.n	800b1f4 <__swsetup_r+0x7c>
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f000 f883 	bl	800b2fa <__smakebuf_r>
 800b1f4:	89a0      	ldrh	r0, [r4, #12]
 800b1f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1fa:	f010 0301 	ands.w	r3, r0, #1
 800b1fe:	d00a      	beq.n	800b216 <__swsetup_r+0x9e>
 800b200:	2300      	movs	r3, #0
 800b202:	60a3      	str	r3, [r4, #8]
 800b204:	6963      	ldr	r3, [r4, #20]
 800b206:	425b      	negs	r3, r3
 800b208:	61a3      	str	r3, [r4, #24]
 800b20a:	6923      	ldr	r3, [r4, #16]
 800b20c:	b943      	cbnz	r3, 800b220 <__swsetup_r+0xa8>
 800b20e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b212:	d1c4      	bne.n	800b19e <__swsetup_r+0x26>
 800b214:	bd38      	pop	{r3, r4, r5, pc}
 800b216:	0781      	lsls	r1, r0, #30
 800b218:	bf58      	it	pl
 800b21a:	6963      	ldrpl	r3, [r4, #20]
 800b21c:	60a3      	str	r3, [r4, #8]
 800b21e:	e7f4      	b.n	800b20a <__swsetup_r+0x92>
 800b220:	2000      	movs	r0, #0
 800b222:	e7f7      	b.n	800b214 <__swsetup_r+0x9c>
 800b224:	200000d4 	.word	0x200000d4

0800b228 <_raise_r>:
 800b228:	291f      	cmp	r1, #31
 800b22a:	b538      	push	{r3, r4, r5, lr}
 800b22c:	4604      	mov	r4, r0
 800b22e:	460d      	mov	r5, r1
 800b230:	d904      	bls.n	800b23c <_raise_r+0x14>
 800b232:	2316      	movs	r3, #22
 800b234:	6003      	str	r3, [r0, #0]
 800b236:	f04f 30ff 	mov.w	r0, #4294967295
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b23e:	b112      	cbz	r2, 800b246 <_raise_r+0x1e>
 800b240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b244:	b94b      	cbnz	r3, 800b25a <_raise_r+0x32>
 800b246:	4620      	mov	r0, r4
 800b248:	f000 f830 	bl	800b2ac <_getpid_r>
 800b24c:	462a      	mov	r2, r5
 800b24e:	4601      	mov	r1, r0
 800b250:	4620      	mov	r0, r4
 800b252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b256:	f000 b817 	b.w	800b288 <_kill_r>
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d00a      	beq.n	800b274 <_raise_r+0x4c>
 800b25e:	1c59      	adds	r1, r3, #1
 800b260:	d103      	bne.n	800b26a <_raise_r+0x42>
 800b262:	2316      	movs	r3, #22
 800b264:	6003      	str	r3, [r0, #0]
 800b266:	2001      	movs	r0, #1
 800b268:	e7e7      	b.n	800b23a <_raise_r+0x12>
 800b26a:	2400      	movs	r4, #0
 800b26c:	4628      	mov	r0, r5
 800b26e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b272:	4798      	blx	r3
 800b274:	2000      	movs	r0, #0
 800b276:	e7e0      	b.n	800b23a <_raise_r+0x12>

0800b278 <raise>:
 800b278:	4b02      	ldr	r3, [pc, #8]	; (800b284 <raise+0xc>)
 800b27a:	4601      	mov	r1, r0
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	f7ff bfd3 	b.w	800b228 <_raise_r>
 800b282:	bf00      	nop
 800b284:	200000d4 	.word	0x200000d4

0800b288 <_kill_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	2300      	movs	r3, #0
 800b28c:	4d06      	ldr	r5, [pc, #24]	; (800b2a8 <_kill_r+0x20>)
 800b28e:	4604      	mov	r4, r0
 800b290:	4608      	mov	r0, r1
 800b292:	4611      	mov	r1, r2
 800b294:	602b      	str	r3, [r5, #0]
 800b296:	f7f7 fff0 	bl	800327a <_kill>
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	d102      	bne.n	800b2a4 <_kill_r+0x1c>
 800b29e:	682b      	ldr	r3, [r5, #0]
 800b2a0:	b103      	cbz	r3, 800b2a4 <_kill_r+0x1c>
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20001080 	.word	0x20001080

0800b2ac <_getpid_r>:
 800b2ac:	f7f7 bfde 	b.w	800326c <_getpid>

0800b2b0 <__swhatbuf_r>:
 800b2b0:	b570      	push	{r4, r5, r6, lr}
 800b2b2:	460c      	mov	r4, r1
 800b2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b8:	4615      	mov	r5, r2
 800b2ba:	2900      	cmp	r1, #0
 800b2bc:	461e      	mov	r6, r3
 800b2be:	b096      	sub	sp, #88	; 0x58
 800b2c0:	da0c      	bge.n	800b2dc <__swhatbuf_r+0x2c>
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b2ca:	bf0c      	ite	eq
 800b2cc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b2d0:	2340      	movne	r3, #64	; 0x40
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	6031      	str	r1, [r6, #0]
 800b2d6:	602b      	str	r3, [r5, #0]
 800b2d8:	b016      	add	sp, #88	; 0x58
 800b2da:	bd70      	pop	{r4, r5, r6, pc}
 800b2dc:	466a      	mov	r2, sp
 800b2de:	f000 f849 	bl	800b374 <_fstat_r>
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	dbed      	blt.n	800b2c2 <__swhatbuf_r+0x12>
 800b2e6:	9901      	ldr	r1, [sp, #4]
 800b2e8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b2ec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b2f0:	4259      	negs	r1, r3
 800b2f2:	4159      	adcs	r1, r3
 800b2f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2f8:	e7eb      	b.n	800b2d2 <__swhatbuf_r+0x22>

0800b2fa <__smakebuf_r>:
 800b2fa:	898b      	ldrh	r3, [r1, #12]
 800b2fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b2fe:	079d      	lsls	r5, r3, #30
 800b300:	4606      	mov	r6, r0
 800b302:	460c      	mov	r4, r1
 800b304:	d507      	bpl.n	800b316 <__smakebuf_r+0x1c>
 800b306:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	6123      	str	r3, [r4, #16]
 800b30e:	2301      	movs	r3, #1
 800b310:	6163      	str	r3, [r4, #20]
 800b312:	b002      	add	sp, #8
 800b314:	bd70      	pop	{r4, r5, r6, pc}
 800b316:	466a      	mov	r2, sp
 800b318:	ab01      	add	r3, sp, #4
 800b31a:	f7ff ffc9 	bl	800b2b0 <__swhatbuf_r>
 800b31e:	9900      	ldr	r1, [sp, #0]
 800b320:	4605      	mov	r5, r0
 800b322:	4630      	mov	r0, r6
 800b324:	f7fe fed8 	bl	800a0d8 <_malloc_r>
 800b328:	b948      	cbnz	r0, 800b33e <__smakebuf_r+0x44>
 800b32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b32e:	059a      	lsls	r2, r3, #22
 800b330:	d4ef      	bmi.n	800b312 <__smakebuf_r+0x18>
 800b332:	f023 0303 	bic.w	r3, r3, #3
 800b336:	f043 0302 	orr.w	r3, r3, #2
 800b33a:	81a3      	strh	r3, [r4, #12]
 800b33c:	e7e3      	b.n	800b306 <__smakebuf_r+0xc>
 800b33e:	89a3      	ldrh	r3, [r4, #12]
 800b340:	6020      	str	r0, [r4, #0]
 800b342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b346:	81a3      	strh	r3, [r4, #12]
 800b348:	9b00      	ldr	r3, [sp, #0]
 800b34a:	6120      	str	r0, [r4, #16]
 800b34c:	6163      	str	r3, [r4, #20]
 800b34e:	9b01      	ldr	r3, [sp, #4]
 800b350:	b15b      	cbz	r3, 800b36a <__smakebuf_r+0x70>
 800b352:	4630      	mov	r0, r6
 800b354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b358:	f000 f81e 	bl	800b398 <_isatty_r>
 800b35c:	b128      	cbz	r0, 800b36a <__smakebuf_r+0x70>
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	f023 0303 	bic.w	r3, r3, #3
 800b364:	f043 0301 	orr.w	r3, r3, #1
 800b368:	81a3      	strh	r3, [r4, #12]
 800b36a:	89a3      	ldrh	r3, [r4, #12]
 800b36c:	431d      	orrs	r5, r3
 800b36e:	81a5      	strh	r5, [r4, #12]
 800b370:	e7cf      	b.n	800b312 <__smakebuf_r+0x18>
	...

0800b374 <_fstat_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	2300      	movs	r3, #0
 800b378:	4d06      	ldr	r5, [pc, #24]	; (800b394 <_fstat_r+0x20>)
 800b37a:	4604      	mov	r4, r0
 800b37c:	4608      	mov	r0, r1
 800b37e:	4611      	mov	r1, r2
 800b380:	602b      	str	r3, [r5, #0]
 800b382:	f7f7 ffd8 	bl	8003336 <_fstat>
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	d102      	bne.n	800b390 <_fstat_r+0x1c>
 800b38a:	682b      	ldr	r3, [r5, #0]
 800b38c:	b103      	cbz	r3, 800b390 <_fstat_r+0x1c>
 800b38e:	6023      	str	r3, [r4, #0]
 800b390:	bd38      	pop	{r3, r4, r5, pc}
 800b392:	bf00      	nop
 800b394:	20001080 	.word	0x20001080

0800b398 <_isatty_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	2300      	movs	r3, #0
 800b39c:	4d05      	ldr	r5, [pc, #20]	; (800b3b4 <_isatty_r+0x1c>)
 800b39e:	4604      	mov	r4, r0
 800b3a0:	4608      	mov	r0, r1
 800b3a2:	602b      	str	r3, [r5, #0]
 800b3a4:	f7f7 ffd6 	bl	8003354 <_isatty>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_isatty_r+0x1a>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_isatty_r+0x1a>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	20001080 	.word	0x20001080

0800b3b8 <pow>:
 800b3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3bc:	4614      	mov	r4, r2
 800b3be:	461d      	mov	r5, r3
 800b3c0:	4680      	mov	r8, r0
 800b3c2:	4689      	mov	r9, r1
 800b3c4:	f000 f868 	bl	800b498 <__ieee754_pow>
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	460f      	mov	r7, r1
 800b3ce:	462b      	mov	r3, r5
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	f7f5 fb1a 	bl	8000a0c <__aeabi_dcmpun>
 800b3d8:	bbc8      	cbnz	r0, 800b44e <pow+0x96>
 800b3da:	2200      	movs	r2, #0
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4640      	mov	r0, r8
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	f7f5 fae1 	bl	80009a8 <__aeabi_dcmpeq>
 800b3e6:	b1b8      	cbz	r0, 800b418 <pow+0x60>
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	f7f5 fada 	bl	80009a8 <__aeabi_dcmpeq>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d141      	bne.n	800b47c <pow+0xc4>
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	4629      	mov	r1, r5
 800b3fc:	f000 f844 	bl	800b488 <finite>
 800b400:	b328      	cbz	r0, 800b44e <pow+0x96>
 800b402:	2200      	movs	r2, #0
 800b404:	2300      	movs	r3, #0
 800b406:	4620      	mov	r0, r4
 800b408:	4629      	mov	r1, r5
 800b40a:	f7f5 fad7 	bl	80009bc <__aeabi_dcmplt>
 800b40e:	b1f0      	cbz	r0, 800b44e <pow+0x96>
 800b410:	f7fd ff3a 	bl	8009288 <__errno>
 800b414:	2322      	movs	r3, #34	; 0x22
 800b416:	e019      	b.n	800b44c <pow+0x94>
 800b418:	4630      	mov	r0, r6
 800b41a:	4639      	mov	r1, r7
 800b41c:	f000 f834 	bl	800b488 <finite>
 800b420:	b9c8      	cbnz	r0, 800b456 <pow+0x9e>
 800b422:	4640      	mov	r0, r8
 800b424:	4649      	mov	r1, r9
 800b426:	f000 f82f 	bl	800b488 <finite>
 800b42a:	b1a0      	cbz	r0, 800b456 <pow+0x9e>
 800b42c:	4620      	mov	r0, r4
 800b42e:	4629      	mov	r1, r5
 800b430:	f000 f82a 	bl	800b488 <finite>
 800b434:	b178      	cbz	r0, 800b456 <pow+0x9e>
 800b436:	4632      	mov	r2, r6
 800b438:	463b      	mov	r3, r7
 800b43a:	4630      	mov	r0, r6
 800b43c:	4639      	mov	r1, r7
 800b43e:	f7f5 fae5 	bl	8000a0c <__aeabi_dcmpun>
 800b442:	2800      	cmp	r0, #0
 800b444:	d0e4      	beq.n	800b410 <pow+0x58>
 800b446:	f7fd ff1f 	bl	8009288 <__errno>
 800b44a:	2321      	movs	r3, #33	; 0x21
 800b44c:	6003      	str	r3, [r0, #0]
 800b44e:	4630      	mov	r0, r6
 800b450:	4639      	mov	r1, r7
 800b452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b456:	2200      	movs	r2, #0
 800b458:	2300      	movs	r3, #0
 800b45a:	4630      	mov	r0, r6
 800b45c:	4639      	mov	r1, r7
 800b45e:	f7f5 faa3 	bl	80009a8 <__aeabi_dcmpeq>
 800b462:	2800      	cmp	r0, #0
 800b464:	d0f3      	beq.n	800b44e <pow+0x96>
 800b466:	4640      	mov	r0, r8
 800b468:	4649      	mov	r1, r9
 800b46a:	f000 f80d 	bl	800b488 <finite>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d0ed      	beq.n	800b44e <pow+0x96>
 800b472:	4620      	mov	r0, r4
 800b474:	4629      	mov	r1, r5
 800b476:	f000 f807 	bl	800b488 <finite>
 800b47a:	e7c8      	b.n	800b40e <pow+0x56>
 800b47c:	2600      	movs	r6, #0
 800b47e:	4f01      	ldr	r7, [pc, #4]	; (800b484 <pow+0xcc>)
 800b480:	e7e5      	b.n	800b44e <pow+0x96>
 800b482:	bf00      	nop
 800b484:	3ff00000 	.word	0x3ff00000

0800b488 <finite>:
 800b488:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800b48c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b490:	0fc0      	lsrs	r0, r0, #31
 800b492:	4770      	bx	lr
 800b494:	0000      	movs	r0, r0
	...

0800b498 <__ieee754_pow>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	b093      	sub	sp, #76	; 0x4c
 800b49e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4a2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800b4a6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b4aa:	4689      	mov	r9, r1
 800b4ac:	ea56 0102 	orrs.w	r1, r6, r2
 800b4b0:	4680      	mov	r8, r0
 800b4b2:	d111      	bne.n	800b4d8 <__ieee754_pow+0x40>
 800b4b4:	1803      	adds	r3, r0, r0
 800b4b6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800b4ba:	4152      	adcs	r2, r2
 800b4bc:	4299      	cmp	r1, r3
 800b4be:	4b82      	ldr	r3, [pc, #520]	; (800b6c8 <__ieee754_pow+0x230>)
 800b4c0:	4193      	sbcs	r3, r2
 800b4c2:	f080 84ba 	bcs.w	800be3a <__ieee754_pow+0x9a2>
 800b4c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f4 fe4d 	bl	800016c <__adddf3>
 800b4d2:	4683      	mov	fp, r0
 800b4d4:	468c      	mov	ip, r1
 800b4d6:	e06f      	b.n	800b5b8 <__ieee754_pow+0x120>
 800b4d8:	4b7c      	ldr	r3, [pc, #496]	; (800b6cc <__ieee754_pow+0x234>)
 800b4da:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800b4de:	429c      	cmp	r4, r3
 800b4e0:	464d      	mov	r5, r9
 800b4e2:	4682      	mov	sl, r0
 800b4e4:	dc06      	bgt.n	800b4f4 <__ieee754_pow+0x5c>
 800b4e6:	d101      	bne.n	800b4ec <__ieee754_pow+0x54>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d1ec      	bne.n	800b4c6 <__ieee754_pow+0x2e>
 800b4ec:	429e      	cmp	r6, r3
 800b4ee:	dc01      	bgt.n	800b4f4 <__ieee754_pow+0x5c>
 800b4f0:	d10f      	bne.n	800b512 <__ieee754_pow+0x7a>
 800b4f2:	b172      	cbz	r2, 800b512 <__ieee754_pow+0x7a>
 800b4f4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b4f8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b4fc:	ea55 050a 	orrs.w	r5, r5, sl
 800b500:	d1e1      	bne.n	800b4c6 <__ieee754_pow+0x2e>
 800b502:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b506:	18db      	adds	r3, r3, r3
 800b508:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b50c:	4152      	adcs	r2, r2
 800b50e:	429d      	cmp	r5, r3
 800b510:	e7d5      	b.n	800b4be <__ieee754_pow+0x26>
 800b512:	2d00      	cmp	r5, #0
 800b514:	da39      	bge.n	800b58a <__ieee754_pow+0xf2>
 800b516:	4b6e      	ldr	r3, [pc, #440]	; (800b6d0 <__ieee754_pow+0x238>)
 800b518:	429e      	cmp	r6, r3
 800b51a:	dc52      	bgt.n	800b5c2 <__ieee754_pow+0x12a>
 800b51c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b520:	429e      	cmp	r6, r3
 800b522:	f340 849d 	ble.w	800be60 <__ieee754_pow+0x9c8>
 800b526:	1533      	asrs	r3, r6, #20
 800b528:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b52c:	2b14      	cmp	r3, #20
 800b52e:	dd0f      	ble.n	800b550 <__ieee754_pow+0xb8>
 800b530:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b534:	fa22 f103 	lsr.w	r1, r2, r3
 800b538:	fa01 f303 	lsl.w	r3, r1, r3
 800b53c:	4293      	cmp	r3, r2
 800b53e:	f040 848f 	bne.w	800be60 <__ieee754_pow+0x9c8>
 800b542:	f001 0101 	and.w	r1, r1, #1
 800b546:	f1c1 0302 	rsb	r3, r1, #2
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	b182      	cbz	r2, 800b570 <__ieee754_pow+0xd8>
 800b54e:	e05d      	b.n	800b60c <__ieee754_pow+0x174>
 800b550:	2a00      	cmp	r2, #0
 800b552:	d159      	bne.n	800b608 <__ieee754_pow+0x170>
 800b554:	f1c3 0314 	rsb	r3, r3, #20
 800b558:	fa46 f103 	asr.w	r1, r6, r3
 800b55c:	fa01 f303 	lsl.w	r3, r1, r3
 800b560:	42b3      	cmp	r3, r6
 800b562:	f040 847a 	bne.w	800be5a <__ieee754_pow+0x9c2>
 800b566:	f001 0101 	and.w	r1, r1, #1
 800b56a:	f1c1 0302 	rsb	r3, r1, #2
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	4b58      	ldr	r3, [pc, #352]	; (800b6d4 <__ieee754_pow+0x23c>)
 800b572:	429e      	cmp	r6, r3
 800b574:	d132      	bne.n	800b5dc <__ieee754_pow+0x144>
 800b576:	2f00      	cmp	r7, #0
 800b578:	f280 846b 	bge.w	800be52 <__ieee754_pow+0x9ba>
 800b57c:	4642      	mov	r2, r8
 800b57e:	464b      	mov	r3, r9
 800b580:	2000      	movs	r0, #0
 800b582:	4954      	ldr	r1, [pc, #336]	; (800b6d4 <__ieee754_pow+0x23c>)
 800b584:	f7f5 f8d2 	bl	800072c <__aeabi_ddiv>
 800b588:	e7a3      	b.n	800b4d2 <__ieee754_pow+0x3a>
 800b58a:	2300      	movs	r3, #0
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	2a00      	cmp	r2, #0
 800b590:	d13c      	bne.n	800b60c <__ieee754_pow+0x174>
 800b592:	4b4e      	ldr	r3, [pc, #312]	; (800b6cc <__ieee754_pow+0x234>)
 800b594:	429e      	cmp	r6, r3
 800b596:	d1eb      	bne.n	800b570 <__ieee754_pow+0xd8>
 800b598:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b59c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b5a0:	ea53 030a 	orrs.w	r3, r3, sl
 800b5a4:	f000 8449 	beq.w	800be3a <__ieee754_pow+0x9a2>
 800b5a8:	4b4b      	ldr	r3, [pc, #300]	; (800b6d8 <__ieee754_pow+0x240>)
 800b5aa:	429c      	cmp	r4, r3
 800b5ac:	dd0b      	ble.n	800b5c6 <__ieee754_pow+0x12e>
 800b5ae:	2f00      	cmp	r7, #0
 800b5b0:	f2c0 8449 	blt.w	800be46 <__ieee754_pow+0x9ae>
 800b5b4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800b5b8:	4658      	mov	r0, fp
 800b5ba:	4661      	mov	r1, ip
 800b5bc:	b013      	add	sp, #76	; 0x4c
 800b5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	e7e2      	b.n	800b58c <__ieee754_pow+0xf4>
 800b5c6:	2f00      	cmp	r7, #0
 800b5c8:	f04f 0b00 	mov.w	fp, #0
 800b5cc:	f04f 0c00 	mov.w	ip, #0
 800b5d0:	daf2      	bge.n	800b5b8 <__ieee754_pow+0x120>
 800b5d2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b5d6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b5da:	e7ed      	b.n	800b5b8 <__ieee754_pow+0x120>
 800b5dc:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b5e0:	d106      	bne.n	800b5f0 <__ieee754_pow+0x158>
 800b5e2:	4642      	mov	r2, r8
 800b5e4:	464b      	mov	r3, r9
 800b5e6:	4640      	mov	r0, r8
 800b5e8:	4649      	mov	r1, r9
 800b5ea:	f7f4 ff75 	bl	80004d8 <__aeabi_dmul>
 800b5ee:	e770      	b.n	800b4d2 <__ieee754_pow+0x3a>
 800b5f0:	4b3a      	ldr	r3, [pc, #232]	; (800b6dc <__ieee754_pow+0x244>)
 800b5f2:	429f      	cmp	r7, r3
 800b5f4:	d10a      	bne.n	800b60c <__ieee754_pow+0x174>
 800b5f6:	2d00      	cmp	r5, #0
 800b5f8:	db08      	blt.n	800b60c <__ieee754_pow+0x174>
 800b5fa:	4640      	mov	r0, r8
 800b5fc:	4649      	mov	r1, r9
 800b5fe:	b013      	add	sp, #76	; 0x4c
 800b600:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b604:	f000 bd0a 	b.w	800c01c <__ieee754_sqrt>
 800b608:	2300      	movs	r3, #0
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	4640      	mov	r0, r8
 800b60e:	4649      	mov	r1, r9
 800b610:	f000 fc58 	bl	800bec4 <fabs>
 800b614:	4683      	mov	fp, r0
 800b616:	468c      	mov	ip, r1
 800b618:	f1ba 0f00 	cmp.w	sl, #0
 800b61c:	d128      	bne.n	800b670 <__ieee754_pow+0x1d8>
 800b61e:	b124      	cbz	r4, 800b62a <__ieee754_pow+0x192>
 800b620:	4b2c      	ldr	r3, [pc, #176]	; (800b6d4 <__ieee754_pow+0x23c>)
 800b622:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b626:	429a      	cmp	r2, r3
 800b628:	d122      	bne.n	800b670 <__ieee754_pow+0x1d8>
 800b62a:	2f00      	cmp	r7, #0
 800b62c:	da07      	bge.n	800b63e <__ieee754_pow+0x1a6>
 800b62e:	465a      	mov	r2, fp
 800b630:	4663      	mov	r3, ip
 800b632:	2000      	movs	r0, #0
 800b634:	4927      	ldr	r1, [pc, #156]	; (800b6d4 <__ieee754_pow+0x23c>)
 800b636:	f7f5 f879 	bl	800072c <__aeabi_ddiv>
 800b63a:	4683      	mov	fp, r0
 800b63c:	468c      	mov	ip, r1
 800b63e:	2d00      	cmp	r5, #0
 800b640:	daba      	bge.n	800b5b8 <__ieee754_pow+0x120>
 800b642:	9b00      	ldr	r3, [sp, #0]
 800b644:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b648:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b64c:	431c      	orrs	r4, r3
 800b64e:	d108      	bne.n	800b662 <__ieee754_pow+0x1ca>
 800b650:	465a      	mov	r2, fp
 800b652:	4663      	mov	r3, ip
 800b654:	4658      	mov	r0, fp
 800b656:	4661      	mov	r1, ip
 800b658:	f7f4 fd86 	bl	8000168 <__aeabi_dsub>
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	e790      	b.n	800b584 <__ieee754_pow+0xec>
 800b662:	9b00      	ldr	r3, [sp, #0]
 800b664:	2b01      	cmp	r3, #1
 800b666:	d1a7      	bne.n	800b5b8 <__ieee754_pow+0x120>
 800b668:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b66c:	469c      	mov	ip, r3
 800b66e:	e7a3      	b.n	800b5b8 <__ieee754_pow+0x120>
 800b670:	0feb      	lsrs	r3, r5, #31
 800b672:	3b01      	subs	r3, #1
 800b674:	930c      	str	r3, [sp, #48]	; 0x30
 800b676:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b678:	9b00      	ldr	r3, [sp, #0]
 800b67a:	4313      	orrs	r3, r2
 800b67c:	d104      	bne.n	800b688 <__ieee754_pow+0x1f0>
 800b67e:	4642      	mov	r2, r8
 800b680:	464b      	mov	r3, r9
 800b682:	4640      	mov	r0, r8
 800b684:	4649      	mov	r1, r9
 800b686:	e7e7      	b.n	800b658 <__ieee754_pow+0x1c0>
 800b688:	4b15      	ldr	r3, [pc, #84]	; (800b6e0 <__ieee754_pow+0x248>)
 800b68a:	429e      	cmp	r6, r3
 800b68c:	f340 80f6 	ble.w	800b87c <__ieee754_pow+0x3e4>
 800b690:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b694:	429e      	cmp	r6, r3
 800b696:	4b10      	ldr	r3, [pc, #64]	; (800b6d8 <__ieee754_pow+0x240>)
 800b698:	dd09      	ble.n	800b6ae <__ieee754_pow+0x216>
 800b69a:	429c      	cmp	r4, r3
 800b69c:	dc0c      	bgt.n	800b6b8 <__ieee754_pow+0x220>
 800b69e:	2f00      	cmp	r7, #0
 800b6a0:	da0c      	bge.n	800b6bc <__ieee754_pow+0x224>
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	b013      	add	sp, #76	; 0x4c
 800b6a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6aa:	f000 bcb2 	b.w	800c012 <__math_oflow>
 800b6ae:	429c      	cmp	r4, r3
 800b6b0:	dbf5      	blt.n	800b69e <__ieee754_pow+0x206>
 800b6b2:	4b08      	ldr	r3, [pc, #32]	; (800b6d4 <__ieee754_pow+0x23c>)
 800b6b4:	429c      	cmp	r4, r3
 800b6b6:	dd15      	ble.n	800b6e4 <__ieee754_pow+0x24c>
 800b6b8:	2f00      	cmp	r7, #0
 800b6ba:	dcf2      	bgt.n	800b6a2 <__ieee754_pow+0x20a>
 800b6bc:	2000      	movs	r0, #0
 800b6be:	b013      	add	sp, #76	; 0x4c
 800b6c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c4:	f000 bca0 	b.w	800c008 <__math_uflow>
 800b6c8:	fff00000 	.word	0xfff00000
 800b6cc:	7ff00000 	.word	0x7ff00000
 800b6d0:	433fffff 	.word	0x433fffff
 800b6d4:	3ff00000 	.word	0x3ff00000
 800b6d8:	3fefffff 	.word	0x3fefffff
 800b6dc:	3fe00000 	.word	0x3fe00000
 800b6e0:	41e00000 	.word	0x41e00000
 800b6e4:	4661      	mov	r1, ip
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	4658      	mov	r0, fp
 800b6ea:	4b5f      	ldr	r3, [pc, #380]	; (800b868 <__ieee754_pow+0x3d0>)
 800b6ec:	f7f4 fd3c 	bl	8000168 <__aeabi_dsub>
 800b6f0:	a355      	add	r3, pc, #340	; (adr r3, 800b848 <__ieee754_pow+0x3b0>)
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	460d      	mov	r5, r1
 800b6fa:	f7f4 feed 	bl	80004d8 <__aeabi_dmul>
 800b6fe:	a354      	add	r3, pc, #336	; (adr r3, 800b850 <__ieee754_pow+0x3b8>)
 800b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b704:	4606      	mov	r6, r0
 800b706:	460f      	mov	r7, r1
 800b708:	4620      	mov	r0, r4
 800b70a:	4629      	mov	r1, r5
 800b70c:	f7f4 fee4 	bl	80004d8 <__aeabi_dmul>
 800b710:	2200      	movs	r2, #0
 800b712:	4682      	mov	sl, r0
 800b714:	468b      	mov	fp, r1
 800b716:	4620      	mov	r0, r4
 800b718:	4629      	mov	r1, r5
 800b71a:	4b54      	ldr	r3, [pc, #336]	; (800b86c <__ieee754_pow+0x3d4>)
 800b71c:	f7f4 fedc 	bl	80004d8 <__aeabi_dmul>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	a14c      	add	r1, pc, #304	; (adr r1, 800b858 <__ieee754_pow+0x3c0>)
 800b726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b72a:	f7f4 fd1d 	bl	8000168 <__aeabi_dsub>
 800b72e:	4622      	mov	r2, r4
 800b730:	462b      	mov	r3, r5
 800b732:	f7f4 fed1 	bl	80004d8 <__aeabi_dmul>
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	2000      	movs	r0, #0
 800b73c:	494c      	ldr	r1, [pc, #304]	; (800b870 <__ieee754_pow+0x3d8>)
 800b73e:	f7f4 fd13 	bl	8000168 <__aeabi_dsub>
 800b742:	4622      	mov	r2, r4
 800b744:	462b      	mov	r3, r5
 800b746:	4680      	mov	r8, r0
 800b748:	4689      	mov	r9, r1
 800b74a:	4620      	mov	r0, r4
 800b74c:	4629      	mov	r1, r5
 800b74e:	f7f4 fec3 	bl	80004d8 <__aeabi_dmul>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4640      	mov	r0, r8
 800b758:	4649      	mov	r1, r9
 800b75a:	f7f4 febd 	bl	80004d8 <__aeabi_dmul>
 800b75e:	a340      	add	r3, pc, #256	; (adr r3, 800b860 <__ieee754_pow+0x3c8>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f7f4 feb8 	bl	80004d8 <__aeabi_dmul>
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	4650      	mov	r0, sl
 800b76e:	4659      	mov	r1, fp
 800b770:	f7f4 fcfa 	bl	8000168 <__aeabi_dsub>
 800b774:	4602      	mov	r2, r0
 800b776:	460b      	mov	r3, r1
 800b778:	4604      	mov	r4, r0
 800b77a:	460d      	mov	r5, r1
 800b77c:	4630      	mov	r0, r6
 800b77e:	4639      	mov	r1, r7
 800b780:	f7f4 fcf4 	bl	800016c <__adddf3>
 800b784:	2000      	movs	r0, #0
 800b786:	4632      	mov	r2, r6
 800b788:	463b      	mov	r3, r7
 800b78a:	4682      	mov	sl, r0
 800b78c:	468b      	mov	fp, r1
 800b78e:	f7f4 fceb 	bl	8000168 <__aeabi_dsub>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	4620      	mov	r0, r4
 800b798:	4629      	mov	r1, r5
 800b79a:	f7f4 fce5 	bl	8000168 <__aeabi_dsub>
 800b79e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b7a2:	9b00      	ldr	r3, [sp, #0]
 800b7a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	f04f 0600 	mov.w	r6, #0
 800b7ae:	f04f 0200 	mov.w	r2, #0
 800b7b2:	bf0c      	ite	eq
 800b7b4:	4b2f      	ldreq	r3, [pc, #188]	; (800b874 <__ieee754_pow+0x3dc>)
 800b7b6:	4b2c      	ldrne	r3, [pc, #176]	; (800b868 <__ieee754_pow+0x3d0>)
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7c0:	e9cd 2300 	strd	r2, r3, [sp]
 800b7c4:	4632      	mov	r2, r6
 800b7c6:	463b      	mov	r3, r7
 800b7c8:	f7f4 fcce 	bl	8000168 <__aeabi_dsub>
 800b7cc:	4652      	mov	r2, sl
 800b7ce:	465b      	mov	r3, fp
 800b7d0:	f7f4 fe82 	bl	80004d8 <__aeabi_dmul>
 800b7d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7d8:	4680      	mov	r8, r0
 800b7da:	4689      	mov	r9, r1
 800b7dc:	4620      	mov	r0, r4
 800b7de:	4629      	mov	r1, r5
 800b7e0:	f7f4 fe7a 	bl	80004d8 <__aeabi_dmul>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	4649      	mov	r1, r9
 800b7ec:	f7f4 fcbe 	bl	800016c <__adddf3>
 800b7f0:	4632      	mov	r2, r6
 800b7f2:	463b      	mov	r3, r7
 800b7f4:	4680      	mov	r8, r0
 800b7f6:	4689      	mov	r9, r1
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	4659      	mov	r1, fp
 800b7fc:	f7f4 fe6c 	bl	80004d8 <__aeabi_dmul>
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	460b      	mov	r3, r1
 800b806:	4602      	mov	r2, r0
 800b808:	4649      	mov	r1, r9
 800b80a:	4640      	mov	r0, r8
 800b80c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b810:	f7f4 fcac 	bl	800016c <__adddf3>
 800b814:	4b18      	ldr	r3, [pc, #96]	; (800b878 <__ieee754_pow+0x3e0>)
 800b816:	4682      	mov	sl, r0
 800b818:	4299      	cmp	r1, r3
 800b81a:	460f      	mov	r7, r1
 800b81c:	460e      	mov	r6, r1
 800b81e:	f340 82e7 	ble.w	800bdf0 <__ieee754_pow+0x958>
 800b822:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b826:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b82a:	4303      	orrs	r3, r0
 800b82c:	f000 81e2 	beq.w	800bbf4 <__ieee754_pow+0x75c>
 800b830:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b834:	2200      	movs	r2, #0
 800b836:	2300      	movs	r3, #0
 800b838:	f7f5 f8c0 	bl	80009bc <__aeabi_dcmplt>
 800b83c:	3800      	subs	r0, #0
 800b83e:	bf18      	it	ne
 800b840:	2001      	movne	r0, #1
 800b842:	e72f      	b.n	800b6a4 <__ieee754_pow+0x20c>
 800b844:	f3af 8000 	nop.w
 800b848:	60000000 	.word	0x60000000
 800b84c:	3ff71547 	.word	0x3ff71547
 800b850:	f85ddf44 	.word	0xf85ddf44
 800b854:	3e54ae0b 	.word	0x3e54ae0b
 800b858:	55555555 	.word	0x55555555
 800b85c:	3fd55555 	.word	0x3fd55555
 800b860:	652b82fe 	.word	0x652b82fe
 800b864:	3ff71547 	.word	0x3ff71547
 800b868:	3ff00000 	.word	0x3ff00000
 800b86c:	3fd00000 	.word	0x3fd00000
 800b870:	3fe00000 	.word	0x3fe00000
 800b874:	bff00000 	.word	0xbff00000
 800b878:	408fffff 	.word	0x408fffff
 800b87c:	4bd4      	ldr	r3, [pc, #848]	; (800bbd0 <__ieee754_pow+0x738>)
 800b87e:	2200      	movs	r2, #0
 800b880:	402b      	ands	r3, r5
 800b882:	b943      	cbnz	r3, 800b896 <__ieee754_pow+0x3fe>
 800b884:	4658      	mov	r0, fp
 800b886:	4661      	mov	r1, ip
 800b888:	4bd2      	ldr	r3, [pc, #840]	; (800bbd4 <__ieee754_pow+0x73c>)
 800b88a:	f7f4 fe25 	bl	80004d8 <__aeabi_dmul>
 800b88e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b892:	4683      	mov	fp, r0
 800b894:	460c      	mov	r4, r1
 800b896:	1523      	asrs	r3, r4, #20
 800b898:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b89c:	4413      	add	r3, r2
 800b89e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8a0:	4bcd      	ldr	r3, [pc, #820]	; (800bbd8 <__ieee754_pow+0x740>)
 800b8a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b8a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b8aa:	429c      	cmp	r4, r3
 800b8ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b8b0:	dd08      	ble.n	800b8c4 <__ieee754_pow+0x42c>
 800b8b2:	4bca      	ldr	r3, [pc, #808]	; (800bbdc <__ieee754_pow+0x744>)
 800b8b4:	429c      	cmp	r4, r3
 800b8b6:	f340 8164 	ble.w	800bb82 <__ieee754_pow+0x6ea>
 800b8ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8bc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8c4:	2600      	movs	r6, #0
 800b8c6:	00f3      	lsls	r3, r6, #3
 800b8c8:	930d      	str	r3, [sp, #52]	; 0x34
 800b8ca:	4bc5      	ldr	r3, [pc, #788]	; (800bbe0 <__ieee754_pow+0x748>)
 800b8cc:	4658      	mov	r0, fp
 800b8ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b8d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	461a      	mov	r2, r3
 800b8da:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b8de:	4623      	mov	r3, r4
 800b8e0:	f7f4 fc42 	bl	8000168 <__aeabi_dsub>
 800b8e4:	46da      	mov	sl, fp
 800b8e6:	462b      	mov	r3, r5
 800b8e8:	4652      	mov	r2, sl
 800b8ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b8ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8f2:	f7f4 fc3b 	bl	800016c <__adddf3>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	49b9      	ldr	r1, [pc, #740]	; (800bbe4 <__ieee754_pow+0x74c>)
 800b8fe:	f7f4 ff15 	bl	800072c <__aeabi_ddiv>
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b90a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b90e:	f7f4 fde3 	bl	80004d8 <__aeabi_dmul>
 800b912:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b916:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b91a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b91e:	2300      	movs	r3, #0
 800b920:	2200      	movs	r2, #0
 800b922:	46ab      	mov	fp, r5
 800b924:	106d      	asrs	r5, r5, #1
 800b926:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b92a:	9304      	str	r3, [sp, #16]
 800b92c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b930:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b934:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b938:	4640      	mov	r0, r8
 800b93a:	4649      	mov	r1, r9
 800b93c:	4614      	mov	r4, r2
 800b93e:	461d      	mov	r5, r3
 800b940:	f7f4 fdca 	bl	80004d8 <__aeabi_dmul>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b94c:	f7f4 fc0c 	bl	8000168 <__aeabi_dsub>
 800b950:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b954:	4606      	mov	r6, r0
 800b956:	460f      	mov	r7, r1
 800b958:	4620      	mov	r0, r4
 800b95a:	4629      	mov	r1, r5
 800b95c:	f7f4 fc04 	bl	8000168 <__aeabi_dsub>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4650      	mov	r0, sl
 800b966:	4659      	mov	r1, fp
 800b968:	f7f4 fbfe 	bl	8000168 <__aeabi_dsub>
 800b96c:	4642      	mov	r2, r8
 800b96e:	464b      	mov	r3, r9
 800b970:	f7f4 fdb2 	bl	80004d8 <__aeabi_dmul>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	4630      	mov	r0, r6
 800b97a:	4639      	mov	r1, r7
 800b97c:	f7f4 fbf4 	bl	8000168 <__aeabi_dsub>
 800b980:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b984:	f7f4 fda8 	bl	80004d8 <__aeabi_dmul>
 800b988:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b98c:	4682      	mov	sl, r0
 800b98e:	468b      	mov	fp, r1
 800b990:	4610      	mov	r0, r2
 800b992:	4619      	mov	r1, r3
 800b994:	f7f4 fda0 	bl	80004d8 <__aeabi_dmul>
 800b998:	a37b      	add	r3, pc, #492	; (adr r3, 800bb88 <__ieee754_pow+0x6f0>)
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	4604      	mov	r4, r0
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	f7f4 fd99 	bl	80004d8 <__aeabi_dmul>
 800b9a6:	a37a      	add	r3, pc, #488	; (adr r3, 800bb90 <__ieee754_pow+0x6f8>)
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	f7f4 fbde 	bl	800016c <__adddf3>
 800b9b0:	4622      	mov	r2, r4
 800b9b2:	462b      	mov	r3, r5
 800b9b4:	f7f4 fd90 	bl	80004d8 <__aeabi_dmul>
 800b9b8:	a377      	add	r3, pc, #476	; (adr r3, 800bb98 <__ieee754_pow+0x700>)
 800b9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9be:	f7f4 fbd5 	bl	800016c <__adddf3>
 800b9c2:	4622      	mov	r2, r4
 800b9c4:	462b      	mov	r3, r5
 800b9c6:	f7f4 fd87 	bl	80004d8 <__aeabi_dmul>
 800b9ca:	a375      	add	r3, pc, #468	; (adr r3, 800bba0 <__ieee754_pow+0x708>)
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f7f4 fbcc 	bl	800016c <__adddf3>
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	462b      	mov	r3, r5
 800b9d8:	f7f4 fd7e 	bl	80004d8 <__aeabi_dmul>
 800b9dc:	a372      	add	r3, pc, #456	; (adr r3, 800bba8 <__ieee754_pow+0x710>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f7f4 fbc3 	bl	800016c <__adddf3>
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	462b      	mov	r3, r5
 800b9ea:	f7f4 fd75 	bl	80004d8 <__aeabi_dmul>
 800b9ee:	a370      	add	r3, pc, #448	; (adr r3, 800bbb0 <__ieee754_pow+0x718>)
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f7f4 fbba 	bl	800016c <__adddf3>
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	462b      	mov	r3, r5
 800ba00:	4620      	mov	r0, r4
 800ba02:	4629      	mov	r1, r5
 800ba04:	f7f4 fd68 	bl	80004d8 <__aeabi_dmul>
 800ba08:	4602      	mov	r2, r0
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	4639      	mov	r1, r7
 800ba10:	f7f4 fd62 	bl	80004d8 <__aeabi_dmul>
 800ba14:	4604      	mov	r4, r0
 800ba16:	460d      	mov	r5, r1
 800ba18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba1c:	4642      	mov	r2, r8
 800ba1e:	464b      	mov	r3, r9
 800ba20:	f7f4 fba4 	bl	800016c <__adddf3>
 800ba24:	4652      	mov	r2, sl
 800ba26:	465b      	mov	r3, fp
 800ba28:	f7f4 fd56 	bl	80004d8 <__aeabi_dmul>
 800ba2c:	4622      	mov	r2, r4
 800ba2e:	462b      	mov	r3, r5
 800ba30:	f7f4 fb9c 	bl	800016c <__adddf3>
 800ba34:	4642      	mov	r2, r8
 800ba36:	4606      	mov	r6, r0
 800ba38:	460f      	mov	r7, r1
 800ba3a:	464b      	mov	r3, r9
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	4649      	mov	r1, r9
 800ba40:	f7f4 fd4a 	bl	80004d8 <__aeabi_dmul>
 800ba44:	4602      	mov	r2, r0
 800ba46:	460b      	mov	r3, r1
 800ba48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	4b66      	ldr	r3, [pc, #408]	; (800bbe8 <__ieee754_pow+0x750>)
 800ba50:	f7f4 fb8c 	bl	800016c <__adddf3>
 800ba54:	4632      	mov	r2, r6
 800ba56:	463b      	mov	r3, r7
 800ba58:	f7f4 fb88 	bl	800016c <__adddf3>
 800ba5c:	2400      	movs	r4, #0
 800ba5e:	460d      	mov	r5, r1
 800ba60:	4622      	mov	r2, r4
 800ba62:	460b      	mov	r3, r1
 800ba64:	4640      	mov	r0, r8
 800ba66:	4649      	mov	r1, r9
 800ba68:	f7f4 fd36 	bl	80004d8 <__aeabi_dmul>
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	4680      	mov	r8, r0
 800ba70:	4689      	mov	r9, r1
 800ba72:	4620      	mov	r0, r4
 800ba74:	4629      	mov	r1, r5
 800ba76:	4b5c      	ldr	r3, [pc, #368]	; (800bbe8 <__ieee754_pow+0x750>)
 800ba78:	f7f4 fb76 	bl	8000168 <__aeabi_dsub>
 800ba7c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba80:	f7f4 fb72 	bl	8000168 <__aeabi_dsub>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	4630      	mov	r0, r6
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f7f4 fb6c 	bl	8000168 <__aeabi_dsub>
 800ba90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba94:	f7f4 fd20 	bl	80004d8 <__aeabi_dmul>
 800ba98:	4622      	mov	r2, r4
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	460f      	mov	r7, r1
 800ba9e:	462b      	mov	r3, r5
 800baa0:	4650      	mov	r0, sl
 800baa2:	4659      	mov	r1, fp
 800baa4:	f7f4 fd18 	bl	80004d8 <__aeabi_dmul>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	4630      	mov	r0, r6
 800baae:	4639      	mov	r1, r7
 800bab0:	f7f4 fb5c 	bl	800016c <__adddf3>
 800bab4:	2400      	movs	r4, #0
 800bab6:	4606      	mov	r6, r0
 800bab8:	460f      	mov	r7, r1
 800baba:	4602      	mov	r2, r0
 800babc:	460b      	mov	r3, r1
 800babe:	4640      	mov	r0, r8
 800bac0:	4649      	mov	r1, r9
 800bac2:	f7f4 fb53 	bl	800016c <__adddf3>
 800bac6:	a33c      	add	r3, pc, #240	; (adr r3, 800bbb8 <__ieee754_pow+0x720>)
 800bac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bacc:	4620      	mov	r0, r4
 800bace:	460d      	mov	r5, r1
 800bad0:	f7f4 fd02 	bl	80004d8 <__aeabi_dmul>
 800bad4:	4642      	mov	r2, r8
 800bad6:	464b      	mov	r3, r9
 800bad8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800badc:	4620      	mov	r0, r4
 800bade:	4629      	mov	r1, r5
 800bae0:	f7f4 fb42 	bl	8000168 <__aeabi_dsub>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4630      	mov	r0, r6
 800baea:	4639      	mov	r1, r7
 800baec:	f7f4 fb3c 	bl	8000168 <__aeabi_dsub>
 800baf0:	a333      	add	r3, pc, #204	; (adr r3, 800bbc0 <__ieee754_pow+0x728>)
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	f7f4 fcef 	bl	80004d8 <__aeabi_dmul>
 800bafa:	a333      	add	r3, pc, #204	; (adr r3, 800bbc8 <__ieee754_pow+0x730>)
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	4606      	mov	r6, r0
 800bb02:	460f      	mov	r7, r1
 800bb04:	4620      	mov	r0, r4
 800bb06:	4629      	mov	r1, r5
 800bb08:	f7f4 fce6 	bl	80004d8 <__aeabi_dmul>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4630      	mov	r0, r6
 800bb12:	4639      	mov	r1, r7
 800bb14:	f7f4 fb2a 	bl	800016c <__adddf3>
 800bb18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb1a:	4b34      	ldr	r3, [pc, #208]	; (800bbec <__ieee754_pow+0x754>)
 800bb1c:	4413      	add	r3, r2
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	f7f4 fb23 	bl	800016c <__adddf3>
 800bb26:	4680      	mov	r8, r0
 800bb28:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800bb2a:	4689      	mov	r9, r1
 800bb2c:	f7f4 fc6a 	bl	8000404 <__aeabi_i2d>
 800bb30:	4604      	mov	r4, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb3a:	4b2d      	ldr	r3, [pc, #180]	; (800bbf0 <__ieee754_pow+0x758>)
 800bb3c:	4413      	add	r3, r2
 800bb3e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bb42:	4642      	mov	r2, r8
 800bb44:	464b      	mov	r3, r9
 800bb46:	f7f4 fb11 	bl	800016c <__adddf3>
 800bb4a:	4632      	mov	r2, r6
 800bb4c:	463b      	mov	r3, r7
 800bb4e:	f7f4 fb0d 	bl	800016c <__adddf3>
 800bb52:	4622      	mov	r2, r4
 800bb54:	462b      	mov	r3, r5
 800bb56:	f7f4 fb09 	bl	800016c <__adddf3>
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	4622      	mov	r2, r4
 800bb5e:	462b      	mov	r3, r5
 800bb60:	4682      	mov	sl, r0
 800bb62:	468b      	mov	fp, r1
 800bb64:	f7f4 fb00 	bl	8000168 <__aeabi_dsub>
 800bb68:	4632      	mov	r2, r6
 800bb6a:	463b      	mov	r3, r7
 800bb6c:	f7f4 fafc 	bl	8000168 <__aeabi_dsub>
 800bb70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb74:	f7f4 faf8 	bl	8000168 <__aeabi_dsub>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	4649      	mov	r1, r9
 800bb80:	e60b      	b.n	800b79a <__ieee754_pow+0x302>
 800bb82:	2601      	movs	r6, #1
 800bb84:	e69f      	b.n	800b8c6 <__ieee754_pow+0x42e>
 800bb86:	bf00      	nop
 800bb88:	4a454eef 	.word	0x4a454eef
 800bb8c:	3fca7e28 	.word	0x3fca7e28
 800bb90:	93c9db65 	.word	0x93c9db65
 800bb94:	3fcd864a 	.word	0x3fcd864a
 800bb98:	a91d4101 	.word	0xa91d4101
 800bb9c:	3fd17460 	.word	0x3fd17460
 800bba0:	518f264d 	.word	0x518f264d
 800bba4:	3fd55555 	.word	0x3fd55555
 800bba8:	db6fabff 	.word	0xdb6fabff
 800bbac:	3fdb6db6 	.word	0x3fdb6db6
 800bbb0:	33333303 	.word	0x33333303
 800bbb4:	3fe33333 	.word	0x3fe33333
 800bbb8:	e0000000 	.word	0xe0000000
 800bbbc:	3feec709 	.word	0x3feec709
 800bbc0:	dc3a03fd 	.word	0xdc3a03fd
 800bbc4:	3feec709 	.word	0x3feec709
 800bbc8:	145b01f5 	.word	0x145b01f5
 800bbcc:	be3e2fe0 	.word	0xbe3e2fe0
 800bbd0:	7ff00000 	.word	0x7ff00000
 800bbd4:	43400000 	.word	0x43400000
 800bbd8:	0003988e 	.word	0x0003988e
 800bbdc:	000bb679 	.word	0x000bb679
 800bbe0:	0800d180 	.word	0x0800d180
 800bbe4:	3ff00000 	.word	0x3ff00000
 800bbe8:	40080000 	.word	0x40080000
 800bbec:	0800d1a0 	.word	0x0800d1a0
 800bbf0:	0800d190 	.word	0x0800d190
 800bbf4:	a39c      	add	r3, pc, #624	; (adr r3, 800be68 <__ieee754_pow+0x9d0>)
 800bbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	4649      	mov	r1, r9
 800bbfe:	f7f4 fab5 	bl	800016c <__adddf3>
 800bc02:	4622      	mov	r2, r4
 800bc04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc08:	462b      	mov	r3, r5
 800bc0a:	4650      	mov	r0, sl
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	f7f4 faab 	bl	8000168 <__aeabi_dsub>
 800bc12:	4602      	mov	r2, r0
 800bc14:	460b      	mov	r3, r1
 800bc16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc1a:	f7f4 feed 	bl	80009f8 <__aeabi_dcmpgt>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	f47f ae06 	bne.w	800b830 <__ieee754_pow+0x398>
 800bc24:	4aa2      	ldr	r2, [pc, #648]	; (800beb0 <__ieee754_pow+0xa18>)
 800bc26:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	f340 8100 	ble.w	800be30 <__ieee754_pow+0x998>
 800bc30:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bc34:	151b      	asrs	r3, r3, #20
 800bc36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bc3a:	fa4a fa03 	asr.w	sl, sl, r3
 800bc3e:	44b2      	add	sl, r6
 800bc40:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bc44:	489b      	ldr	r0, [pc, #620]	; (800beb4 <__ieee754_pow+0xa1c>)
 800bc46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bc4a:	4108      	asrs	r0, r1
 800bc4c:	ea00 030a 	and.w	r3, r0, sl
 800bc50:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bc54:	f1c1 0114 	rsb	r1, r1, #20
 800bc58:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bc5c:	fa4a fa01 	asr.w	sl, sl, r1
 800bc60:	2e00      	cmp	r6, #0
 800bc62:	f04f 0200 	mov.w	r2, #0
 800bc66:	4620      	mov	r0, r4
 800bc68:	4629      	mov	r1, r5
 800bc6a:	bfb8      	it	lt
 800bc6c:	f1ca 0a00 	rsblt	sl, sl, #0
 800bc70:	f7f4 fa7a 	bl	8000168 <__aeabi_dsub>
 800bc74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7c:	2400      	movs	r4, #0
 800bc7e:	4642      	mov	r2, r8
 800bc80:	464b      	mov	r3, r9
 800bc82:	f7f4 fa73 	bl	800016c <__adddf3>
 800bc86:	a37a      	add	r3, pc, #488	; (adr r3, 800be70 <__ieee754_pow+0x9d8>)
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	460d      	mov	r5, r1
 800bc90:	f7f4 fc22 	bl	80004d8 <__aeabi_dmul>
 800bc94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc98:	4606      	mov	r6, r0
 800bc9a:	460f      	mov	r7, r1
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	4629      	mov	r1, r5
 800bca0:	f7f4 fa62 	bl	8000168 <__aeabi_dsub>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4640      	mov	r0, r8
 800bcaa:	4649      	mov	r1, r9
 800bcac:	f7f4 fa5c 	bl	8000168 <__aeabi_dsub>
 800bcb0:	a371      	add	r3, pc, #452	; (adr r3, 800be78 <__ieee754_pow+0x9e0>)
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	f7f4 fc0f 	bl	80004d8 <__aeabi_dmul>
 800bcba:	a371      	add	r3, pc, #452	; (adr r3, 800be80 <__ieee754_pow+0x9e8>)
 800bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc0:	4680      	mov	r8, r0
 800bcc2:	4689      	mov	r9, r1
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	4629      	mov	r1, r5
 800bcc8:	f7f4 fc06 	bl	80004d8 <__aeabi_dmul>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4640      	mov	r0, r8
 800bcd2:	4649      	mov	r1, r9
 800bcd4:	f7f4 fa4a 	bl	800016c <__adddf3>
 800bcd8:	4604      	mov	r4, r0
 800bcda:	460d      	mov	r5, r1
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4630      	mov	r0, r6
 800bce2:	4639      	mov	r1, r7
 800bce4:	f7f4 fa42 	bl	800016c <__adddf3>
 800bce8:	4632      	mov	r2, r6
 800bcea:	463b      	mov	r3, r7
 800bcec:	4680      	mov	r8, r0
 800bcee:	4689      	mov	r9, r1
 800bcf0:	f7f4 fa3a 	bl	8000168 <__aeabi_dsub>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	f7f4 fa34 	bl	8000168 <__aeabi_dsub>
 800bd00:	4642      	mov	r2, r8
 800bd02:	4606      	mov	r6, r0
 800bd04:	460f      	mov	r7, r1
 800bd06:	464b      	mov	r3, r9
 800bd08:	4640      	mov	r0, r8
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	f7f4 fbe4 	bl	80004d8 <__aeabi_dmul>
 800bd10:	a35d      	add	r3, pc, #372	; (adr r3, 800be88 <__ieee754_pow+0x9f0>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	4604      	mov	r4, r0
 800bd18:	460d      	mov	r5, r1
 800bd1a:	f7f4 fbdd 	bl	80004d8 <__aeabi_dmul>
 800bd1e:	a35c      	add	r3, pc, #368	; (adr r3, 800be90 <__ieee754_pow+0x9f8>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	f7f4 fa20 	bl	8000168 <__aeabi_dsub>
 800bd28:	4622      	mov	r2, r4
 800bd2a:	462b      	mov	r3, r5
 800bd2c:	f7f4 fbd4 	bl	80004d8 <__aeabi_dmul>
 800bd30:	a359      	add	r3, pc, #356	; (adr r3, 800be98 <__ieee754_pow+0xa00>)
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	f7f4 fa19 	bl	800016c <__adddf3>
 800bd3a:	4622      	mov	r2, r4
 800bd3c:	462b      	mov	r3, r5
 800bd3e:	f7f4 fbcb 	bl	80004d8 <__aeabi_dmul>
 800bd42:	a357      	add	r3, pc, #348	; (adr r3, 800bea0 <__ieee754_pow+0xa08>)
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	f7f4 fa0e 	bl	8000168 <__aeabi_dsub>
 800bd4c:	4622      	mov	r2, r4
 800bd4e:	462b      	mov	r3, r5
 800bd50:	f7f4 fbc2 	bl	80004d8 <__aeabi_dmul>
 800bd54:	a354      	add	r3, pc, #336	; (adr r3, 800bea8 <__ieee754_pow+0xa10>)
 800bd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5a:	f7f4 fa07 	bl	800016c <__adddf3>
 800bd5e:	4622      	mov	r2, r4
 800bd60:	462b      	mov	r3, r5
 800bd62:	f7f4 fbb9 	bl	80004d8 <__aeabi_dmul>
 800bd66:	4602      	mov	r2, r0
 800bd68:	460b      	mov	r3, r1
 800bd6a:	4640      	mov	r0, r8
 800bd6c:	4649      	mov	r1, r9
 800bd6e:	f7f4 f9fb 	bl	8000168 <__aeabi_dsub>
 800bd72:	4604      	mov	r4, r0
 800bd74:	460d      	mov	r5, r1
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	f7f4 fbab 	bl	80004d8 <__aeabi_dmul>
 800bd82:	2200      	movs	r2, #0
 800bd84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	4629      	mov	r1, r5
 800bd90:	f7f4 f9ea 	bl	8000168 <__aeabi_dsub>
 800bd94:	4602      	mov	r2, r0
 800bd96:	460b      	mov	r3, r1
 800bd98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd9c:	f7f4 fcc6 	bl	800072c <__aeabi_ddiv>
 800bda0:	4632      	mov	r2, r6
 800bda2:	4604      	mov	r4, r0
 800bda4:	460d      	mov	r5, r1
 800bda6:	463b      	mov	r3, r7
 800bda8:	4640      	mov	r0, r8
 800bdaa:	4649      	mov	r1, r9
 800bdac:	f7f4 fb94 	bl	80004d8 <__aeabi_dmul>
 800bdb0:	4632      	mov	r2, r6
 800bdb2:	463b      	mov	r3, r7
 800bdb4:	f7f4 f9da 	bl	800016c <__adddf3>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	4629      	mov	r1, r5
 800bdc0:	f7f4 f9d2 	bl	8000168 <__aeabi_dsub>
 800bdc4:	4642      	mov	r2, r8
 800bdc6:	464b      	mov	r3, r9
 800bdc8:	f7f4 f9ce 	bl	8000168 <__aeabi_dsub>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	4939      	ldr	r1, [pc, #228]	; (800beb8 <__ieee754_pow+0xa20>)
 800bdd4:	f7f4 f9c8 	bl	8000168 <__aeabi_dsub>
 800bdd8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bddc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bde0:	da29      	bge.n	800be36 <__ieee754_pow+0x99e>
 800bde2:	4652      	mov	r2, sl
 800bde4:	f000 f874 	bl	800bed0 <scalbn>
 800bde8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdec:	f7ff bbfd 	b.w	800b5ea <__ieee754_pow+0x152>
 800bdf0:	4b32      	ldr	r3, [pc, #200]	; (800bebc <__ieee754_pow+0xa24>)
 800bdf2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800bdf6:	429f      	cmp	r7, r3
 800bdf8:	f77f af14 	ble.w	800bc24 <__ieee754_pow+0x78c>
 800bdfc:	4b30      	ldr	r3, [pc, #192]	; (800bec0 <__ieee754_pow+0xa28>)
 800bdfe:	440b      	add	r3, r1
 800be00:	4303      	orrs	r3, r0
 800be02:	d009      	beq.n	800be18 <__ieee754_pow+0x980>
 800be04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be08:	2200      	movs	r2, #0
 800be0a:	2300      	movs	r3, #0
 800be0c:	f7f4 fdd6 	bl	80009bc <__aeabi_dcmplt>
 800be10:	3800      	subs	r0, #0
 800be12:	bf18      	it	ne
 800be14:	2001      	movne	r0, #1
 800be16:	e452      	b.n	800b6be <__ieee754_pow+0x226>
 800be18:	4622      	mov	r2, r4
 800be1a:	462b      	mov	r3, r5
 800be1c:	f7f4 f9a4 	bl	8000168 <__aeabi_dsub>
 800be20:	4642      	mov	r2, r8
 800be22:	464b      	mov	r3, r9
 800be24:	f7f4 fdde 	bl	80009e4 <__aeabi_dcmpge>
 800be28:	2800      	cmp	r0, #0
 800be2a:	f43f aefb 	beq.w	800bc24 <__ieee754_pow+0x78c>
 800be2e:	e7e9      	b.n	800be04 <__ieee754_pow+0x96c>
 800be30:	f04f 0a00 	mov.w	sl, #0
 800be34:	e720      	b.n	800bc78 <__ieee754_pow+0x7e0>
 800be36:	4621      	mov	r1, r4
 800be38:	e7d6      	b.n	800bde8 <__ieee754_pow+0x950>
 800be3a:	f04f 0b00 	mov.w	fp, #0
 800be3e:	f8df c078 	ldr.w	ip, [pc, #120]	; 800beb8 <__ieee754_pow+0xa20>
 800be42:	f7ff bbb9 	b.w	800b5b8 <__ieee754_pow+0x120>
 800be46:	f04f 0b00 	mov.w	fp, #0
 800be4a:	f04f 0c00 	mov.w	ip, #0
 800be4e:	f7ff bbb3 	b.w	800b5b8 <__ieee754_pow+0x120>
 800be52:	4640      	mov	r0, r8
 800be54:	4649      	mov	r1, r9
 800be56:	f7ff bb3c 	b.w	800b4d2 <__ieee754_pow+0x3a>
 800be5a:	9200      	str	r2, [sp, #0]
 800be5c:	f7ff bb88 	b.w	800b570 <__ieee754_pow+0xd8>
 800be60:	2300      	movs	r3, #0
 800be62:	f7ff bb72 	b.w	800b54a <__ieee754_pow+0xb2>
 800be66:	bf00      	nop
 800be68:	652b82fe 	.word	0x652b82fe
 800be6c:	3c971547 	.word	0x3c971547
 800be70:	00000000 	.word	0x00000000
 800be74:	3fe62e43 	.word	0x3fe62e43
 800be78:	fefa39ef 	.word	0xfefa39ef
 800be7c:	3fe62e42 	.word	0x3fe62e42
 800be80:	0ca86c39 	.word	0x0ca86c39
 800be84:	be205c61 	.word	0xbe205c61
 800be88:	72bea4d0 	.word	0x72bea4d0
 800be8c:	3e663769 	.word	0x3e663769
 800be90:	c5d26bf1 	.word	0xc5d26bf1
 800be94:	3ebbbd41 	.word	0x3ebbbd41
 800be98:	af25de2c 	.word	0xaf25de2c
 800be9c:	3f11566a 	.word	0x3f11566a
 800bea0:	16bebd93 	.word	0x16bebd93
 800bea4:	3f66c16c 	.word	0x3f66c16c
 800bea8:	5555553e 	.word	0x5555553e
 800beac:	3fc55555 	.word	0x3fc55555
 800beb0:	3fe00000 	.word	0x3fe00000
 800beb4:	fff00000 	.word	0xfff00000
 800beb8:	3ff00000 	.word	0x3ff00000
 800bebc:	4090cbff 	.word	0x4090cbff
 800bec0:	3f6f3400 	.word	0x3f6f3400

0800bec4 <fabs>:
 800bec4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bec8:	4619      	mov	r1, r3
 800beca:	4770      	bx	lr
 800becc:	0000      	movs	r0, r0
	...

0800bed0 <scalbn>:
 800bed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed2:	4616      	mov	r6, r2
 800bed4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bed8:	4604      	mov	r4, r0
 800beda:	460d      	mov	r5, r1
 800bedc:	460b      	mov	r3, r1
 800bede:	b992      	cbnz	r2, 800bf06 <scalbn+0x36>
 800bee0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bee4:	4303      	orrs	r3, r0
 800bee6:	d03c      	beq.n	800bf62 <scalbn+0x92>
 800bee8:	4b31      	ldr	r3, [pc, #196]	; (800bfb0 <scalbn+0xe0>)
 800beea:	2200      	movs	r2, #0
 800beec:	f7f4 faf4 	bl	80004d8 <__aeabi_dmul>
 800bef0:	4b30      	ldr	r3, [pc, #192]	; (800bfb4 <scalbn+0xe4>)
 800bef2:	4604      	mov	r4, r0
 800bef4:	429e      	cmp	r6, r3
 800bef6:	460d      	mov	r5, r1
 800bef8:	da0f      	bge.n	800bf1a <scalbn+0x4a>
 800befa:	a329      	add	r3, pc, #164	; (adr r3, 800bfa0 <scalbn+0xd0>)
 800befc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf00:	f7f4 faea 	bl	80004d8 <__aeabi_dmul>
 800bf04:	e006      	b.n	800bf14 <scalbn+0x44>
 800bf06:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800bf0a:	42ba      	cmp	r2, r7
 800bf0c:	d109      	bne.n	800bf22 <scalbn+0x52>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	f7f4 f92c 	bl	800016c <__adddf3>
 800bf14:	4604      	mov	r4, r0
 800bf16:	460d      	mov	r5, r1
 800bf18:	e023      	b.n	800bf62 <scalbn+0x92>
 800bf1a:	460b      	mov	r3, r1
 800bf1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bf20:	3a36      	subs	r2, #54	; 0x36
 800bf22:	f24c 3150 	movw	r1, #50000	; 0xc350
 800bf26:	428e      	cmp	r6, r1
 800bf28:	dd0e      	ble.n	800bf48 <scalbn+0x78>
 800bf2a:	a31f      	add	r3, pc, #124	; (adr r3, 800bfa8 <scalbn+0xd8>)
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800bf34:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800bf38:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800bf3c:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800bf40:	481d      	ldr	r0, [pc, #116]	; (800bfb8 <scalbn+0xe8>)
 800bf42:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800bf46:	e7db      	b.n	800bf00 <scalbn+0x30>
 800bf48:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bf4c:	4432      	add	r2, r6
 800bf4e:	428a      	cmp	r2, r1
 800bf50:	dceb      	bgt.n	800bf2a <scalbn+0x5a>
 800bf52:	2a00      	cmp	r2, #0
 800bf54:	dd08      	ble.n	800bf68 <scalbn+0x98>
 800bf56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf5e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf62:	4620      	mov	r0, r4
 800bf64:	4629      	mov	r1, r5
 800bf66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf68:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bf6c:	da0c      	bge.n	800bf88 <scalbn+0xb8>
 800bf6e:	a30c      	add	r3, pc, #48	; (adr r3, 800bfa0 <scalbn+0xd0>)
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800bf78:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800bf7c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800bf80:	480e      	ldr	r0, [pc, #56]	; (800bfbc <scalbn+0xec>)
 800bf82:	f041 011f 	orr.w	r1, r1, #31
 800bf86:	e7bb      	b.n	800bf00 <scalbn+0x30>
 800bf88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf8c:	3236      	adds	r2, #54	; 0x36
 800bf8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf96:	4620      	mov	r0, r4
 800bf98:	4629      	mov	r1, r5
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	4b08      	ldr	r3, [pc, #32]	; (800bfc0 <scalbn+0xf0>)
 800bf9e:	e7af      	b.n	800bf00 <scalbn+0x30>
 800bfa0:	c2f8f359 	.word	0xc2f8f359
 800bfa4:	01a56e1f 	.word	0x01a56e1f
 800bfa8:	8800759c 	.word	0x8800759c
 800bfac:	7e37e43c 	.word	0x7e37e43c
 800bfb0:	43500000 	.word	0x43500000
 800bfb4:	ffff3cb0 	.word	0xffff3cb0
 800bfb8:	8800759c 	.word	0x8800759c
 800bfbc:	c2f8f359 	.word	0xc2f8f359
 800bfc0:	3c900000 	.word	0x3c900000

0800bfc4 <with_errno>:
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	460d      	mov	r5, r1
 800bfca:	4616      	mov	r6, r2
 800bfcc:	f7fd f95c 	bl	8009288 <__errno>
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	6006      	str	r6, [r0, #0]
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	bd70      	pop	{r4, r5, r6, pc}

0800bfd8 <xflow>:
 800bfd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfda:	4615      	mov	r5, r2
 800bfdc:	461c      	mov	r4, r3
 800bfde:	b180      	cbz	r0, 800c002 <xflow+0x2a>
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bfe6:	e9cd 0100 	strd	r0, r1, [sp]
 800bfea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfee:	4628      	mov	r0, r5
 800bff0:	4621      	mov	r1, r4
 800bff2:	f7f4 fa71 	bl	80004d8 <__aeabi_dmul>
 800bff6:	2222      	movs	r2, #34	; 0x22
 800bff8:	b003      	add	sp, #12
 800bffa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bffe:	f7ff bfe1 	b.w	800bfc4 <with_errno>
 800c002:	4610      	mov	r0, r2
 800c004:	4619      	mov	r1, r3
 800c006:	e7ee      	b.n	800bfe6 <xflow+0xe>

0800c008 <__math_uflow>:
 800c008:	2200      	movs	r2, #0
 800c00a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c00e:	f7ff bfe3 	b.w	800bfd8 <xflow>

0800c012 <__math_oflow>:
 800c012:	2200      	movs	r2, #0
 800c014:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c018:	f7ff bfde 	b.w	800bfd8 <xflow>

0800c01c <__ieee754_sqrt>:
 800c01c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800c1c0 <__ieee754_sqrt+0x1a4>
 800c020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	ea3c 0c01 	bics.w	ip, ip, r1
 800c028:	460b      	mov	r3, r1
 800c02a:	4606      	mov	r6, r0
 800c02c:	460d      	mov	r5, r1
 800c02e:	460a      	mov	r2, r1
 800c030:	4604      	mov	r4, r0
 800c032:	d10e      	bne.n	800c052 <__ieee754_sqrt+0x36>
 800c034:	4602      	mov	r2, r0
 800c036:	f7f4 fa4f 	bl	80004d8 <__aeabi_dmul>
 800c03a:	4602      	mov	r2, r0
 800c03c:	460b      	mov	r3, r1
 800c03e:	4630      	mov	r0, r6
 800c040:	4629      	mov	r1, r5
 800c042:	f7f4 f893 	bl	800016c <__adddf3>
 800c046:	4606      	mov	r6, r0
 800c048:	460d      	mov	r5, r1
 800c04a:	4630      	mov	r0, r6
 800c04c:	4629      	mov	r1, r5
 800c04e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c052:	2900      	cmp	r1, #0
 800c054:	dc0d      	bgt.n	800c072 <__ieee754_sqrt+0x56>
 800c056:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c05a:	ea5c 0c00 	orrs.w	ip, ip, r0
 800c05e:	d0f4      	beq.n	800c04a <__ieee754_sqrt+0x2e>
 800c060:	b139      	cbz	r1, 800c072 <__ieee754_sqrt+0x56>
 800c062:	4602      	mov	r2, r0
 800c064:	f7f4 f880 	bl	8000168 <__aeabi_dsub>
 800c068:	4602      	mov	r2, r0
 800c06a:	460b      	mov	r3, r1
 800c06c:	f7f4 fb5e 	bl	800072c <__aeabi_ddiv>
 800c070:	e7e9      	b.n	800c046 <__ieee754_sqrt+0x2a>
 800c072:	1512      	asrs	r2, r2, #20
 800c074:	f000 8089 	beq.w	800c18a <__ieee754_sqrt+0x16e>
 800c078:	2500      	movs	r5, #0
 800c07a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c07e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c086:	07d2      	lsls	r2, r2, #31
 800c088:	bf5c      	itt	pl
 800c08a:	005b      	lslpl	r3, r3, #1
 800c08c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c090:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c094:	bf58      	it	pl
 800c096:	0064      	lslpl	r4, r4, #1
 800c098:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c09c:	0062      	lsls	r2, r4, #1
 800c09e:	2016      	movs	r0, #22
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800c0a6:	1076      	asrs	r6, r6, #1
 800c0a8:	190f      	adds	r7, r1, r4
 800c0aa:	429f      	cmp	r7, r3
 800c0ac:	bfde      	ittt	le
 800c0ae:	1bdb      	suble	r3, r3, r7
 800c0b0:	1939      	addle	r1, r7, r4
 800c0b2:	192d      	addle	r5, r5, r4
 800c0b4:	005b      	lsls	r3, r3, #1
 800c0b6:	3801      	subs	r0, #1
 800c0b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c0bc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c0c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c0c4:	d1f0      	bne.n	800c0a8 <__ieee754_sqrt+0x8c>
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	2720      	movs	r7, #32
 800c0ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c0ce:	428b      	cmp	r3, r1
 800c0d0:	eb0c 0e00 	add.w	lr, ip, r0
 800c0d4:	dc02      	bgt.n	800c0dc <__ieee754_sqrt+0xc0>
 800c0d6:	d113      	bne.n	800c100 <__ieee754_sqrt+0xe4>
 800c0d8:	4596      	cmp	lr, r2
 800c0da:	d811      	bhi.n	800c100 <__ieee754_sqrt+0xe4>
 800c0dc:	f1be 0f00 	cmp.w	lr, #0
 800c0e0:	eb0e 000c 	add.w	r0, lr, ip
 800c0e4:	da56      	bge.n	800c194 <__ieee754_sqrt+0x178>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	db54      	blt.n	800c194 <__ieee754_sqrt+0x178>
 800c0ea:	f101 0801 	add.w	r8, r1, #1
 800c0ee:	1a5b      	subs	r3, r3, r1
 800c0f0:	4641      	mov	r1, r8
 800c0f2:	4596      	cmp	lr, r2
 800c0f4:	bf88      	it	hi
 800c0f6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c0fa:	eba2 020e 	sub.w	r2, r2, lr
 800c0fe:	4464      	add	r4, ip
 800c100:	005b      	lsls	r3, r3, #1
 800c102:	3f01      	subs	r7, #1
 800c104:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c108:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c10c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c110:	d1dd      	bne.n	800c0ce <__ieee754_sqrt+0xb2>
 800c112:	4313      	orrs	r3, r2
 800c114:	d01b      	beq.n	800c14e <__ieee754_sqrt+0x132>
 800c116:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c1c4 <__ieee754_sqrt+0x1a8>
 800c11a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c1c8 <__ieee754_sqrt+0x1ac>
 800c11e:	e9da 0100 	ldrd	r0, r1, [sl]
 800c122:	e9db 2300 	ldrd	r2, r3, [fp]
 800c126:	f7f4 f81f 	bl	8000168 <__aeabi_dsub>
 800c12a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4640      	mov	r0, r8
 800c134:	4649      	mov	r1, r9
 800c136:	f7f4 fc4b 	bl	80009d0 <__aeabi_dcmple>
 800c13a:	b140      	cbz	r0, 800c14e <__ieee754_sqrt+0x132>
 800c13c:	e9da 0100 	ldrd	r0, r1, [sl]
 800c140:	e9db 2300 	ldrd	r2, r3, [fp]
 800c144:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c148:	d126      	bne.n	800c198 <__ieee754_sqrt+0x17c>
 800c14a:	463c      	mov	r4, r7
 800c14c:	3501      	adds	r5, #1
 800c14e:	106b      	asrs	r3, r5, #1
 800c150:	0864      	lsrs	r4, r4, #1
 800c152:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c156:	07ea      	lsls	r2, r5, #31
 800c158:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c15c:	bf48      	it	mi
 800c15e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 800c162:	4620      	mov	r0, r4
 800c164:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800c168:	e76d      	b.n	800c046 <__ieee754_sqrt+0x2a>
 800c16a:	0ae3      	lsrs	r3, r4, #11
 800c16c:	3915      	subs	r1, #21
 800c16e:	0564      	lsls	r4, r4, #21
 800c170:	2b00      	cmp	r3, #0
 800c172:	d0fa      	beq.n	800c16a <__ieee754_sqrt+0x14e>
 800c174:	02d8      	lsls	r0, r3, #11
 800c176:	d50a      	bpl.n	800c18e <__ieee754_sqrt+0x172>
 800c178:	f1c2 0020 	rsb	r0, r2, #32
 800c17c:	fa24 f000 	lsr.w	r0, r4, r0
 800c180:	1e55      	subs	r5, r2, #1
 800c182:	4094      	lsls	r4, r2
 800c184:	4303      	orrs	r3, r0
 800c186:	1b4a      	subs	r2, r1, r5
 800c188:	e776      	b.n	800c078 <__ieee754_sqrt+0x5c>
 800c18a:	4611      	mov	r1, r2
 800c18c:	e7f0      	b.n	800c170 <__ieee754_sqrt+0x154>
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	3201      	adds	r2, #1
 800c192:	e7ef      	b.n	800c174 <__ieee754_sqrt+0x158>
 800c194:	4688      	mov	r8, r1
 800c196:	e7aa      	b.n	800c0ee <__ieee754_sqrt+0xd2>
 800c198:	f7f3 ffe8 	bl	800016c <__adddf3>
 800c19c:	e9da 8900 	ldrd	r8, r9, [sl]
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4640      	mov	r0, r8
 800c1a6:	4649      	mov	r1, r9
 800c1a8:	f7f4 fc08 	bl	80009bc <__aeabi_dcmplt>
 800c1ac:	b120      	cbz	r0, 800c1b8 <__ieee754_sqrt+0x19c>
 800c1ae:	1ca1      	adds	r1, r4, #2
 800c1b0:	bf08      	it	eq
 800c1b2:	3501      	addeq	r5, #1
 800c1b4:	3402      	adds	r4, #2
 800c1b6:	e7ca      	b.n	800c14e <__ieee754_sqrt+0x132>
 800c1b8:	3401      	adds	r4, #1
 800c1ba:	f024 0401 	bic.w	r4, r4, #1
 800c1be:	e7c6      	b.n	800c14e <__ieee754_sqrt+0x132>
 800c1c0:	7ff00000 	.word	0x7ff00000
 800c1c4:	20000248 	.word	0x20000248
 800c1c8:	20000250 	.word	0x20000250

0800c1cc <_init>:
 800c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ce:	bf00      	nop
 800c1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1d2:	bc08      	pop	{r3}
 800c1d4:	469e      	mov	lr, r3
 800c1d6:	4770      	bx	lr

0800c1d8 <_fini>:
 800c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1da:	bf00      	nop
 800c1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1de:	bc08      	pop	{r3}
 800c1e0:	469e      	mov	lr, r3
 800c1e2:	4770      	bx	lr
